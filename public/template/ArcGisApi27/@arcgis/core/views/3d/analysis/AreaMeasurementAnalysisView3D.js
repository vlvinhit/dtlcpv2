/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import{d as s}from"../../../chunks/maybe.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import"../../../chunks/ensureType.js";import"../../../chunks/typedArrayUtil.js";import{subclass as r}from"../../../core/accessorSupport/decorators/subclass.js";import{d as n}from"../../../chunks/defaultUnit.js";import{A as o}from"../../../chunks/AnalysisView3D.js";import{M as a}from"../../../chunks/interfaces.js";import{watch as h,sync as l,syncAndInitial as c}from"../../../core/reactiveUtils.js";import{canProjectWithoutEngine as p,canProjectToWGS84ComparableLonLat as m,projectPointToVector as u,projectPointToWGS84ComparableLonLat as d,projectDirection as g,projectVectorToVector as _,tryProjectWithZConversion as f}from"../../../geometry/projection.js";import{g as y,W as L,S as j}from"../../../chunks/spatialReferenceEllipsoidUtils.js";import{d as v,f as S}from"../../../chunks/mathUtils.js";import{c as k,a as w,t as b}from"../../../chunks/quantityUtils.js";import{s as C,d as P,k as A}from"../../../chunks/vec2.js";import{a as M,f as V}from"../../../chunks/vec2f64.js";import{n as R,z as D,c as U,f as G,A as T,b as x,i as z,e as O,a as I}from"../../../chunks/vec3.js";import{c as E}from"../../../chunks/vec3f64.js";import{c as F,f as W}from"../../../chunks/vec4f64.js";import{E as B,z as q,K as N,L as H,M as $,N as Q}from"../../../chunks/unitUtils.js";import J from"../../../geometry/SpatialReference.js";import{A as K}from"../../../chunks/vector.js";import{c as X}from"../../../chunks/Indices.js";import{s as Z}from"../../../geometry/Extent.js";import{a as Y}from"../../../chunks/triangle.js";import{s as ee,b as te,f as se,t as ie,p as re,a as ne,c as oe,d as ae}from"../../../chunks/measurementUtils.js";import{m as he,U as le}from"../../../chunks/UnitNormalizer.js";import{g as ce}from"../../../chunks/ElevationProvider.js";import{m as pe,t as me}from"../../../chunks/mathUtils2.js";import{t as ue}from"../../../chunks/euclideanAreaMeasurementUtils.js";import de from"../../../core/Evented.js";import ge from"../../../core/Handles.js";import{L as _e}from"../../../chunks/Logger.js";import fe from"../../../geometry/Point.js";import{e as ye,b as Le}from"../../../chunks/aaBoundingRect.js";import{l as je,O as ve,L as Se}from"../../../chunks/LineVisualElement.js";import{E as ke,a as we,c as be,C as Ce}from"../../../chunks/EditGeometryOperations.js";import Pe from"../../../Color.js";import"../../../intl.js";import{g as Ae,a as Me,b as Ve,c as Re}from"../../../chunks/analysisThemeUtils.js";import{f as De}from"../../../chunks/quantityFormatUtils.js";import{h as Ue,f as Ge}from"../../../chunks/mat4.js";import{c as Te}from"../../../chunks/mat4f64.js";import{L as xe,G as ze,E as Oe}from"../../../chunks/Segment.js";import{e as Ie,c as Ee}from"../../../chunks/vec4.js";import{A as Fe}from"../../../chunks/Attribute.js";import{D as We,G as Be,a as qe}from"../../../chunks/DefaultBufferWriter.js";import{D as Ne,M as He,R as $e}from"../../../chunks/Material.js";import{V as Qe}from"../../../chunks/VertexAttribute.js";import{S as Je}from"../../../chunks/ShaderOutput.js";import{R as Ke}from"../../../chunks/RenderSlot.js";import{T as Xe,P as Ze}from"../../../chunks/TriangleMaterial.js";import{R as Ye,S as et,P as tt}from"../../../chunks/Program2.js";import{o as st,a as it,b as rt}from"../../../chunks/OrderIndependentTransparency.js";import{T as nt}from"../../../chunks/TransparencyPassType.js";import{m as ot}from"../../../chunks/MultipassTerrainTest.glsl.js";import{C as at}from"../../../chunks/ColorConversion.glsl.js";import{a as ht}from"../../../chunks/View.glsl.js";import{F as lt}from"../../../chunks/RgbaFloatEncoding.glsl.js";import{F as ct}from"../../../chunks/Float4PassUniform.js";import{g as pt}from"../../../chunks/interfaces2.js";import{S as mt}from"../../../chunks/ShaderBuilder.js";import{f as ut}from"../../../chunks/enums3.js";import{s as dt,m as gt,d as _t,a as ft}from"../../../chunks/renderState.js";import{p as yt}from"../../../chunks/ShaderTechniqueConfiguration.js";import{D as Lt}from"../../../chunks/DefaultTechniqueConfiguration.js";import{c as jt}from"../../../chunks/lineStippleUtils.js";import{o as vt}from"../../../chunks/locale.js";import{f as St}from"../../../chunks/messages.js";import"../../../chunks/get.js";import"../../../chunks/utils.js";import"../../../core/lang.js";import"../../../chunks/metadata.js";import"../../../chunks/ObjectPool.js";import"../../../chunks/ObservableBase.js";import"../../../chunks/tracking.js";import"../../../chunks/watch.js";import"../../../chunks/ArrayPool.js";import"../../../core/scheduling.js";import"../../../chunks/nextTick.js";import"../../../chunks/PooledArray.js";import"../../../core/promiseUtils.js";import"../../../core/Error.js";import"../../../chunks/object.js";import"../../../config.js";import"../../../chunks/string.js";import"../../../chunks/getDefaultUnitForView.js";import"../../../portal/Portal.js";import"../../../kernel.js";import"../../../core/urlUtils.js";import"../../../request.js";import"../../../core/JSONSupport.js";import"../../../core/Loadable.js";import"../../../core/Promise.js";import"../../../chunks/reader.js";import"../../../portal/PortalQueryParams.js";import"../../../chunks/jsonMap.js";import"../../../geometry/support/webMercatorUtils.js";import"../../../chunks/writer.js";import"../../../geometry/Geometry.js";import"../../../core/accessorSupport/decorators/cast.js";import"../../../portal/PortalQueryResult.js";import"../../../portal/PortalUser.js";import"../../../portal/PortalFolder.js";import"../../../portal/PortalGroup.js";import"../../../chunks/SimpleObservable.js";import"../../../geometry/Multipoint.js";import"../../../chunks/zmUtils.js";import"../../../chunks/pe.js";import"../../../chunks/assets.js";import"../../../geometry/Polygon.js";import"../../../chunks/extentUtils.js";import"../../../chunks/common.js";import"../../../geometry/Polyline.js";import"../../../chunks/geodesicConstants.js";import"../../../geometry/support/GeographicTransformation.js";import"../../../geometry/support/GeographicTransformationStep.js";import"../../../chunks/zscale.js";import"../../../chunks/ray.js";import"../../../chunks/ByteSizeUnit.js";import"../../../chunks/mat3f64.js";import"../../../chunks/quatf64.js";import"../../../chunks/lineSegment.js";import"../../../geometry/geometryEngine.js";import"../../../chunks/geometryEngineBase.js";import"../../../chunks/_commonjsHelpers.js";import"../../../chunks/hydrated.js";import"../../../geometry/support/geodesicUtils.js";import"../../../geometry.js";import"../../../chunks/typeUtils.js";import"../../../geometry/support/jsonUtils.js";import"../../../chunks/screenUtils.js";import"../../../chunks/earcut.js";import"../../../chunks/plane.js";import"../../../chunks/measurementUtils2.js";import"../../../chunks/VisualElement.js";import"../../../chunks/line.js";import"../../../chunks/DoubleArray.js";import"../../../chunks/ViewingMode.js";import"../../../chunks/geometry2dUtils.js";import"../../../chunks/colorUtils.js";import"../../../chunks/date.js";import"../../../chunks/datetime.js";import"../../../chunks/number.js";import"../../support/colorUtils.js";import"../../../chunks/colorUtils2.js";import"../../../chunks/unitFormatUtils.js";import"../../../chunks/Cyclical.js";import"../../../chunks/viewUtils.js";import"../../../chunks/dehydratedFeatures.js";import"../../../chunks/byteSizeEstimations.js";import"../../../chunks/aaBoundingBox.js";import"../../../chunks/quantizationUtils.js";import"../../../layers/support/Field.js";import"../../../chunks/enumeration.js";import"../../../chunks/domains.js";import"../../../layers/support/CodedValueDomain.js";import"../../../layers/support/Domain.js";import"../../../layers/support/InheritedDomain.js";import"../../../layers/support/RangeDomain.js";import"../../../chunks/fieldType.js";import"../../../chunks/elevationInfoUtils.js";import"../../../chunks/unitConversionUtils.js";import"../../../chunks/lengthUtils.js";import"../../../chunks/projector.js";import"../../../chunks/widgetUtils.js";import"../../../chunks/TextOverlayItem.js";import"../../../chunks/basicInterfaces.js";import"../../../chunks/Util2.js";import"../../../chunks/doublePrecisionUtils.js";import"../../../chunks/BufferView.js";import"../../../chunks/sphere.js";import"../../../chunks/Octree.js";import"../../../chunks/frustum.js";import"../../../chunks/InterleavedLayout.js";import"../../../chunks/types.js";import"../../../chunks/FloatsPassUniform.js";import"../../../chunks/mat3.js";import"../../../chunks/MarkerSizing.glsl.js";import"../../../chunks/VisualVariables.glsl.js";import"../../../chunks/Float3PassUniform.js";import"../../../chunks/Matrix3PassUniform.js";import"../../../chunks/FloatPassUniform.js";import"../../../chunks/sdfPrimitives.js";import"../../../chunks/floatRGBA.js";import"../../../chunks/Texture2.js";import"../../../chunks/requestImageUtils.js";import"../../../chunks/Texture.js";import"../../../chunks/contextUtils.js";import"../../../chunks/RibbonLine.glsl.js";import"../../../chunks/ForwardLinearDepth.glsl.js";import"../../../chunks/Matrix4PassUniform.js";import"../../../chunks/Slice.glsl.js";import"../../../chunks/ObjectAndLayerIdColor.glsl.js";import"../../../chunks/OutputDepth.glsl.js";import"../../../chunks/LineStipple.glsl.js";import"../../../chunks/Texture2DPassUniform.js";import"../../../chunks/PiUtils.glsl.js";import"../../../chunks/AlphaCutoff.js";import"../../../chunks/ReadLinearDepth.glsl.js";class kt{constructor(e,t){this.positionsWorldCoords=[],this.positionsRenderCoords=[],this.positionsProjectedWorldCoords=[],this.positionsFittedRenderCoords=[],this.positionsGeographic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.areaCentroidWorldCoords=E(),this.areaCentroidRenderCoords=E(),this.geodesicAreaCentroidRenderCoords=E(),this.area=null,this.geodesicArea=null,this.pathLength=null,this.geodesicPathLength=null,this.perimeterLength=null,this._length=0,this._centroidRenderCoords=E(),this._planeWorldCoords=F(),this._worldUp=E(),this._worldTangent=E(),this._frame=[E(),E(),E()],this._pathVersion=-1,this._validMeasurement=!1,this._hasCursorPoint=!1,this._mode=null,this._tempU=E(),this._tempV=E(),this._tempVec3=E(),this._tempSphere={center:E(),radius:0},this._sceneView=e,this.unitNormalizer=t}update(e,t,s,i,r,n,o){const a=this.unitNormalizer,h=this._sceneView.renderSpatialReference,l=this.unitNormalizer.spatialReference,c=null!=t;if(this._pathVersion===e.version&&this._validMeasurement===i&&!o&&this._hasCursorPoint===c&&this._mode===n)return!e.isValidPolygon&&(this._updateCursorSegmentLength(e,t),!0);this._pathVersion=e.version,this._validMeasurement=i,this._hasCursorPoint=c;const g=e.numVertices;this._resize(g);const _=y(s.spatialReference),f=p(s.spatialReference,_)&&m(s.spatialReference),{positionsGeographic:L,positionsWorldCoords:j,positionsRenderCoords:v,positionsSpherical:S}=this;e.forEachVertexPosition(((e,t)=>{!function(e,t){t.hasZ||(t.z=ce(e,t,"ground")??0)}(s.elevationProvider,e),u(e,j[t],l),u(e,v[t],h),f&&(d(e,L[t]),u(e,S[t],_),R(S[t],S[t]))}));const w=this._updatePathLengths(i);if(this.pathLength=this._length>1?k(a.normalizeDistance(w),"meters"):null,f){const e=this._updateGeodesicPathLengths(i,l);this.geodesicPathLength=this._length>1?k(e,"meters"):null}else this.geodesicPathLength=null;return this._updateCursorSegmentLength(e,t),this._updateMode(e,n),i?(this._updateArea(s,a,h,l,r),f&&this._updateGeodesicArea(s),!0):(this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear(),!0)}getData(){return{positionsWorldCoords:this.positionsWorldCoords,positionsRenderCoords:this.positionsRenderCoords,positionsProjectedWorldCoords:this.positionsProjectedWorldCoords,positionsFittedRenderCoords:this.positionsFittedRenderCoords,positionsGeographic:this.positionsGeographic,positionsSpherical:this.positionsSpherical,positionsStereographic:this.positionsStereographic,pathSegmentLengths:this.pathSegmentLengths,geodesicPathSegmentLengths:this.geodesicPathSegmentLengths,perimeterSegmentLengths:this.perimeterSegmentLengths,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidWorldCoords:this.areaCentroidWorldCoords,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,fittingMode:this.fittingMode,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,cursorSegmentLength:this.cursorSegmentLength,geodesicCursorSegmentLength:this.geodesicCursorSegmentLength,unitNormalizer:this.unitNormalizer,actualMeasurementMode:this.actualMeasurementMode}}_resize(e){for(e<this._length&&(this.positionsWorldCoords.length=e,this.positionsRenderCoords.length=e,this.positionsProjectedWorldCoords.length=e,this.positionsFittedRenderCoords.length=e,this.positionsGeographic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorldCoords.push(E()),this.positionsRenderCoords.push(E()),this.positionsProjectedWorldCoords.push(M()),this.positionsFittedRenderCoords.push(E()),this.positionsGeographic.push(E()),this.positionsSpherical.push(E()),this.positionsStereographic.push(M()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const t=this.positionsWorldCoords,s=this.pathSegmentLengths;let i=0;for(let r=0;r<this._length;++r){const n=s[r]=D(t[r],t[(r+1)%this._length]);(r<this._length-1||e)&&(i+=n)}return i}_updateGeodesicPathLengths(e,t){const s=this.positionsGeographic,i=this.geodesicPathSegmentLengths;let r=0;for(let n=0;n<this._length;++n){const o=i[n]=ee(s[n],s[(n+1)%this._length],t??void 0);(n<this._length-1||e)&&(r+=o)}return r}_updateArea(e,t,s,i,r){const n=e.renderCoordsHelper,o=this.positionsWorldCoords,a=this.positionsRenderCoords,h=this.positionsProjectedWorldCoords,l=this.positionsFittedRenderCoords,c=this._planeWorldCoords,p=this._centroidRenderCoords;he(a,p),n.worldUpAtPosition(p,this._worldUp),n.worldBasisAtPosition(p,K.X,this._worldTangent),g(p,this._worldUp,s,this._worldUp,i),g(p,this._worldTangent,s,this._worldTangent,i),o.length>2&&te(o,c),this.fittingMode=this._selectFittingMode(c,o,this._worldUp,r);let m=0;if("horizontal"===this.fittingMode){let e=-1/0;a.forEach(((t,s)=>{const i=n.getAltitude(a[s]);i>e&&(e=i,m=s)}))}const u=o[m];let d=c,f=this._worldTangent;"horizontal"===this.fittingMode?d=this._worldUp:"vertical"===this.fittingMode&&(d=this._tempVec3,f=this._worldUp,pe(c,this._worldUp,d)),U(this._frame[2],d),pe(f,d,this._frame[0]),G(this._frame[1],this._frame[0],this._frame[2]),T(this._frame[1],this._frame[1]);const y=this._tempVec3,L=this._tempU,j=this._tempV;for(let e=0;e<this._length;++e){const t=h[e],r=l[e];x(y,o[e],u),C(t,z(this._frame[0],y),z(this._frame[1],y)),O(L,this._frame[0],t[0]),O(j,this._frame[1],t[1]),I(y,L,j),I(y,y,u),_(y,i,r,s)}this.perimeterLength=this._length>0?k(t.normalizeDistance(this._updatePerimeterLengths()),"meters"):null,he(l,this.areaCentroidRenderCoords),_(this.areaCentroidRenderCoords,s,this.areaCentroidWorldCoords,i),this._updateIntersectingSegments(),this.area=0===this.intersectingSegments.size?w(t.normalizeArea(this._computeArea()),"square-meters"):null}_updateGeodesicArea(e){const{renderCoordsHelper:t,spatialReference:s}=e,{positionsSpherical:i,positionsStereographic:r}=this,n=this._tempVec3,o=se(i,n);if(!o)return void(this.geodesicArea=null);const a=this._tempU,h=this._tempV;me(n,a,h);for(let e=0;e<this._length;++e){const t=z(i[e],a),s=z(i[e],h),o=z(i[e],n);C(r[e],t/o,s/o)}O(n,n,B(s).radius),t.toRenderCoords(n,y(s),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=o&&0===this.geodesicIntersectingSegments.size?w(this._computeGeodesicArea(),"square-meters"):null}_updatePerimeterLengths(){const e=this.positionsProjectedWorldCoords,t=this.perimeterSegmentLengths;let s=0;for(let i=0;i<this._length;++i)s+=t[i]=P(e[i],e[(i+1)%this._length]);return s}_updateIntersectingSegments(){const e=this.positionsProjectedWorldCoords,t=this.intersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const r=e[s],n=e[(s+1)%this._length],o=e[i],a=e[(i+1)%this._length];Z(r,n,o,a)&&(t.add(s),t.add(i))}}_computeArea(){const e=this.positionsProjectedWorldCoords,t=this.triangleIndices=X(ue(e));let s=0;for(let i=0;i<t.length;i+=3)s+=Y(e[t[i]],e[t[i+1]],e[t[i+2]]);return s}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,t=this.geodesicIntersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const r=e[s],n=e[(s+1)%this._length],o=e[i],a=e[(i+1)%this._length];Z(r,n,o,a)&&(t.add(s),t.add(i))}}_computeGeodesicArea(){const e=this.positionsGeographic,t=this.positionsStereographic,s=this.geodesicTriangleIndices=X(ue(t));let i=0;for(let t=0;t<s.length;t+=3)i+=ie(e[s[t]],e[s[t+1]],e[s[t+2]],J.WGS84);return i}_selectFittingMode(e,t,s,i){const r=t.map((t=>Math.abs(re(e,t)))).reduce(((e,t)=>Math.max(e,t)),0);ne(t,this._tempSphere);const n=r/(2*this._tempSphere.radius),o=n<i.maxRelativeErrorCoplanar,a=n<i.maxRelativeErrorAlmostCoplanar;let h="horizontal";return o?h="oblique":a&&(h=Math.abs(z(s,e))>Math.cos(v(i.verticalAngleThreshold))?"horizontal":"vertical"),h}_updateCursorSegmentLength(e,t){const s=e.lastPoint;e.isValidPolygon||null==s||null==t?(this.geodesicCursorSegmentLength=null,this.cursorSegmentLength=null):(this.geodesicCursorSegmentLength=k(oe(s,t),"meters"),this.cursorSegmentLength=k(this.unitNormalizer.normalizeDistance(ae(s,t,this.unitNormalizer.spatialReference)),"meters"))}_updateMode(e,t){if(t===a.Auto){this.actualMeasurementMode="euclidean";let t=0;null!=this.geodesicPathLength&&(t+=this.geodesicPathLength.value),e.isValidPolygon||null==this.geodesicCursorSegmentLength||(t+=this.geodesicCursorSegmentLength.value),t>wt&&(this.actualMeasurementMode="geodesic")}else this.actualMeasurementMode=t===a.Euclidean?"euclidean":"geodesic";null==this.geodesicPathLength&&(this.actualMeasurementMode="euclidean"),this._mode=t}}const wt=1e5;let bt=class extends t{constructor(e){super(e)}initialize(){const e=this.view.spatialReference,t=y(e),s=t===j?L:t,i=!e||p(e,s)?s:e,r=new le(i);this._measurementDataManager=new kt(this.view,r),this.addHandles([this.analysisViewData.path.on("change",(()=>this._update())),h((()=>this.analysisViewData.cursorPoint),(()=>this._update()),l),h((()=>this.analysisViewData.mode),(()=>this._update()),l)]),this._update()}_update(e=!1){const{analysisViewData:t,view:s}=this;this._measurementDataManager.update(t.path,t.cursorPoint,s,t.validMeasurement,{maxRelativeErrorCoplanar:.005,maxRelativeErrorAlmostCoplanar:.01,verticalAngleThreshold:80},t.mode,e)&&(t.measurementData=this._measurementDataManager.getData())}};e([i({constructOnly:!0})],bt.prototype,"view",void 0),e([i({constructOnly:!0})],bt.prototype,"analysis",void 0),e([i({constructOnly:!0})],bt.prototype,"analysisViewData",void 0),bt=e([r("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementController")],bt);const Ct="esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurement3DPathHelper",Pt=_e.getLogger(Ct);let At=class extends de.EventedAccessor{constructor(e={}){super(e),this._handles=new ge,this._version=0,this._internalGeometryChange=!1,this._extent=ye()}destroy(){this._handles=s(this._handles)}set areaMeasurement(e){this._set("areaMeasurement",e),null!=e&&null!=this.view&&this._initialize(e,this.view)}set view(e){this._set("view",e),null!=e&&null!=this.areaMeasurement&&this._initialize(this.areaMeasurement,e)}get constructed(){return null!=this.areaMeasurement&&null!=this.view}get version(){return this._version}get isValidPolygon(){return this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].isClosed()}get extent(){if(this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].vertices.length>0){const e=ye(this._extent);return this.forEachVertex((t=>{Le(e,t.pos)})),e}return null}get spatialReference(){return this.constructed?this._editGeometry.coordinateHelper.spatialReference:null}_initialize(e,t){this._handles.removeAll(),this._handles.add(h((()=>e.geometry),(()=>{this._updateEditGeometryFromModelGeometry(e,t)}),c)),this._makeDirty(!0)}_makeDirty(e=!1){this.notifyChange("isValidPolygon"),this.notifyChange("initialized"),this.notifyChange("extent"),e&&this.notifyChange("numVertices")}_updateEditGeometryFromModelGeometry(e,t){if(this._version++,this._internalGeometryChange)return;this._handles.remove("EditGeometry");let s=e.geometry;if(null!=s){const i=f(s,t.spatialReference);null==i&&je(e,s.spatialReference,Pt),s=i}this._editGeometryOperations=null!=s?ke.fromGeometry(s,t.state.viewingMode):new ke(new we("polygon",be(!0,!1,t.spatialReference))),this._makeDirty(!0),this.emit("change"),this._handles.add(this._editGeometry.on("change",(t=>{this._makeDirty(null!=t.addedVertices||null!=t.removedVertices),this._internalGeometryChange=!0,e.geometry=this.numVertices>0?this._editGeometry.geometry:null,this._internalGeometryChange=!1})),"EditGeometry")}get _editGeometry(){return this._editGeometryOperations.data}get vertices(){const e=[];return this.forEachVertex((t=>{e.push(t)})),e}get numVertices(){return this.constructed&&this._editGeometry.components.length>0?this._editGeometry.components[0].vertices.length:0}get lastPoint(){if(this.constructed&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getLastVertex();if(null!=e)return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}return null}getVertex(e){if(!this.constructed||0===this._editGeometry.components.length||0===this._editGeometry.components[0].vertices.length)return null;const t=this._editGeometry.components[0].vertices[0];let s=t;do{if(s.index===e)return s;s=s.rightEdge.rightVertex}while(s!==t&&null!=s);return null}getVertexPositionAsPoint(e){return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}getVertexPositionAsPointFromIndex(e){return this._editGeometry.coordinateHelper.vectorToPoint(this.getVertex(e).pos)}forEachVertex(e){this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].iterateVertices(e)}forEachVertexPosition(e){const t=this._editGeometry.coordinateHelper;this.forEachVertex(((s,i)=>{t.vectorToPoint(s.pos,Mt),e(Mt,i)}))}clear(){null!=this.areaMeasurement&&(this.areaMeasurement.geometry=null)}add(e){if(!this.constructed)return null;if(0===this._editGeometry.components.length){const e=this.view;this._editGeometry.components.push(new Ce(e.spatialReference,e.state.viewingMode))}const t=this._editGeometryOperations.appendVertex(this._editGeometry.coordinateHelper.pointToVector(e));return this.emit("change"),t}close(){if(!this.constructed||0===this._editGeometry.components.length)return null;const e=this._editGeometryOperations.closeComponent(this._editGeometry.components[0]);return this.emit("change"),e}ensureContains(e,t=""){let s=!1;if(this._editGeometry.components.forEach((t=>{t.iterateVertices((t=>{t===e&&(s=!0)}))})),!s)throw new Error(`vertex doesnt exist ${t}`);return s}setVertexPosition(e,t){if(!this.constructed)return null;const s=this._editGeometryOperations.setVertexPosition(e,this._editGeometry.coordinateHelper.pointToVector(t));return this.emit("change"),s}equals(e){if(this.numVertices!==e.numVertices)return!1;let t=!0;return this.forEachVertexPosition(((s,i)=>{const r=e.getVertexPositionAsPointFromIndex(i);s.equals(r)||(t=!1)})),!!t}};e([i({value:null})],At.prototype,"areaMeasurement",null),e([i({value:null})],At.prototype,"view",null),e([i()],At.prototype,"isValidPolygon",null),e([i()],At.prototype,"extent",null),e([i()],At.prototype,"spatialReference",null),e([i()],At.prototype,"numVertices",null),At=e([r(Ct)],At);const Mt=new fe,Vt=Object.freeze(Object.defineProperty({__proto__:null,build:function(e){const t=new mt,{vertex:s,fragment:i}=t;return ht(s,e),t.attributes.add(Qe.POSITION,"vec3"),t.attributes.add(Qe.UV0,"vec2"),t.varyings.add("vUV","vec2"),e.hasMultipassTerrain&&t.varyings.add("depth","float"),s.code.add(pt`
    void main(void) {
      vUV = uv0;
      ${e.hasMultipassTerrain?"depth = (view * vec4(position, 1.0)).z;":""}
      gl_Position = proj * view * vec4(position, 1.0);
    }
  `),t.include(ot,e),i.uniforms.add(new lt("size",(e=>e.size))),i.uniforms.add(new ct("color1",(e=>e.color1))),i.uniforms.add(new ct("color2",(e=>e.color2))),i.include(at),i.code.add(pt`
    void main() {
      ${e.hasMultipassTerrain?"terrainDepthTest(gl_FragCoord, depth);":""}
      vec2 uvScaled = vUV / (2.0 * size);

      vec2 uv = fract(uvScaled - 0.25);
      vec2 ab = clamp((abs(uv - 0.5) - 0.25) / fwidth(uvScaled), -0.5, 0.5);
      float fade = smoothstep(0.25, 0.5, max(fwidth(uvScaled.x), fwidth(uvScaled.y)));
      float t = mix(abs(ab.x + ab.y), 0.5, fade);

      fragColor = mix(color2, color1, t);
      ${e.transparencyPassType===nt.Color?"fragColor = premultiplyAlpha(fragColor);":""}
    }
  `),t}},Symbol.toStringTag,{value:"Module"}));class Rt extends et{initializeProgram(e){return new tt(e.rctx,Rt.shader.get().build(this.configuration),Ne)}_setPipelineState(e){const t=this.configuration,s=e===nt.NONE,i=e===nt.FrontFace;return gt({blending:t.transparent?s?Ut:st(e):null,depthTest:{func:it(e)},depthWrite:s?t.writeDepth?_t:null:rt(e),colorWrite:ft,polygonOffset:s||i?t.polygonOffset?Dt:null:{factor:-1,units:-25}})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}Rt.shader=new Ye(Vt,(()=>Promise.resolve().then((()=>Vt))));const Dt={factor:0,units:-25},Ut=dt(ut.SRC_ALPHA,ut.ONE,ut.ONE_MINUS_SRC_ALPHA,ut.ONE_MINUS_SRC_ALPHA);class Gt extends Lt{constructor(){super(...arguments),this.transparencyPassType=nt.NONE,this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1,this.hasMultipassTerrain=!1,this.cullAboveGround=!1}}e([yt({count:nt.COUNT})],Gt.prototype,"transparencyPassType",void 0),e([yt()],Gt.prototype,"transparent",void 0),e([yt()],Gt.prototype,"writeDepth",void 0),e([yt()],Gt.prototype,"polygonOffset",void 0),e([yt()],Gt.prototype,"hasMultipassTerrain",void 0),e([yt()],Gt.prototype,"cullAboveGround",void 0);class Tt extends Xe{constructor(e){super(e,new zt),this._configuration=new Gt}dispose(){}getConfiguration(e,t){return this._configuration.transparent=this.parameters.transparent,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.polygonOffset=this.parameters.polygonOffset,this._configuration.transparencyPassType=t.transparencyPassType,this._configuration.hasMultipassTerrain=t.multipassTerrain.enabled,this._configuration.cullAboveGround=t.multipassTerrain.cullAboveGround,this._configuration}requiresSlot(e,t){return!(t!==Je.Color&&t!==Je.Alpha||e!==(this.parameters.transparent?this.parameters.writeDepth?Ke.TRANSPARENT_MATERIAL:Ke.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL:Ke.OPAQUE_MATERIAL)&&e!==Ke.DRAPED_MATERIAL)}createGLMaterial(e){return new xt(e)}createBufferWriter(){return new We(Ze)}}class xt extends Be{beginSlot(e){return this.ensureTechnique(Rt,e)}}class zt extends He{constructor(){super(...arguments),this.size=V(1,1),this.color1=W(.75,.75,.75,1),this.color2=W(.5,.5,.5,1),this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1}}class Ot extends ve{constructor(e){super(e),this._checkerBoardMaterial=null,this._renderOccluded=$e.OccludeAndTransparent,this._geometry=null,this._size=V(1,1),this._color1=W(1,.5,0,.5),this._color2=W(1,1,1,.5),this.applyProps(e)}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._updateMaterial())}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this._geometryChanged()}get size(){return this._size}set size(e){A(this._size,e),this._updateMaterial()}get color1(){return this._color1}set color1(e){Ie(e,this._color1)||(Ee(this._color1,e),this._updateMaterial())}get color2(){return this._color2}set color2(e){Ie(e,this._color2)||(Ee(this._color2,e),this._updateMaterial())}_updateMaterial(){null!=this._checkerBoardMaterial&&this._checkerBoardMaterial.setParameters({size:this._size,color1:this._color1,color2:this._color2,renderOccluded:this._renderOccluded})}createExternalResources(){this._checkerBoardMaterial=new Tt({size:this._size,color1:this._color1,color2:this._color2,transparent:!0,writeDepth:!1,polygonOffset:!0,renderOccluded:$e.OccludeAndTransparent})}destroyExternalResources(){this._checkerBoardMaterial=null}forEachExternalMaterial(e){null!=this._checkerBoardMaterial&&e(this._checkerBoardMaterial)}createGeometries(e){if(null==this._geometry||null==this._checkerBoardMaterial)return;const t=It;Ue(t,this.transform);const s=this._geometry,i=[],r=E();s.position.forEach((e=>{x(r,e,t),i.push(r[0],r[1],r[2])}));const n=[];s.uv.forEach((e=>{n.push(e[0],e[1])}));const o=new qe(this._checkerBoardMaterial,[[Qe.POSITION,new Fe(i,3,!0)],[Qe.UV0,new Fe(n,2,!0)]],[[Qe.POSITION,s.triangleIndices],[Qe.UV0,s.triangleIndices]]);e.addGeometry(o)}_geometryChanged(){this.recreateGeometry()}}const It=E();let Et=class extends t{get visible(){return this.analysisViewData.visible}get testData(){return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel}}}constructor(e){super(e),this._handles=new ge,this._params={pathLineColor:Pe.toUnitRGBA(Ae()),pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:Pe.toUnitRGBA(Ae()),perimeterLineWidth:2,projectionLineColor:Pe.toUnitRGBA(Ae()),projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:Pe.toUnitRGBA(Ae(.5)),areaColor2:Pe.toUnitRGBA(Me(.5)),labelDistance:25},this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._pathLengthLabel=null,this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._cursorSegment=null,this._origin=E(),this._originTransform=Te(),this._cursorPositionRenderSpace=E(),this.messages=null,this.viewData=Wt,this.areaLabel=null,this.perimeterLengthLabel=null,this.loadingMessages=!0}initialize(){const{analysisViewData:e,_params:t,view:s}=this;this._path=new Se({view:s,attached:!0,width:t.pathLineWidth,color:t.pathLineColor,polygonOffset:!0,renderOccluded:$e.OccludeAndTransparent}),this._intersectedPath=new Se({view:s,attached:!0,width:t.pathLineWidth,color:t.intersectingLineColor,polygonOffset:!0,renderOccluded:$e.OccludeAndTransparent}),this._perimeter=new Se({view:s,attached:!0,width:t.perimeterLineWidth,color:t.perimeterLineColor,polygonOffset:!0,renderOccluded:$e.OccludeAndTransparent}),this._intersectedPerimeter=new Se({view:s,attached:!0,width:t.perimeterLineWidth,color:t.intersectingLineColor,polygonOffset:!0,renderOccluded:$e.OccludeAndTransparent}),this._projectionLines=new Se({view:s,attached:!0,width:t.projectionLineWidth,color:t.projectionLineColor,stipplePattern:jt(t.projectionLineStippleSize),polygonOffset:!0,renderOccluded:$e.OccludeAndTransparent}),this._measurementArea=new Ot({view:s,attached:!0,color1:t.areaColor1,color2:t.areaColor2});const i={attached:!0,backgroundColor:Ve(.6),calloutColor:Ve(.5),textColor:Re(),view:s};this._areaLabel=new xe({...i,fontSize:Ft.Large}),this._pathLengthLabel=new xe({...i,fontSize:Ft.Small}),this._cursorSegmentLengthLabel=new xe({...i,fontSize:Ft.Small}),this._perimeterLengthLabel=new xe({...i,fontSize:Ft.Small}),this._handles.add([h((()=>[e.mode,this.visible,e.unit,e.measurementData,e.cursorPoint]),(()=>this._update()),c),h((()=>s.state?.camera),(()=>this._updateLabels()),c),vt((()=>this._updateMessageBundle()))]),this._updateMessageBundle()}destroy(){this._measurementArea=s(this._measurementArea),this._path=s(this._path),this._intersectedPath=s(this._intersectedPath),this._perimeter=s(this._perimeter),this._intersectedPerimeter=s(this._intersectedPerimeter),this._areaLabel=s(this._areaLabel),this._pathLengthLabel=s(this._pathLengthLabel),this._cursorSegmentLengthLabel=s(this._cursorSegmentLengthLabel),this._perimeterLengthLabel=s(this._perimeterLengthLabel),this._projectionLines=s(this._projectionLines),this._handles=s(this._handles),this.set("view",null)}_update(){if(this.destroyed||!this.view.ready||!this.view.renderCoordsHelper)return;const{analysisViewData:{measurementData:e},analysisViewData:t}=this;null!=e&&(this._updateViewData(e,t.path,t.cursorPoint),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(e,t,s){const i=t.isValidPolygon,r="geodesic"===e.actualMeasurementMode,n=r?e.geodesicArea:e.area;let o=1;if(n){const t=this._toPreferredAreaUnit(n,this.analysisViewData.unit);o=S(Math.sqrt(t.value)/Math.sqrt(300)),o*=Math.sqrt(q(1,t.unit,"square-meters")),o/=e.unitNormalizer.normalizeDistance(1)}const a={validMeasurement:i,path:t,pathVersion:t.version,cursorPoint:s,measurementData:e,mode:e.actualMeasurementMode,positionsGeographic:e.positionsGeographic,positionsRenderCoords:e.positionsRenderCoords,positionsProjected:e.positionsProjectedWorldCoords,positionsFittedRenderCoords:e.positionsFittedRenderCoords,intersectingSegments:r?e.geodesicIntersectingSegments:e.intersectingSegments,triangleIndices:r?e.geodesicTriangleIndices:e.triangleIndices,fittingMode:e.fittingMode,areaCentroid:r?e.geodesicAreaCentroidRenderCoords:e.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:i?0:t.numVertices-2,perimeterLengthLabelSegmentIndex:0,checkerSize:o};this._set("viewData",a)}_updateOrigin(){const e=this.viewData;he(e.positionsRenderCoords,this._origin),Ge(this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(e){const t=this.viewData,s=t.path,i=this.view.renderCoordsHelper.spatialReference,r=t.mode,n=[],o=[],a=[],h=t.validMeasurement?s.numVertices:s.numVertices-1;for(let l=0;l<h;++l){const h=t[e][l],c=t[e][(l+1)%s.numVertices];let p=null;switch(r){case"euclidean":p=new Oe(h,c);break;case"geodesic":p=new ze(h,c,i)}t.intersectingSegments.has(l)?a.push(p):o.push(p),n.push(p)}return{all:n,nonIntersecting:o,intersecting:a}}_updatePathSegments(){const{view:{renderCoordsHelper:e},viewData:t,visible:s}=this,i=this._createSegments("positionsRenderCoords"),{cursorPoint:r,mode:n,path:o}=t,a=!o.isValidPolygon,h=e.spatialReference;if(this._cursorSegment=null,o.numVertices>0&&a&&null!=r&&e.toRenderCoords(r,this._cursorPositionRenderSpace)){const e=t.positionsRenderCoords[o.numVertices-1],s=this._cursorPositionRenderSpace;let r=null;switch(n){case"euclidean":r=new Oe(e,s);break;case"geodesic":r=new ze(e,s,h)}i.nonIntersecting.push(r),this._cursorSegment=r}this._path.setGeometryFromSegments(i.nonIntersecting,this._origin),this._path.visible=s,this._intersectedPath.setGeometryFromSegments(i.intersecting,this._origin),this._intersectedPath.visible=s,this._pathSegments=i.all}_updatePerimeterSegments(){const e=this.visible&&"euclidean"===this.viewData.mode,t=this._createSegments("positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(t.nonIntersecting,this._origin),this._perimeter.visible=e,this._intersectedPerimeter.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPerimeter.visible=e,this._perimeterSegments=t.all}_updateArea(){const e=this.viewData;switch(e.mode){case"euclidean":this._updateAreaEuclidean(e);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(e){const t=this.visible;e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices?(this._measurementArea.geometry={uv:e.positionsProjected,position:e.positionsFittedRenderCoords,triangleIndices:e.triangleIndices},this._measurementArea.size=[e.checkerSize,e.checkerSize],this._measurementArea.visible=t):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const e=this.viewData,t=this.visible,s=e.path,i=e.mode;if(s.numVertices>0&&e.validMeasurement&&"euclidean"===i){const i=[];for(let t=0;t<s.numVertices;++t){const s=E();x(s,e.positionsRenderCoords[t],this._origin);const r=E();x(r,e.positionsFittedRenderCoords[t],this._origin),i.push([s,r])}this._projectionLines.geometry=i,this._projectionLines.visible=t}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const{viewData:e}=this,{measurementData:t,mode:s,path:i}=e;if(!i)return;const r=!i.isValidPolygon,n=this.visible,o=this._formatAreaLabel(this.messages,"geodesic"===s?t.geodesicArea:t.area,this.analysisViewData.unit);null!=o?(this._areaLabel.geometry={type:"point",point:e.areaCentroid},this._areaLabel.text=o,this._areaLabel.visible=e.validMeasurement&&0===e.intersectingSegments.size&&n):this._areaLabel.visible=!1,this._set("areaLabel",o);const a=this._formatLengthLabel(this.messages,"geodesic"===s?t.geodesicPathLength:t.pathLength,this.analysisViewData.unit);if(null!=a&&e.pathLengthLabelSegmentIndex>=0&&e.pathLengthLabelSegmentIndex<this._pathSegments.length){const t=this._pathSegments[e.pathLengthLabelSegmentIndex],s=null!=this._cursorSegment?this._cursorSegment:Bt;this._pathLengthLabel.distance=this._params.labelDistance,this._pathLengthLabel.geometry={type:"corner",left:t,right:s},this._pathLengthLabel.text=a,this._pathLengthLabel.visible=r&&i.numVertices>0&&n}else this._pathLengthLabel.visible=!1;const h="geodesic"===s?e.measurementData.geodesicCursorSegmentLength:e.measurementData.cursorSegmentLength;if(null!=h){const e=this._formatLengthLabel(this.messages,h,this.analysisViewData.unit);this._cursorSegmentLengthLabel.distance=this._params.labelDistance,this._cursorSegmentLengthLabel.geometry=null!=this._cursorSegment?{type:"segment",segment:this._cursorSegment,sampleLocation:"end"}:null,this._cursorSegmentLengthLabel.anchor="bottom",this._cursorSegmentLengthLabel.text=e,this._cursorSegmentLengthLabel.visible=r&&0!==h.value&&n}else this._cursorSegmentLengthLabel.visible=!1;this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1);const l="geodesic"===e.mode,c=l?t.geodesicPathLength:t.perimeterLength,p=this._formatLengthLabel(this.messages,c,this.analysisViewData.unit);if(this._set("perimeterLengthLabel",p),e.validMeasurement&&0===e.intersectingSegments.size){this._perimeterLengthLabel.distance=this._params.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=p,this._perimeterLengthLabel.visible=!0;let t=!0;for(let s=0;s<e.path.numVertices;++s){const i=(e.perimeterLengthLabelSegmentIndex+s)%e.path.numVertices,r=l?this._pathSegments[i]:this._perimeterSegments[i];if(t=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:r,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;t=!1}this._perimeterLengthLabel.visible=t&&n}else this._perimeterLengthLabel.visible=!1}_toPreferredAreaUnit(e,t){return b(e,this._preferredAreaUnit(e,t))}_preferredAreaUnit(e,t){switch(t){case"metric":return H(e.value,e.unit);case"imperial":return N(e.value,e.unit);default:return t}}_preferredLengthUnit(e,t){const s=this._deriveLengthUnitFromAreaUnit(t);switch(s){case"metric":return Q(e.value,e.unit);case"imperial":return $(e.value,e.unit);default:return s}}_deriveLengthUnitFromAreaUnit(e){switch(e){case"metric":case"ares":case"hectares":return"metric";case"imperial":case"acres":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers"}throw new Error("unhandled area unit")}_formatAreaLabel(e,t,s){return e&&t&&De(e,t,this._preferredAreaUnit(t,s))}_formatLengthLabel(e,t,s){return e&&t&&De(e,t,this._preferredLengthUnit(t,s))}_updateMessageBundle(){this.loadingMessages=!0,St("esri/core/t9n/Units").then((e=>{this.messages=e,this.view&&this._update()})).finally((()=>{this.loadingMessages=!1}))}};var Ft;e([i()],Et.prototype,"view",void 0),e([i()],Et.prototype,"messages",void 0),e([i()],Et.prototype,"analysis",void 0),e([i()],Et.prototype,"viewData",void 0),e([i()],Et.prototype,"analysisViewData",void 0),e([i({readOnly:!0})],Et.prototype,"areaLabel",void 0),e([i({readOnly:!0})],Et.prototype,"perimeterLengthLabel",void 0),e([i()],Et.prototype,"loadingMessages",void 0),e([i()],Et.prototype,"visible",null),Et=e([r("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],Et),function(e){e[e.Small=12]="Small",e[e.Large=16]="Large"}(Ft||(Ft={}));const Wt={validMeasurement:!1,path:null,pathVersion:-1,cursorPoint:null,measurementData:null,mode:null,positionsGeographic:null,positionsRenderCoords:null,positionsProjected:null,positionsFittedRenderCoords:null,intersectingSegments:null,triangleIndices:null,fittingMode:null,areaCentroid:null,pathLengthLabelSegmentIndex:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null},Bt=new Oe(E(),E());let qt=class extends(o(t)){constructor(e){super(e),this.type="area-measurement-view-3d",this.analysis=null,this.measurementData=null,this.lastDraggedVertex=null,this.cursorPoint=null,this.mode=a.Auto}initialize(){const{analysis:e,view:t}=this;this.path=new At({view:t,areaMeasurement:e}),this.analysisVisualization=new Et({view:t,analysis:e,analysisViewData:this}),this.analysisController=new bt({view:t,analysis:e,analysisViewData:this})}destroy(){this.analysisController=s(this.analysisController),this.analysisVisualization=s(this.analysisVisualization),this.path.destroy()}get updating(){return!!this.analysisVisualization?.loadingMessages}get result(){const{measurementData:e}=this;return null==e?{area:null,mode:null,perimeter:null}:"euclidean"===e.actualMeasurementMode?{area:e.area,perimeter:e.perimeterLength,mode:"euclidean"}:{area:e.geodesicArea,perimeter:e.pathLength,mode:"geodesic"}}get viewData(){return this.analysisVisualization.viewData}get validMeasurement(){return this.path.isValidPolygon}get unit(){return this.analysis.unit??this._defaultUnit}get testData(){return{visualization:this.analysisVisualization,controller:this.analysisController}}};e([i({readOnly:!0})],qt.prototype,"type",void 0),e([i({constructOnly:!0,nonNullable:!0})],qt.prototype,"analysis",void 0),e([i()],qt.prototype,"updating",null),e([i()],qt.prototype,"analysisVisualization",void 0),e([i()],qt.prototype,"analysisController",void 0),e([i()],qt.prototype,"result",null),e([i()],qt.prototype,"measurementData",void 0),e([i()],qt.prototype,"viewData",null),e([i()],qt.prototype,"validMeasurement",null),e([i()],qt.prototype,"path",void 0),e([i()],qt.prototype,"lastDraggedVertex",void 0),e([i()],qt.prototype,"cursorPoint",void 0),e([i()],qt.prototype,"mode",void 0),e([i()],qt.prototype,"unit",null),e([i(n)],qt.prototype,"_defaultUnit",void 0),qt=e([r("esri.views.3d.analysis.AreaMeasurementAnalysisView3D")],qt);const Nt=qt;export{Nt as default};
