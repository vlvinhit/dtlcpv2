/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import e from"../core/Error.js";import{h as t}from"./typedArrayUtil.js";import{i as r}from"./mathUtils.js";import{L as i}from"./Logger.js";import{C as s}from"./contextUtils.js";import{B as a,C as o,S as n,R as c,P as l,a as _,b as h,c as d,T as p,d as u}from"./enums3.js";const m=i.getLogger("esri.views.webgl.checkWebGLError"),E=!!t("enable-feature:webgl-debug");function T(){return E}function R(){return E}function A(t){if(T()){const r=t.getError();if(r){const i=function(e,t){switch(t){case e.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case e.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case e.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case e.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case e.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case e.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}(t,r),s=(new Error).stack;m.error(new e("webgl-error","WebGL error occured",{message:i,stack:s}))}}}var f;function g(e){const t=e.gl;switch(t.getError()){case t.NO_ERROR:return null;case t.INVALID_ENUM:return"An unacceptable value has been specified for an enumerated argument";case t.INVALID_VALUE:return"An unacceptable value has been specified for an argument";case t.INVALID_OPERATION:return"The specified command is not allowed for the current state";case t.INVALID_FRAMEBUFFER_OPERATION:return"The currently bound framebuffer is not framebuffer complete";case t.OUT_OF_MEMORY:return"Not enough memory is left to execute the command";case t.CONTEXT_LOST_WEBGL:return"WebGL context is lost"}return"Unknown error"}function x(e,t){return e.vertexBuffers[t].byteLength/e.layout[t][0].stride}function I(e,t,r,i,s=0){const a=e.gl,o=e.capabilities.instancing;e.bindBuffer(r);for(const e of i){const r=t.get(e.name);void 0===r&&console.error(`There is no location for vertex attribute '${e.name}' defined.`);const i=s*e.stride;if(e.count<=4)a.vertexAttribPointer(r,e.count,e.type,e.normalized,e.stride,e.offset+i),a.enableVertexAttribArray(r),e.divisor>0&&o&&o.vertexAttribDivisor(r,e.divisor);else if(9===e.count)for(let t=0;t<3;t++)a.vertexAttribPointer(r+t,3,e.type,e.normalized,e.stride,e.offset+12*t+i),a.enableVertexAttribArray(r+t),e.divisor>0&&o&&o.vertexAttribDivisor(r+t,e.divisor);else if(16===e.count)for(let t=0;t<4;t++)a.vertexAttribPointer(r+t,4,e.type,e.normalized,e.stride,e.offset+16*t+i),a.enableVertexAttribArray(r+t),e.divisor>0&&o&&o.vertexAttribDivisor(r+t,e.divisor);else console.error("Unsupported vertex attribute element count: "+e.count)}}function M(e,t,r,i){const s=e.gl,o=e.capabilities.instancing;e.bindBuffer(r);for(const e of i){const r=t.get(e.name);if(e.count<=4)s.disableVertexAttribArray(r),e.divisor&&e.divisor>0&&o&&o.vertexAttribDivisor(r,0);else if(9===e.count)for(let t=0;t<3;t++)s.disableVertexAttribArray(r+t),e.divisor&&e.divisor>0&&o&&o.vertexAttribDivisor(r+t,0);else if(16===e.count)for(let t=0;t<4;t++)s.disableVertexAttribArray(r+t),e.divisor&&e.divisor>0&&o&&o.vertexAttribDivisor(r+t,0);else console.error("Unsupported vertex attribute element count: "+e.count)}e.unbindBuffer(a.ARRAY_BUFFER)}function D(e){switch(e){case l.ALPHA:case l.LUMINANCE:case l.RED:case l.RED_INTEGER:case n.R8:case n.R8I:case n.R8UI:case n.R8_SNORM:case c.STENCIL_INDEX8:return 1;case l.LUMINANCE_ALPHA:case l.RG:case l.RG_INTEGER:case n.RGBA4:case n.R16F:case n.R16I:case n.R16UI:case n.RG8:case n.RG8I:case n.RG8UI:case n.RG8_SNORM:case n.RGB565:case n.RGB5_A1:case c.DEPTH_COMPONENT16:return 2;case l.DEPTH_COMPONENT:case l.RGB:case l.RGB_INTEGER:case n.RGB8:case n.RGB8I:case n.RGB8UI:case n.RGB8_SNORM:case n.SRGB8:case c.DEPTH_COMPONENT24:return 3;case l.DEPTH_STENCIL:case l.DEPTH24_STENCIL8:case l.RGBA:case l.RGBA_INTEGER:case n.RGBA8:case n.R32F:case n.R11F_G11F_B10F:case n.RG16F:case n.R32I:case n.R32UI:case n.RG16I:case n.RG16UI:case n.RGBA8I:case n.RGBA8UI:case n.RGBA8_SNORM:case n.SRGB8_ALPHA8:case n.RGB9_E5:case n.RGB10_A2UI:case n.RGB10_A2:case c.DEPTH_STENCIL:case c.DEPTH_COMPONENT32F:case c.DEPTH24_STENCIL8:return 4;case c.DEPTH32F_STENCIL8:return 5;case n.RGB16F:case n.RGB16I:case n.RGB16UI:return 6;case n.RG32F:case n.RG32I:case n.RG32UI:case n.RGBA16F:case n.RGBA16I:case n.RGBA16UI:return 8;case n.RGB32F:case n.RGB32I:case n.RGB32UI:return 12;case n.RGBA32F:case n.RGBA32I:case n.RGBA32UI:return 16;case o.COMPRESSED_RGB_S3TC_DXT1_EXT:case o.COMPRESSED_RGBA_S3TC_DXT1_EXT:return.5;case o.COMPRESSED_RGBA_S3TC_DXT3_EXT:case o.COMPRESSED_RGBA_S3TC_DXT5_EXT:return 1;case o.COMPRESSED_R11_EAC:case o.COMPRESSED_SIGNED_R11_EAC:case o.COMPRESSED_RGB8_ETC2:case o.COMPRESSED_SRGB8_ETC2:case o.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:case o.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:return.5;case o.COMPRESSED_RG11_EAC:case o.COMPRESSED_SIGNED_RG11_EAC:case o.COMPRESSED_RGBA8_ETC2_EAC:case o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:return 1}return 0}!function(e){e[e.Texture=0]="Texture",e[e.RenderBuffer=1]="RenderBuffer"}(f||(f={}));class b{constructor(e=0,t=e){this.width=e,this.height=t,this.target=_.TEXTURE_2D,this.pixelFormat=l.RGBA,this.dataType=h.UNSIGNED_BYTE,this.samplingMode=d.LINEAR,this.wrapMode=p.REPEAT,this.maxAnisotropy=1,this.flipped=!1,this.hasMipmap=!1,this.isOpaque=!1,this.unpackAlignment=4,this.preMultiplyAlpha=!1,this.depth=1,this.isImmutable=!1}}class w extends b{constructor(e,t){switch(super(),this.context=e,Object.assign(this,t),this.internalFormat){case n.R16F:case n.R16I:case n.R16UI:case n.R32F:case n.R32I:case n.R32UI:case n.R8_SNORM:case n.R8:case n.R8I:case n.R8UI:this.pixelFormat=l.RED}}static validate(e,t){return new w(e,t)}}let N=class{constructor(t,r=null,i=null){if(this.type=f.Texture,this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,"context"in t)this._descriptor=t,i=r;else{const i=w.validate(t,r);if(!i)throw new e("Texture descriptor invalid");this._descriptor=i}if(this._descriptor.context.instanceCounter.increment(u.Texture,this),this._descriptor.context.type!==s.WEBGL2&&(this._descriptor.isImmutable&&(this._descriptor.isImmutable=!1),O(this._descriptor.target)))throw new e("3D and array textures are not supported in WebGL1");this._descriptor.target===_.TEXTURE_CUBE_MAP?this._setDataCubeMap(i):this.setData(i)}get glName(){return this._glName}get descriptor(){return this._descriptor}get gpuMemoryUsage(){return C.delete(this),(e=this._descriptor).width<=0||e.height<=0||null==e.internalFormat?0:e.width*e.height*(e.hasMipmap?4/3:1)*D(e.internalFormat);var e}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._descriptor.context.gl&&this._glName&&(this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null,this._descriptor.context.instanceCounter.decrement(u.Texture,this))}release(){this.dispose()}resize(t,r){const i=this._descriptor;if(i.width!==t||i.height!==r){if(this._wasImmutablyAllocated)throw new e("Immutable textures can't be resized!");i.width=t,i.height=r,this._descriptor.target===_.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(e=null){for(let t=_.TEXTURE_CUBE_MAP_POSITIVE_X;t<=_.TEXTURE_CUBE_MAP_NEGATIVE_Z;t++)this._setData(e,t)}setData(e){this._setData(e)}_setData(t,r){if(!this._descriptor.context||!this._descriptor.context.gl)return;const i=this._descriptor.context.gl;A(i),this._glName||(this._glName=i.createTexture()),void 0===t&&(t=null);const s=this._descriptor,a=r??s.target,n=O(a);null===t&&(s.width=s.width||4,s.height=s.height||4,n&&(s.depth=s.depth??1));const c=this._descriptor.context.bindTexture(this,N.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(N.TEXTURE_UNIT_FOR_UPDATES),S(this._descriptor.context,s),this._configurePixelStorage(),A(i);const l=this._deriveInternalFormat();if(L(t)){let e=t.width,r=t.height;const o=1;t instanceof HTMLVideoElement&&(e=t.videoWidth,r=t.videoHeight),s.width&&s.height,n&&s.depth,s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,l,s.hasMipmap,e,r,o),this._texImage(a,0,l,e,r,o,t),A(i),s.hasMipmap&&this.generateMipmap(),s.width||(s.width=e),s.height||(s.height=r),n&&!s.depth&&(s.depth=o)}else{const{width:r,height:c,depth:_}=s;if(null==r||null==c)throw new e("Width and height must be specified!");if(n&&null==_)throw new e("Depth must be specified!");if(s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,l,s.hasMipmap,r,c,_),G(t)){const n=t.levels,h=B(a,r,c,_),d=Math.min(h-1,n.length-1);null!=this._descriptor.context.gl2?i.texParameteri(s.target,this._descriptor.context.gl2.TEXTURE_MAX_LEVEL,d):s.hasMipmap=s.hasMipmap&&h===n.length;const p=l;if(!(p in o))throw new e("Attempting to use compressed data with an uncompressed format!");this._forEachMipmapLevel(((e,t,r,i)=>{const s=n[Math.min(e,n.length-1)];this._compressedTexImage(a,e,p,t,r,i,s)}),d)}else this._texImage(a,0,l,r,c,_,t),A(i),s.hasMipmap&&this.generateMipmap()}P(i,this._descriptor),U(i,this._descriptor),function(e,t){const r=e.capabilities.textureFilterAnisotropic;r&&e.gl.texParameterf(t.target,r.TEXTURE_MAX_ANISOTROPY,t.maxAnisotropy??1)}(this._descriptor.context,this._descriptor),A(i),this._descriptor.context.bindTexture(c,N.TEXTURE_UNIT_FOR_UPDATES)}updateData(t,r,i,s,a,o,n=0){o||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const c=this._descriptor.context.gl,l=this._descriptor.context.gl2,_=this._descriptor,h=this._deriveInternalFormat(),{pixelFormat:d,dataType:p,target:u,isImmutable:m}=_;if(m&&!this._wasImmutablyAllocated)throw new e("Cannot update immutable texture before allocation!");const E=this._descriptor.context.bindTexture(this,N.TEXTURE_UNIT_FOR_UPDATES,!0);if((r<0||i<0||s>_.width||a>_.height||r+s>_.width||i+a>_.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),n){if(!l)return void console.error("Webgl2 must be enabled to use dataRowOffset!");c.pixelStorei(l.UNPACK_SKIP_ROWS,n)}if(L(o)?l?l.texSubImage2D(u,t,r,i,s,a,d,p,o):c.texSubImage2D(u,t,r,i,d,p,o):G(o)?c.compressedTexSubImage2D(u,t,r,i,s,a,h,o.levels[t]):c.texSubImage2D(u,t,r,i,s,a,d,p,o),n){if(!l)return void console.error("Webgl2 must be enabled to use dataRowOffset!");c.pixelStorei(l.UNPACK_SKIP_ROWS,0)}this._descriptor.context.bindTexture(E,N.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(t,r,i,s,a,o,n,c){c||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const l=this._descriptor.context.gl2;if(null==l)throw new e("3D textures are not supported in WebGL1");const _=this._descriptor,h=this._deriveInternalFormat(),{pixelFormat:d,dataType:p,isImmutable:u,target:m}=_;if(u&&!this._wasImmutablyAllocated)throw new e("Cannot update immutable texture before allocation!");O(m)||console.warn("Attempting to set 3D texture data on a non-3D texture");const E=this._descriptor.context.bindTexture(this,N.TEXTURE_UNIT_FOR_UPDATES);if(this._descriptor.context.setActiveTexture(N.TEXTURE_UNIT_FOR_UPDATES),(r<0||i<0||s<0||a>_.width||o>_.height||n>_.depth||r+a>_.width||i+o>_.height||s+n>_.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),G(c))c=c.levels[t],l.compressedTexSubImage3D(m,t,r,i,s,a,o,n,h,c);else{const e=c;l.texSubImage3D(m,t,r,i,s,a,o,n,d,p,e)}this._descriptor.context.bindTexture(E,N.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const t=this._descriptor;if(!t.hasMipmap){if(this._wasImmutablyAllocated)throw new e("Cannot add mipmaps to immutable texture after allocation");t.hasMipmap=!0,this._samplingModeDirty=!0,S(this._descriptor.context,t)}t.samplingMode===d.LINEAR?(this._samplingModeDirty=!0,t.samplingMode=d.LINEAR_MIPMAP_NEAREST):t.samplingMode===d.NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=d.NEAREST_MIPMAP_NEAREST);const r=this._descriptor.context.bindTexture(this,N.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(N.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(t.target),this._descriptor.context.bindTexture(r,N.TEXTURE_UNIT_FOR_UPDATES)}setSamplingMode(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)}setWrapMode(e){e!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=e,S(this._descriptor.context,this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const e=this._descriptor.context.gl,t=this._descriptor;this._samplingModeDirty&&(P(e,t),this._samplingModeDirty=!1),this._wrapModeDirty&&(U(e,t),this._wrapModeDirty=!1)}_deriveInternalFormat(){if(this._descriptor.context.type===s.WEBGL1)return this._descriptor.internalFormat=this._descriptor.pixelFormat;if(null!=this._descriptor.internalFormat)return this._descriptor.internalFormat===l.DEPTH_STENCIL&&(this._descriptor.internalFormat=l.DEPTH24_STENCIL8),this._descriptor.internalFormat;switch(this._descriptor.dataType){case h.FLOAT:switch(this._descriptor.pixelFormat){case l.RGBA:return this._descriptor.internalFormat=n.RGBA32F;case l.RGB:return this._descriptor.internalFormat=n.RGB32F;default:throw new e("Unable to derive format")}case h.UNSIGNED_BYTE:switch(this._descriptor.pixelFormat){case l.RGBA:return this._descriptor.internalFormat=n.RGBA8;case l.RGB:return this._descriptor.internalFormat=n.RGB8}}return this._descriptor.internalFormat=this._descriptor.pixelFormat===l.DEPTH_STENCIL?l.DEPTH24_STENCIL8:this._descriptor.pixelFormat}_configurePixelStorage(){const e=this._descriptor.context.gl,{unpackAlignment:t,flipped:r,preMultiplyAlpha:i}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,t),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i?1:0)}_texStorage(t,r,i,s,a,o){const c=this._descriptor.context.gl2;if(null==c)throw new e("Immutable textures are not supported in WebGL1");if(!(r in n))throw new e("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const l=i?B(t,s,a,o):1;if(O(t)){if(null==o)throw new e("Missing depth dimension for 3D texture upload");c.texStorage3D(t,l,r,s,a,o)}else c.texStorage2D(t,l,r,s,a);this._wasImmutablyAllocated=!0}_texImage(t,r,i,a,o,n,c){const l=this._descriptor.context.gl,_=O(t),{isImmutable:h,pixelFormat:d,dataType:p}=this._descriptor,u=this._descriptor.context.type===s.WEBGL2,m=u?l:null;if(u||!L(c))if(h){if(null!=c){const i=c;if(_){if(null==n)throw new e("Missing depth dimension for 3D texture upload");m.texSubImage3D(t,r,0,0,0,a,o,n,d,p,i)}else l.texSubImage2D(t,r,0,0,a,o,d,p,i)}}else{const s=c;if(_){if(null==n)throw new e("Missing depth dimension for 3D texture upload");m.texImage3D(t,r,i,a,o,n,0,d,p,s)}else l.texImage2D(t,r,i,a,o,0,d,p,s)}else l.texImage2D(t,0,i,d,p,c)}_compressedTexImage(t,r,i,a,o,n,c){const l=this._descriptor.context.gl;let _=null;const h=O(t),d=this._descriptor.isImmutable;if(h){if(this._descriptor.context.type!==s.WEBGL2)throw new e("3D textures are not supported in WebGL1");_=l}if(d){if(null!=c)if(h){if(null==n)throw new e("Missing depth dimension for 3D texture upload");_.compressedTexSubImage3D(t,r,0,0,0,a,o,n,i,c)}else l.compressedTexSubImage2D(t,r,0,0,a,o,i,c)}else if(h){if(null==n)throw new e("Missing depth dimension for 3D texture upload");_.compressedTexImage3D(t,r,i,a,o,n,0,c)}else l.compressedTexImage2D(t,r,i,a,o,0,c)}_forEachMipmapLevel(t,r=1/0){let{width:i,height:s,depth:a,hasMipmap:o,target:n}=this._descriptor;const c=n===_.TEXTURE_3D;if(null==i||null==s||c&&null==a)throw new e("Missing texture dimensions for mipmap calculation");for(let e=0;t(e,i,s,a),o&&(1!==i||1!==s||c&&1!==a)&&!(e>=r);++e)i=Math.max(1,i>>1),s=Math.max(1,s>>1),c&&(a=Math.max(1,a>>1))}};function S(e,t){(null!=t.width&&t.width<0||null!=t.height&&t.height<0||null!=t.depth&&t.depth<0)&&console.error("Negative dimension parameters are not allowed!");const i=e.type===s.WEBGL2;i||!t.isImmutable&&!O(t.target)||console.error("Immutable and 3D-like textures are not supported in WebGL1!"),i||null!=t.width&&r(t.width)&&null!=t.height&&r(t.height)||("number"==typeof t.wrapMode?t.wrapMode!==p.CLAMP_TO_EDGE&&console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"):t.wrapMode.s===p.CLAMP_TO_EDGE&&t.wrapMode.t===p.CLAMP_TO_EDGE||console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"),t.hasMipmap&&console.error("Mipmapping requires power-of-two textures!"))}function P(e,t){let r=t.samplingMode,i=t.samplingMode;r===d.LINEAR_MIPMAP_NEAREST||r===d.LINEAR_MIPMAP_LINEAR?(r=d.LINEAR,t.hasMipmap||(i=d.LINEAR)):r!==d.NEAREST_MIPMAP_NEAREST&&r!==d.NEAREST_MIPMAP_LINEAR||(r=d.NEAREST,t.hasMipmap||(i=d.NEAREST)),e.texParameteri(t.target,e.TEXTURE_MAG_FILTER,r),e.texParameteri(t.target,e.TEXTURE_MIN_FILTER,i)}function U(e,t){"number"==typeof t.wrapMode?(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode)):(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode.s),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode.t))}function G(e){return null!=e&&"type"in e&&"compressed"===e.type}function L(e){return null!=e&&!G(e)&&!function(e){return null!=e&&"byteLength"in e}(e)}function O(e){return e===_.TEXTURE_3D||e===_.TEXTURE_2D_ARRAY}function B(e,t,r,i=1){let s=Math.max(t,r);return e===_.TEXTURE_3D&&(s=Math.max(s,i)),Math.round(Math.log(s)/Math.LN2)+1}N.TEXTURE_UNIT_FOR_UPDATES=0;const C=new Map;export{f as G,b as T,N as a,I as b,A as c,R as d,g as e,D as g,M as u,x as v,T as w};
