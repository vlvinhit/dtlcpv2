/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import s from"../Color.js";import t from"../Graphic.js";import o from"../core/Accessor.js";import{l}from"./mathUtils.js";import{property as r}from"../core/accessorSupport/decorators/property.js";import"./ensureType.js";import"./typedArrayUtil.js";import{subclass as i}from"../core/accessorSupport/decorators/subclass.js";import a from"../symbols/PointSymbol3D.js";import n from"../symbols/SimpleFillSymbol.js";import h from"../symbols/TextSymbol.js";import p from"../symbols/TextSymbol3DLayer.js";const y=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let c=class extends o{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=y.map((e=>new n({color:[e[0],e[1],e[2],.6],outline:{color:"black",width:1}}))),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=this.getTiles(),o=new Array,r=new Set((this._labels.size,this._labels.keys()));e.forEach(((i,n)=>{const y=i.lij.toString();r.delete(y);const c=i.lij[0],m=i.geometry;if(this.enablePolygons&&!this._polygons.has(y)){const e=new t({geometry:m,symbol:this._symbols[c%this._symbols.length]});this._polygons.set(y,e),o.push(e)}if(this.enableLabels){const r=(e=>{if(null!=e.label)return e.label;let s=e.lij.toString();return null!=e.loadPriority&&(s+=` (${e.loadPriority})`),s})(i),c=n/(e.length-1),b=l(0,200,c),d=l(20,6,c)/.75,g=null!=i.loadPriority&&i.loadPriority>=e.length,u=new s([b,g?0:b,g?0:b]),_="3d"===this.view.type?()=>new a({verticalOffset:{screenLength:40/.75},callout:{type:"line",color:"white",border:{color:"black"}},symbolLayers:[new p({text:r,halo:{color:"white",size:1/.75},material:{color:u},size:d})]}):()=>new h({text:r,haloColor:"white",haloSize:1/.75,color:u,size:d}),f=this._labels.get(y);if(f){const e=_();null!=f.symbol&&JSON.stringify(e)===JSON.stringify(f.symbol)||(f.symbol=e)}else{const e=new t({geometry:m.extent.center,symbol:_()});this._labels.set(y,e),o.push(e)}}}));const i=new Array;r.forEach((e=>{const s=this._polygons.get(e);null!=s&&(i.push(s),this._polygons.delete(e));const t=this._labels.get(e);null!=t&&(i.push(t),this._labels.delete(e))})),this.view.graphics.removeMany(i),this.view.graphics.addMany(o)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};e([r({constructOnly:!0})],c.prototype,"view",void 0),e([r({readOnly:!0})],c.prototype,"updating",void 0),e([r()],c.prototype,"enabled",null),c=e([i("esri.views.support.TileTreeDebugger")],c);export{c as T};
