/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import t from"../core/Accessor.js";import{D as s,h as i,i as r}from"./typedArrayUtil.js";import{b as o}from"./shapingUtils.js";import{HandleOwnerMixin as n}from"../core/HandleOwner.js";import{IdentifiableMixin as a}from"../core/Identifiable.js";import{g as l}from"./maybe.js";import{throwIfAborted as d,isAbortError as h,throwIfAbortError as c}from"../core/promiseUtils.js";import{watch as u}from"../core/reactiveUtils.js";import{property as f}from"../core/accessorSupport/decorators/property.js";import"./ensureType.js";import{subclass as p}from"../core/accessorSupport/decorators/subclass.js";import m from"../geometry/SpatialReference.js";import{c as y,q as g,i as _,B as x,w as v,r as b}from"./aaBoundingRect.js";import D,{p as C,o as w}from"../geometry/Polygon.js";import{getJsonType as T,isPolygon as B,isPolyline as F,isExtent as S,isPoint as R,isMultipoint as I}from"../geometry/support/jsonUtils.js";import{a as M}from"./normalizeUtilsSync.js";import{h as L}from"./unitUtils.js";import{c as z,p as j}from"./projectionSupport.js";import{i as A,H as G,j as O}from"./cimAnalyzer.js";import{e as U,f as P,h as V}from"./defaults.js";import{F as k}from"./definitions.js";import{b as K}from"./enums4.js";import{o as q,q as H,r as E,t as Z,C as N,u as X,v as Y,x as Q}from"./color.js";import{V as W,B as J}from"./VertexArrayObject.js";import{U as $}from"./enums3.js";import{W as ee,D as te,c as se,a as ie}from"./AttributeStoreView.js";import{M as re}from"./MaterialKey.js";import{W as oe,c as ne,a as ae,b as le,e as de,M as he}from"./Matcher.js";import{F as ce,C as ue,A as fe}from"./ComputedAttributeStorage.js";import{y as pe,z as me,a as ye,q as ge,d as _e}from"./featureConversionUtils.js";import{F as xe}from"./FeatureSetReader.js";import{a as ve}from"./screenUtils.js";import{r as be}from"./rbush.js";import{d as De}from"./extentUtils.js";import{normalizeMapX as Ce}from"../geometry/support/normalizeUtils.js";import{q as we,d as Te}from"./quantizationUtils.js";import{O as Be}from"./OptimizedGeometry.js";import"./alignmentUtils.js";import"./vec2f32.js";import"./number2.js";import{g as Fe}from"./capabilities2.js";import{createSymbolSchema as Se}from"./createSymbolSchema.js";const Re=-1;class Ie{constructor(){this._dirties=[{vertexFrom:Re,vertexCount:Re,indexFrom:Re,indexCount:Re,allDirty:!1},{vertexFrom:Re,vertexCount:Re,indexFrom:Re,indexCount:Re,allDirty:!1},{vertexFrom:Re,vertexCount:Re,indexFrom:Re,indexCount:Re,allDirty:!1},{vertexFrom:Re,vertexCount:Re,indexFrom:Re,indexCount:Re,allDirty:!1},{vertexFrom:Re,vertexCount:Re,indexFrom:Re,indexCount:Re,allDirty:!1}]}hasDirty(){return this._dirties.some((e=>e.indexCount!==Re||e.allDirty))}markAllClean(){for(const e of this._dirties)e.indexFrom=Re,e.indexCount=Re,e.vertexFrom=Re,e.vertexCount=Re,e.allDirty=!1}markAllDirty(){for(const e of this._dirties)e.allDirty=!0}forEach(e){for(let t=0;t<this._dirties.length;++t){const{indexCount:s,indexFrom:i,vertexCount:r,vertexFrom:o,allDirty:n}=this._dirties[t],a={};let l,d=!1;(n||o!==Re&&r>0)&&(a.geometry={count:r,from:o,allDirty:n},d=!0),(n||i!==Re&&s>0)&&(l={count:s,from:i,allDirty:n},d=!0),d&&e({indices:l,vertices:a},t)}}markDirtyIndices(e,t,s){const i=this._dirties[e],r=t,o=s;if(!i.allDirty)if(i.indexCount!==Re){const e=Math.min(i.indexFrom,r),t=Math.max(i.indexFrom+i.indexCount,r+o)-e;i.indexFrom=e,i.indexCount=t}else i.indexFrom=r,i.indexCount=o}markDirtyVertices(e,t,s,i){const r=this._dirties[e],o=s,n=i;if(!r.allDirty)if(r.vertexCount!==Re){const e=Math.min(r.vertexFrom,o),t=Math.max(r.vertexFrom+r.vertexCount,o+n)-e;r.vertexFrom=e,r.vertexCount=t}else r.vertexFrom=o,r.vertexCount=n}}class Me{get largestRange(){return this._largestRange}constructor(e){this._largestRange=null,this._parent=e,this._updateLargestRange()}rangeCreated(e){(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}rangeResized(e,t){e===this._largestRange?e.count<t&&this._updateLargestRange():(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}findBestRange(e){let t=this._parent._freeHead,s=null;for(;null!==t;)t.count>=e&&(!s||t.count-e<s.count-e)&&(s=t),t=t.next;return s}findAdjacentRanges(e,t){let s=!0,i=!1,r=null,o=this._parent._freeHead;for(;s&&!i;){const n=null!==r?r.from+r.count:0,a=null!==o?o.from:this._parent._size;e>=n&&e+t<=a?(s=!1,i=!0):null!==o?(r=o,o=o.next):s=!1}return[r,o]}_updateLargestRange(){let e=null,t=this._parent._freeHead;for(;null!==t;)(!e||t.count>e.count)&&(e=t),t=t.next;this._largestRange=e}}class Le{constructor(e,t){this._allocated=0,this._size=e,this._freeHead=e>0?{from:0,count:e,prev:null,next:null}:null,this._bookKeeper=t||new Me(this),this._freeHead&&this._bookKeeper.rangeCreated(this._freeHead)}allocate(e){const t=this._bookKeeper.findBestRange(e);if(null==t)return-1;const s=t.from,i=t.count;if(t.from+=e,t.count-=e,this._bookKeeper.rangeResized(t,s,i),this._allocated+=e,0===t.count){const e=null!==t.prev?this._freeHead:t.next;Le._removeRange(t),this._freeHead=e}return s}free(e,t){const[s,i]=this._bookKeeper.findAdjacentRanges(e,t),r={from:e,count:t,prev:s??null,next:i??null};if(null!=s&&(s.next=r),null!=i&&(i.prev=r),this._bookKeeper.rangeCreated(r),this._allocated-=t,null!=i&&r.from+r.count===i.from){const e=r.from,t=r.count;Le._fuse(r,i),Le._removeRange(i),this._bookKeeper.rangeResized(r,e,t),this._bookKeeper.rangeResized(i,void 0,0)}if(null!=s&&s.from+s.count===r.from){const e=s.from,t=s.count;Le._fuse(s,r),Le._removeRange(r),this._bookKeeper.rangeResized(s,e,t),this._bookKeeper.rangeResized(r,void 0,0)}this._freeHead=null!==r.prev?this._freeHead:r}get fragmentation(){const e=this._size-this._allocated;return 0===e?0:1-this._bookKeeper.largestRange.count/e}static _removeRange(e){null!==e.prev?null!==e.next?(e.prev.next=e.next,e.next.prev=e.prev):e.prev.next=null:null!==e.next&&(e.next.prev=null)}static _fuse(e,t){e.count+=t.count,e.next=t.next,t.from+=t.count,t.count=0,null!==t.next&&(t.next.prev=e)}}const ze=["FILL","LINE","MARKER","TEXT","LABEL"];class je{constructor(e,t,s,i){this._strides=e,this._displayList=t,this._freeListsAndStorage={},this._dirtyMap=null,this._dirtyMap=s;for(const t in e){this._freeListsAndStorage[t]={vtxFreeList:i?new Le(i):null,idxFreeList:i?new Le(i):null,vertexBuffers:{},indexBuffer:i?new Uint32Array(i):null};for(const s in e[t])this._freeListsAndStorage[t].vertexBuffers[s]={data:i?q(i,e[t][s]):null,stride:e[t][s]}}}static fromTileData(e,t){const s=function(e){const t=e.getStrides(),s={};for(let e=0;e<t.length;e++)s[ze[e]]=t[e];return s}(e),i=[0,0,0,0,0],r=[0,0,0,0,0];for(const t of e.tileDisplayData.displayObjects)for(const e of t.displayRecords)i[e.geometryType]=Math.max(i[e.geometryType],e.vertexFrom+e.vertexCount),r[e.geometryType]=Math.max(r[e.geometryType],e.indexFrom+e.indexCount);const o=new je(s,e.tileDisplayData.displayList,t,void 0),n=e.tileBufferData?.geometries??[];for(let e=0;e<n.length;++e){const t=i[e],s=r[e],a=n[e],l=ze[e],d=o._storageFor(l),h=n[e].indexBuffer;d.indexBuffer=h,d.idxFreeList=new Le(h.length),d.idxFreeList.allocate(s);let c=0;for(const t in a.vertexBuffer){const s=n[e].vertexBuffer[t];d.vertexBuffers[t].data=s.data,d.vertexBuffers[t].stride=s.stride;const i=H(s.stride),r=s.data.length*i/s.stride;c||(c=r)}d.vtxFreeList=new Le(c),d.vtxFreeList.allocate(t)}return o}delete(e){const t=ze[e.geometryType];this._freeVertices(t,e.vertexFrom,e.vertexCount),this._freeIndices(t,e.indexFrom,e.indexCount),this._displayList.removeFromList(e),e.vertexFrom=void 0,e.indexFrom=void 0}setMeshData(e,t,s,i,r){const o=ze[e.geometryType];let n,a;e.meshData=null,void 0===e.vertexFrom?(a=t.vertexCount,n=this._allocateVertices(o,a)):t.vertexCount>e.vertexCount?(this._freeVertices(o,e.vertexFrom,e.vertexCount),a=t.vertexCount,n=this._allocateVertices(o,a)):t.vertexCount===e.vertexCount?(n=e.vertexFrom,a=e.vertexCount):(this._freeVertices(o,e.vertexFrom+t.vertexCount,e.vertexCount-t.vertexCount),n=e.vertexFrom,a=t.vertexCount);let l,d,h,c=!0;if(void 0===e.indexFrom?(l=r,h=t.indexCount,d=this._allocateIndices(o,h)):t.indexCount>e.indexCount?(l=this._displayList.removeFromList(e),this._freeIndices(o,e.indexFrom,e.indexCount),h=t.indexCount,d=this._allocateIndices(o,h)):t.indexCount===e.indexCount?(c=!1,d=e.indexFrom,h=e.indexCount):(l=this._displayList.removeFromList(e),this._freeIndices(o,e.indexFrom+t.indexCount,e.indexCount-t.indexCount),d=e.indexFrom,h=t.indexCount),-1!==n&&-1!==d){const r=this._storageFor(o);if(E(n,d,r.vertexBuffers,r.indexBuffer,t,s,i),e.vertexFrom=n,e.indexFrom=d,e.vertexCount=t.vertexCount,e.indexCount=t.indexCount,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const t in s)this._dirtyMap.markDirtyVertices(e.geometryType,t,e.vertexFrom,e.vertexCount)}return c&&this._displayList.addToList(e,l),!0}return-1!==n&&this._freeVertices(o,n,a),-1!==d&&this._freeIndices(o,d,h),e.setMeshDataFromBuffers(t,s,i),e.vertexFrom=void 0,e.vertexCount=0,e.indexFrom=void 0,e.indexCount=0,!1}tryAddMeshData(e,t){const s=t.vertexBuffer,i=t.indexBuffer,r=ze[e.geometryType],o=this._allocateVertices(r,e.vertexCount);if(-1===o)return this._freeVertices(r,o,e.vertexCount),!1;const n=this._allocateIndices(r,e.indexCount);if(-1===n)return this._freeVertices(r,o,e.vertexCount),this._freeIndices(r,n,e.indexCount),!1;const a=this._storageFor(r);if(E(o,n,a.vertexBuffers,a.indexBuffer,e,s,i),e.vertexFrom=o,e.indexFrom=n,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const t in s)this._dirtyMap.markDirtyVertices(e.geometryType,t,o,e.vertexCount)}return this._displayList.addToList(e),!0}_allocateVertices(e,t){const s=this._storageFor(e),i=s.vtxFreeList?.allocate(t);if(null==i||-1===i)return-1;const r=s.vtxFreeList?.fragmentation;return null==r||r>.5?-1:i}_freeVertices(e,t,s){const i=this._storageFor(e);i.vtxFreeList?.free(t,s)}_freeIndices(e,t,s){const i=this._storageFor(e);i.idxFreeList?.free(t,s)}_allocateIndices(e,t){const s=this._storageFor(e),i=s.idxFreeList?.allocate(t);if(null==i||-1===i)return-1;const r=s.idxFreeList?.fragmentation;return null==r||r>.5?-1:i}_storageFor(e){return this._freeListsAndStorage[e]}_stridesFor(e,t){return this._strides[e][t]}}class Ae{constructor(e){this.geometryMap=Z((()=>({indexBuffer:J.createIndex(e,$.STATIC_DRAW),vao:null})),((t,s)=>({vertexBuffer:J.createVertex(e,N[s])})))}dispose(){for(let e=0;e<5;e++){const t=this.geometryMap[e];if(t){t.data.vao?.disposeVAOOnly(),t.data.indexBuffer?.dispose();for(const e in t.buffers)t.buffers[e]?.data.vertexBuffer.dispose()}}}get(e){const t=this.geometryMap[e];return{getVAO(e,s,i){if(!t.data.vao){const r={};for(const e in t.buffers)r[e]=t.buffers[e].data.vertexBuffer;t.data.vao=new W(e,i,s,r,t.data.indexBuffer)}return t.data.vao}}}has(e){return null!=this.geometryMap[e]}upload(e,t){t.forEach(((t,s)=>{this._upload(t,s,e)}))}_upload(e,t,s){if(e.indices&&(e.indices.allDirty?this._uploadIndices(s,t):null!=e.indices.from&&null!=e.indices.count&&this._uploadIndices(s,t,e.indices.from,e.indices.count)),e.vertices){const i=e.vertices;for(const e in i){const r=i[e];r.allDirty?this._uploadVertices(s,t,e):null!=r.from&&null!=r.count&&this._uploadVertices(s,t,e,r.from,r.count)}}}_uploadVertices(e,t,s,i,r){const o=this.geometryMap[t];if(!o)return;const n=e.geometries[t].vertexBuffer[s];if(!n)return;const{data:a,stride:l}=n;if(o.buffers[s]&&a.length>0){const e=l/a.BYTES_PER_ELEMENT;null!=i&&null!=r?o.buffers[s].data.vertexBuffer.setSubData(a,i*e,i*e,(i+r)*e):o.buffers[s].data.vertexBuffer.setData(a)}}_uploadIndices(e,t,s,i){const r=this.geometryMap[t];if(!r)return;const o=e.geometries[t].indexBuffer;r.data.indexBuffer&&o.length>0&&(null!=s&&null!=i?r.data.indexBuffer.setSubData(o,s,s,s+i):r.data.indexBuffer.setData(o))}}class Ge extends ee{constructor(){super(...arguments),this._data=null,this._displayList=null,this._lastCommitTime=0,this._hasData=!1,this._invalidated=!1,this._wglBuffers=null,this._dirtyMap=new Ie}destroy(){super.destroy(),this.clear()}get hasData(){return!!this._hasData}get displayObjects(){return this._displayObjects??[]}getGeometry(e){return this._wglBuffers&&this._wglBuffers.has(e)?this._wglBuffers.get(e):null}getDisplayList(){return this._displayList}patch(e){if(!0===e.clear)return this.clear(),void(this._hasData=!1);const t=e.addOrUpdate,s=e.remove;!this._data&&t&&t.tileDisplayData?.displayObjects.length?(t.tileDisplayData.computeDisplayList(),this._dirtyMap=new Ie,this._dispRecStore=je.fromTileData(t,this._dirtyMap),this._data=t,this._dirtyMap.markAllDirty(),this._hasData=!0,e.end&&this.ready()):this._data&&(t&&t.tileDisplayData?.displayObjects.length||s.length)?this._doPatchData(e):e.end&&this.ready(),e.end&&!this._data&&this.clear(),this.requestRender(),this.emit("change")}commit(e){e.time&&e.time===this._lastCommitTime||(this._lastCommitTime=e.time,this.visible&&this._data&&(this._wglBuffers||(this._wglBuffers=new Ae(e.context)),(this._dirtyMap.hasDirty()||this._invalidated)&&(this._invalidated=!1,this._wglBuffers.upload(this._data.tileBufferData,this._dirtyMap),this._displayList=this._data.tileDisplayData.displayList.clone(),this._displayObjects=this._data.tileDisplayData.displayObjects.slice(),this._dirtyMap.markAllClean())))}clear(){this._data=null,this._displayList=null,this._dispRecStore=null,this._wglBuffers&&(this._wglBuffers.dispose(),this._wglBuffers=null)}_doPatchData(e){this._invalidated=!0,this._patchData(e)||(this._dirtyMap.markAllDirty(),this._data.reshuffle(),this._dispRecStore=je.fromTileData(this._data,this._dirtyMap)),this.requestRender()}_patchData(e){let t=!0;const s=e.addOrUpdate&&e.addOrUpdate.tileDisplayData&&e.addOrUpdate.tileDisplayData.displayObjects||[],i=(e.remove||[]).slice();for(const e of s)null!=e.insertAfter&&i.push(e.id);let r;i.length>0&&(r=new Set(i));const o=this._data.tileDisplayData;for(const e of i){const t=o.displayObjectRegistry.get(e);if(t){o.displayList.removeFromList(t.displayRecords);for(const e of t.displayRecords)this._dispRecStore.delete(e);o.displayObjectRegistry.delete(e)}}r?.size&&(o.displayObjects=o.displayObjects.filter((e=>!r.has(e.id))));for(const i of s){let s,r=o.displayObjectRegistry.get(i.id);if(r){const e=r.displayRecords;r.set(i),r.displayRecords=e;const t=r.displayRecords.length;for(let e=0;e<t;++e){const t=r.displayRecords[e],s=i.displayRecords[e];(e>=i.displayRecords.length||t.geometryType!==s.geometryType||t.symbolLevel!==s.symbolLevel||t.zOrder!==s.zOrder||t.materialKey!==s.materialKey)&&(this._dispRecStore.delete(r.displayRecords[e]),e<i.displayRecords.length&&(r.displayRecords[e]=void 0))}r.displayRecords.length=i.displayRecords.length}else{let e;r=i.copy(),r.displayRecords=[],o.displayObjectRegistry.set(i.id,r);const t=o.displayObjects;if(null!=r.insertAfter)if(s={},r.insertAfter>=0){const s=o.displayObjectRegistry.get(r.insertAfter);s?(e=t.indexOf(s)+1,e<t.length?t.splice(e,0,r):(t.push(r),e=t.length)):(t.push(r),e=t.length)}else t.unshift(r),e=0;else t.push(r),e=t.length;if(s){const r=i.displayRecords.length>0?1:0;let n=0;for(let i=e-1;i>=0&&n<r;--i)for(let e=t[i].displayRecords.length-1;e>=0&&n<r;--e){const r=t[i].displayRecords[e],a=o.displayList.getDPInfoType();s[a]||(s[a]=r,++n)}}}const n=i.displayRecords.length;for(let a=0;a<n;++a){const n=i.displayRecords[a];let l=r.displayRecords[a];l?(l.meshData=n.meshData,l.materialKey=n.materialKey):(l=n.copy(),l.vertexFrom=void 0,l.indexFrom=void 0,r.displayRecords[a]=l);const d=n.geometryType,h=o.displayList.getDPInfoType(),c=e.addOrUpdate.tileBufferData.geometries[d],u=c.vertexBuffer,f=c.indexBuffer;let p;s&&(p=s[h]?o.displayList.splitAfter(s[h]):-1),t=this._dispRecStore.setMeshData(l,n,u,f,p)&&t,s&&null!=l.indexFrom&&null!=l.indexFrom&&(s[h]=l)}}return t}}class Oe{constructor(){this._byGeometryType=null}get satisfied(){return!this._byGeometryType}reset(){this._byGeometryType=null}verticesFor(e){return this._byGeometryType?this._byGeometryType[e].vertices:0}indicesFor(e){return this._byGeometryType?this._byGeometryType[e].indices:0}needMore(e,t,s){if(!t&&!s)return;this._byGeometryType||(this._byGeometryType=[{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0}]);const i=this._byGeometryType[e];i.vertices+=t,i.indices+=s}}class Ue{constructor(){this.geometries=[{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}}]}clone(){const e=new Ue;for(let t=0;t<this.geometries.length;t++){const s=this.geometries[t],i=e.geometries[t];i.indexBuffer=s.indexBuffer.slice(),i.vertexBuffer={};for(const e in s.vertexBuffer){const{data:t,stride:r}=s.vertexBuffer[e];i.vertexBuffer[e]={data:t.slice(),stride:r}}}return e}static deserialize(e){const t=new Ue;for(let s=0;s<5;++s){t.geometries[s].indexBuffer=new Uint32Array(e.geometries[s].indexBuffer),t.geometries[s].vertexBuffer={};for(const i in e.geometries[s].vertexBuffer)t.geometries[s].vertexBuffer[i]={data:X(e.geometries[s].vertexBuffer[i].data,e.geometries[s].vertexBuffer[i].stride),stride:e.geometries[s].vertexBuffer[i].stride}}return t}serialize(){const e={geometries:[{indexBuffer:this.geometries[0].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[1].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[2].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[3].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[4].indexBuffer.buffer,vertexBuffer:{}}]};for(let t=0;t<5;++t)for(const s in this.geometries[t].vertexBuffer)e.geometries[t].vertexBuffer[s]={data:this.geometries[t].vertexBuffer[s].data.buffer,stride:this.geometries[t].vertexBuffer[s].stride};return e}getBuffers(){const e=[];for(let t=0;t<5;++t){e.push(this.geometries[t].indexBuffer.buffer);for(const s in this.geometries[t].vertexBuffer)e.push(this.geometries[t].vertexBuffer[s].data.buffer)}return e}}function Pe(e,t,s,...i){t<e.length?e.splice(t,s,...i):e.push(...i)}class Ve{constructor(){this.symbolLevels=[]}replay(e,t,s){for(const i of this.symbolLevels)for(const r of i.zLevels){const i=r.geometryDPInfo.unified;if(i)for(const r of i){const{geometryType:i,materialKey:o,indexFrom:n,indexCount:a}=r,l=re.load(o).symbologyType,d=e.painter.getBrush(i,l),h={geometryType:i,materialKey:o,indexFrom:n,indexCount:a,target:t.getGeometry(i)};d.prepareState(e),d.drawGeometry(e,t,h,s)}}}get empty(){return!this.symbolLevels||0===this.symbolLevels.length}clear(){this.symbolLevels.length=0}addToList(e,t){if(Array.isArray(e))for(const s of e)this._addToList(s,t);else this._addToList(e,t)}removeFromList(e){Array.isArray(e)||(e=[e]);let t=null;for(const s of e)t=this._removeFromList(s);return t}clone(){const e=new Ve;for(const t of this.symbolLevels)e.symbolLevels.push(t.clone());return e}splitAfter(e){const t=this._getDisplayList(e.symbolLevel,e.zOrder),s=t.length,i=e.indexFrom+e.indexCount;for(let r=0;r<s;++r){const s=t[r];if(s.geometryType===e.geometryType&&i>s.indexFrom&&i<=s.indexFrom+s.indexCount){if(i<s.indexFrom+s.indexCount){const e=new ke;e.geometryType=s.geometryType,e.materialKey=s.materialKey,e.indexFrom=i,e.indexCount=s.indexFrom+s.indexCount-i,t.splice(r+1,0,e),s.indexCount=i-s.indexFrom}return r}}}_addToList(e,t){const s=e.symbolLevel,i=e.zOrder,r=this._getDisplayList(s,i),o=null!=t?t:r.length-1,n=o>=0&&o<r.length?r[o]:null;if(null!==n&&n.materialKey===e.materialKey&&n.indexFrom+n.indexCount===e.indexFrom&&n.geometryType===e.geometryType)n.indexCount+=e.indexCount;else{const t=new ke;t.indexFrom=e.indexFrom,t.indexCount=e.indexCount,t.materialKey=e.materialKey,t.geometryType=e.geometryType,Pe(r,o+1,0,t)}}_removeFromList(e){const t=e.symbolLevel,s=e.zOrder,i=this._getDisplayList(t,s),r=i.length;let o;for(let t=0;t<r;++t){const s=i[t];if(e.indexFrom+e.indexCount>s.indexFrom&&e.indexFrom<s.indexFrom+s.indexCount&&s.geometryType===e.geometryType){o=t;break}}if(void 0!==o){const t=i[o];if(e.indexFrom===t.indexFrom)return t.indexCount-=e.indexCount,t.indexFrom+=e.indexCount,0===t.indexCount&&Pe(i,o,1),o-1;if(e.indexFrom+e.indexCount===t.indexFrom+t.indexCount)return t.indexCount-=e.indexCount,0===t.indexCount?(Pe(i,o,1),o-1):o;{const s=t.indexFrom,r=e.indexFrom-t.indexFrom,n=e.indexCount,a=t.indexFrom+t.indexCount-(e.indexFrom+e.indexCount);t.indexCount=r;const l=new ke;return l.geometryType=t.geometryType,l.materialKey=t.materialKey,l.indexFrom=s+r+n,l.indexCount=a,Pe(i,o+1,0,l),o}}return null}_getDisplayList(e,t){let s;const i=this.symbolLevels.length;for(let t=0;t<i;t++)if(this.symbolLevels[t].symbolLevel===e){s=this.symbolLevels[t];break}let r;s||(s=new He,s.symbolLevel=e,this.symbolLevels.push(s));const o=s.zLevels.length;for(let e=0;e<o;e++)if(s.zLevels[e].zLevel===t){r=s.zLevels[e];break}return r||(r=new qe,r.geometryDPInfo=new Ke,r.zLevel=t,s.zLevels.push(r)),r.geometryDPInfo.unified||(r.geometryDPInfo.unified=[]),r.geometryDPInfo.unified}getDPInfoType(){return"unified"}}class ke{constructor(){this.materialKey=null,this.indexFrom=0,this.indexCount=0}clone(){const e=new ke;return e.geometryType=this.geometryType,e.materialKey=this.materialKey,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e}}class Ke{constructor(){this.fill=null,this.line=null,this.marker=null,this.text=null,this.label=null,this.unified=null}clone(){const e=new Ke;return e.fill=this.fill&&this.fill.map((e=>e.clone())),e.line=this.line&&this.line.map((e=>e.clone())),e.marker=this.marker&&this.marker.map((e=>e.clone())),e.text=this.text&&this.text.map((e=>e.clone())),e.label=this.label&&this.label.map((e=>e.clone())),e.unified=this.unified&&this.unified.map((e=>e.clone())),e}}class qe{constructor(){this.geometryDPInfo=new Ke}clone(){const e=new qe;return e.zLevel=this.zLevel,e.geometryDPInfo=this.geometryDPInfo.clone(),e}}class He{constructor(){this.zLevels=[]}clone(){const e=new He;e.symbolLevel=this.symbolLevel;for(const t of this.zLevels)e.zLevels.push(t.clone());return e}}class Ee{constructor(){this.vertexData=new Map,this.vertexCount=0,this.indexData=[]}clear(){this.vertexData.clear(),this.vertexCount=0,this.indexData=[]}update(e,t,s){for(const t in e)this.vertexData.set(t,e[t]);for(const t in this.vertexData)null===e[t]&&this.vertexData.delete(t);this.vertexCount=t,this.indexData=s}}class Ze{constructor(e,t,s,i=0,r=0){this.id=e,this.geometryType=t,this.materialKey=s,this.minZoom=i,this.maxZoom=r,this.meshData=null,this.symbolLevel=0,this.zOrder=0,this.vertexFrom=0,this.vertexCount=0,this.indexFrom=0,this.indexCount=0,this._sortKey=null}get sortKey(){return null==this._sortKey&&this._computeSortKey(),this._sortKey}clone(){return this.copy()}copy(){const e=new Ze(this.id,this.geometryType,this.materialKey);return e.vertexFrom=this.vertexFrom,e.vertexCount=this.vertexCount,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e.zOrder=this.zOrder,e.symbolLevel=this.symbolLevel,e.meshData=this.meshData,e.minZoom=this.minZoom,e.maxZoom=this.maxZoom,e}setMeshDataFromBuffers(e,t,s){const i=new Ee;for(const s in t){const r=t[s].stride,o=t[s].data;if(!o)continue;const n=[],a=H(r);for(let t=0;t<r*e.vertexCount/a;++t)n[t]=o[t+r*e.vertexFrom/a];i.vertexData.set(s,n)}i.indexData.length=0;for(let t=0;t<e.indexCount;++t)i.indexData[t]=s[t+e.indexFrom]-e.vertexFrom;i.vertexCount=e.vertexCount,this.meshData=i}readMeshDataFromBuffers(e,t){this.meshData?this.meshData.clear():this.meshData=new Ee;for(const t in e){const s=e[t].stride,i=e[t].data,r=[],o=H(s);for(let e=0;e<s*this.vertexCount/o;++e)r[e]=i[e+s*this.vertexFrom/o];this.meshData.vertexData.set(t,r)}this.meshData.indexData.length=0;for(let e=0;e<this.indexCount;++e)this.meshData.indexData[e]=t[e+this.indexFrom]-this.vertexFrom;this.meshData.vertexCount=this.vertexCount}writeMeshDataToBuffers(e,t,s,i){if(this.meshData){for(const s in t){const i=t[s].stride,r=this.meshData.vertexData.get(s),o=t[s].data,n=H(i);for(let t=0;t<i*this.meshData.vertexCount/n;++t)o[t+i*e/n]=r[t]}for(let t=0;t<this.meshData.indexData.length;++t)i[t+s]=this.meshData.indexData[t]+e;this.vertexFrom=e,this.vertexCount=this.meshData.vertexCount,this.indexFrom=s,this.indexCount=this.meshData.indexData.length}}static writeAllMeshDataToBuffers(e,t,s){let i=0,r=0;for(const o of e)o.writeMeshDataToBuffers(i,t,r,s),i+=o.vertexCount,r+=o.indexCount}_computeSortKey(){this._sortKey=(31&this.symbolLevel)<<12|(127&this.zOrder)<<4|7&this.geometryType}serialize(e){return e.push(this.geometryType),e.push(this.materialKey),e.push(this.vertexFrom),e.push(this.vertexCount),e.push(this.indexFrom),e.push(this.indexCount),e.push(this.minZoom),e.push(this.maxZoom),e}static deserialize(e,t){const s=e.readInt32(),i=e.readInt32(),r=new Ze(t.id,s,i);return r.vertexFrom=e.readInt32(),r.vertexCount=e.readInt32(),r.indexFrom=e.readInt32(),r.indexCount=e.readInt32(),r.minZoom=e.readInt32(),r.maxZoom=e.readInt32(),r}}function Ne(e,t){if(null!==t){e.push(t.length);for(const s of t)s.serialize(e);return e}e.push(0)}class Xe{constructor(e){this.insertAfter=null,this.id=e,this.displayRecords=[]}copy(){const e=new Xe(this.id);return e.set(this),e}clone(){const e=new Xe(this.id);return e.displayRecords=this.displayRecords.map((e=>e.clone())),e.insertAfter=this.insertAfter,e}set(e){this.id=e.id,this.displayRecords=e.displayRecords,this.insertAfter=e.insertAfter}serialize(e){return e.push(this.id),Ne(e,this.displayRecords),e}static deserialize(e){const t=e.readInt32(),s=new Xe(t),i={id:t};return s.displayRecords=function(e,t,s){const i=e.readInt32(),r=new Array(i);for(let i=0;i<r.length;i++)r[i]=t.deserialize(e,s);return r}(e,Ze,i)??[],s}}class Ye{constructor(){this.displayObjects=[],this._displayList=null}get displayObjectRegistry(){if(!this._displayObjectRegistry){this._displayObjectRegistry=new Map;for(const e of this.displayObjects)this._displayObjectRegistry.set(e.id,e)}return this._displayObjectRegistry}get displayList(){return this._displayList}computeDisplayList(){this._displayList=new Ve;for(const e of this.displayObjects)for(const t of e.displayRecords)this._displayList.addToList(t)}clone(){const e=new Ye;return this.displayObjects&&(e.displayObjects=this.displayObjects.map((e=>e.clone()))),e}serialize(e){return Ne(e,this.displayObjects),e}_deserializeObjects(e){const t=e.readInt32(),s=new Array(t),i=new Map;for(let t=0;t<s.length;++t){const r=Xe.deserialize(e);s[t]=r,i.set(r.id,r)}this.displayObjects=s,this._displayList=null,this._displayObjectRegistry=i}static deserialize(e){const t=new Ye;return t._deserializeObjects(e),t}}class Qe{constructor(e,t){this.data=e,this.stride=t}static decode(e){const t=X(e.data,e.stride),s=e.stride;return new Qe(t,s)}static fromVertexVector(e){const t=X(e.data.buffer(),e.stride),s=e.stride;return new Qe(t,s)}}class We{constructor(e,t,s){this.geometryType=e,this.indexBuffer=new Uint32Array(t),this.namedBuffers=s}static decode(e){const t=e.geometryType,s=e.indexBuffer,i={};for(const t in e.namedBuffers)i[t]=Qe.decode(e.namedBuffers[t]);return new We(t,s,i)}static fromVertexData(e,t){const s=e.indices,i=X(e.vertices,e.stride),r=e.stride,o={geometry:new Qe(i,r)};return new We(t,s,o)}static fromVertexVectors(e){const t=e.geometryType,s=e.indexVector.buffer(),i={};let r;for(r in e.namedVectors)i[r]=Qe.fromVertexVector(e.namedVectors[r]);return new We(t,s,i)}}class Je{get vertexCount(){const e=this.stride/4,t=this.data.length/e;return t!==(0|t)&&console.debug("Corrupted stride"),t}constructor(e,t){this.data=e,this.stride=t}transfer(e,t){const s=this.data.buffer();e.vertexCount=this.vertexCount,e.data=s,e.stride=this.stride,t.push(s)}}class $e{constructor(e,t,s){this.geometryType=e,this.indexVector=new oe(Uint32Array,6*t),this.namedVectors={};const i=Y(e,s);for(const e in i){const s=i[e];let r;switch(s%4){case 0:case 2:r=new oe(Uint32Array,s*t);break;case 1:case 3:r=new oe(Uint8Array,s*t)}this.namedVectors[e]=new Je(r,s)}}get(e){return this.namedVectors[e].data}getVector(e){return this.namedVectors[e]}transfer(e,t){const s=this.indexVector.buffer(),i={};let r;for(r in t.push(s),this.namedVectors){const e=this.namedVectors[r];i[r]={},e.transfer(i[r],t)}e.geometryType=this.geometryType,e.indexBuffer=s,e.namedBuffers=i,this.destroy()}intoBuffers(){const e=We.fromVertexVectors(this);return this.destroy(),e}destroy(){this.indexVector=null,this.namedVectors=null}}const et=new Oe,tt=new Oe;function st(e,t){const s={};for(const i in e){const r={data:q(t,e[i]),stride:e[i]};s[i]=r}return s}class it{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){if(et.reset(),!this.tileDisplayData)return;const e=function(e){const t=[[],[],[],[],[]],s=e;for(const e of s)for(const s of e.displayRecords)t[s.geometryType].push(s);return t}(this.tileDisplayData.displayObjects);for(const t of e)for(const e of t)e&&et.needMore(e.geometryType,e.meshData?e.meshData.vertexCount:e.vertexCount,e.meshData?e.meshData.indexData.length:e.indexCount);const t=e.length,i=new Ue;for(let e=0;e<t;++e){i.geometries[e].indexBuffer=new Uint32Array(Math.round(s*et.indicesFor(e)));const t=[],r=this.tileBufferData?.geometries[e].vertexBuffer;if(!r)continue;for(const e in r)t.push(r[e].stride);const o=it._computeVertexAlignment(t),n=Math.round(s*et.verticesFor(e)),a=it._align(n,o);for(const t in r){const s=r[t].stride;i.geometries[e].vertexBuffer[t]={stride:s,data:q(a,s)}}}tt.reset(),this.tileDisplayData.displayList?.clear();for(let s=0;s<t;++s){const t=e[s];for(const e of t){if(e.meshData)e.writeMeshDataToBuffers(tt.verticesFor(s),i.geometries[s].vertexBuffer,tt.indicesFor(s),i.geometries[s].indexBuffer),e.meshData=null;else{const t=this.tileBufferData?.geometries[s];if(t){const r=t.vertexBuffer,o=t.indexBuffer,n=i.geometries[s].vertexBuffer,a=i.geometries[s].indexBuffer,l=tt.verticesFor(s),d=tt.indicesFor(s);E(l,d,n,a,e,r,o),e.vertexFrom=l,e.indexFrom=d}}tt.needMore(s,e.vertexCount,e.indexCount)}}const{displayList:r,displayObjects:o}=this.tileDisplayData;if(r)for(const e of o)r.addToList(e.displayRecords);this.tileBufferData=i}getStrides(){const e=[],t=this.tileBufferData?.geometries;if(!t)return e;for(let s=0;s<t.length;++s){const i=t[s];e[s]={};for(const t in i.vertexBuffer)e[s][t]=i.vertexBuffer[t].stride}return e}clone(){const e=new it;return e.tileBufferData=this.tileBufferData?.clone()??null,e.tileDisplayData=this.tileDisplayData?.clone()??null,e}_guessSize(){const e=this.tileDisplayData?.displayObjects??[],t=Math.min(e.length,4);let s=0;for(let i=0;i<t;i++)s=Math.max(s,e[i].displayRecords.length);return 2*(12*e.length+e.length*s*40)}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),s=this.tileDisplayData.serialize(new oe(Int32Array,this._guessSize())).buffer();return t.push(s),{result:{displayData:s,bufferData:e},transferList:t}}static fromVertexData(e,t){const s={},i=new Map;for(const e of t)i.set(e.id,e);return Q((t=>{const r=e.data[t];if(null!=r){const e=te.from(r.records).getCursor();for(;e.next();){const s=e.id,r=e.materialKey,o=e.indexFrom,n=e.indexCount,a=e.vertexFrom,l=e.vertexCount,d=i.get(s),h=new Ze(s,t,r);h.indexFrom=o,h.indexCount=n,h.vertexFrom=a,h.vertexCount=l,d.displayRecords.push(h)}s[t]=We.fromVertexData(r,t)}else s[t]=new $e(t,0,K.DEFAULT).intoBuffers()})),it.fromMeshData({displayObjects:t,vertexBuffersMap:s})}static fromMeshData(e){const t=new it,s=new Ye,i=new Ue;s.displayObjects=e.displayObjects;for(const t in e.vertexBuffersMap){const s=t,r=e.vertexBuffersMap[s];i.geometries[s].indexBuffer=r.indexBuffer,i.geometries[s].vertexBuffer=r.namedBuffers}return t.tileDisplayData=s,t.tileBufferData=i,t}static bind(e,t){const s=new it;return s.tileDisplayData=e,s.tileBufferData=t,s}static create(e,t){const s=new it;s.tileDisplayData=new Ye,s.tileDisplayData.displayObjects=e;const i=[0,0,0,0,0],r=[0,0,0,0,0],o=[[],[],[],[],[]];for(const t of e)for(const e of t.displayRecords)o[e.geometryType].push(e),i[e.geometryType]+=e.meshData.vertexCount,r[e.geometryType]+=e.meshData.indexData.length;const n=new Ue,a=function(e){return[e.fill||{},e.line||{},e.icon||{},e.text||{},e.label||{}]}(t);for(let e=0;e<5;e++){const t=new Uint32Array(r[e]),s=st(a[e],i[e]);Ze.writeAllMeshDataToBuffers(o[e],s,t),n.geometries[e]={indexBuffer:t,vertexBuffer:s}}return s.tileBufferData=n,s}static _align(e,t){const s=e%t;return 0===s?e:e+(t-s)}static _computeVertexAlignment(e){let t=!1,s=!1;for(const i of e)i%4==2?t=!0:i%4!=0&&(s=!0);return s?4:t?2:1}}const rt=512;function ot(e){switch(e.geometry.type){case"point":case"multipoint":return 0;case"polyline":return 1;case"polygon":case"extent":return 2}return 0}class nt extends ce{static from(e,t,s){const i=xe.createInstance(),r=[],o=e.filter((e=>!!e.geometry));for(const e of o){const s=T(e.geometry);pe(r,[e],s,!1,!1,t)}return new nt(i,r,s)}constructor(e,t,s){super(e,t,null),this._transform=s}get geometryType(){const e=this._current;return e?e.geometryType:null}get insertAfter(){return this._current.insertAfter}readGraphic(){return this._current}getCursor(){return this.copy()}copy(){const e=new nt(this.instance,this._features,this._transform);return this.copyInto(e),e}}const at=new Be,lt=new Be,dt="esriGeometryPolyline";function ht(e){e.coords.length=0,e.lengths.length=0}class ct{constructor(){this.bounds=y(),this.graphic=null}static acquire(e=null,t,s,i,r){let o;return 0===ct._pool.length?o=new ct:(o=ct._pool.pop(),this._set.delete(o)),o.acquire(e,t,s,i,r),o}static release(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))}static getCentroidQuantized(e,t){if(B(e.geometry)){const s=e.symbol;if(null==s)return null;if(s?.layers.length>0&&s.layers.some((e=>"text"===e.type||"marker"===e.type))){const s=C(e.geometry);return null!==s?we(t,{},{x:s[0],y:s[1]},!1,!1):null}}return null}acquire(e=null,t,s,i,r){e&&this.set(e,t,s,i,r)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(e,t,s,i,r){this.graphic=e,this.geometry=s,this.symbolResource=t,this.bounds=i,r&&(this.size=r)}getGeometryQuantized(e,t,s,i){const r=this.geometry,o=T(r);if(null==o)return null;switch(o){case"esriGeometryPolygon":{const t=r,{rings:s}=t;if(!s||0===s.length)return null;let i;if(i=1===s.length&&2===s[0].length?Te(e,{paths:[[s[0][0],s[0][1]]]}):Te(e,this.geometry),!i){const t={x:s[0][0][0],y:s[0][0][1]};if(i=Te(e,t),i){const{x:e,y:t}=i;return{rings:[[[e-1,t],[1,-1],[1,1],[-1,1],[-1,-1]]]}}}return i}case"esriGeometryPolyline":{const t=r;ht(at),ht(lt);const s=t.hasZ??!1,i=t.hasM??!1;return me(at,t),ye(lt,at,s,i,dt,e.scale[0]),ge(at,lt,s,i,dt,e),_e(at,t.hasZ??!1,t.hasM??!1)}case"esriGeometryMultipoint":{const o=r,n=.5*i*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]),a=L(s);let l=o.points;if(a){const[e,s]=a.valid,i=s-e;l=l.filter((r=>{if(r[0]+n>s||r[0]-n<e){const e=[...r];return r[0]+n>s?e[0]-=i:e[0]+=i,g(t,r,n)||g(t,e,n)}return g(t,r,n)}))}return 0===l.length?{points:l}:Te(e,{points:l})}}return Te(e,this.geometry)}}ct._pool=[],ct._set=new Set;const ut={minX:0,minY:0,maxX:0,maxY:0},ft=y(),pt=1e-5;function mt(e,t,s,i,r){return ut.minX=t,ut.minY=s,ut.maxX=i,ut.maxY=r,e.search(ut)}function yt(e){return{minX:e.bounds[0],minY:e.bounds[1],maxX:e.bounds[2],maxY:e.bounds[3]}}class gt{constructor(e,t,s,i,r,o,n){this._graphics=i,this._onAdd=r,this._onRemove=o,this._hashToCIM=n,this._index=be(9,yt),this._itemByGraphic=new Map,this._inflatedSizeHelper=new A,this._tileInfoView=e,this._uidFieldName=s;const a=e.getClosestInfoForScale(t);a&&(this._resolution=this._tileInfoView.getTileResolution(a.level))}setResourceManager(e){this._cimResourceManager=e,this._hittestDrawHelper=new G(e)}hitTest(e,t,s,i,r){e=Ce(e,this._tileInfoView.spatialReference);const o=.5*i*window.devicePixelRatio*s;ft[0]=e-o,ft[1]=t-o,ft[2]=e+o,ft[3]=t+o;const n=.5*i*(s+50),a=mt(this._index,e-n,t-n,e+n,t+n);if(!a||0===a.length)return[];const l=[],d=y(),h=y();for(const e of a){const{geometry:t,symbolResource:s}=e;this._getSymbolBounds(d,s,t,h,r),h[3]=h[2]=h[1]=h[0]=0,_(d,ft)&&e.graphic?.visible&&l.push(e)}if(0===l.length)return[];const c=this._hittestDrawHelper,u=[];for(const e of l){const{geometry:t,symbolResource:s}=e,{hash:o,textInfo:n}=s,a=this._hashToCIM.get(o);a&&c.hitTest(ft,a.symbol,t,n,r,i)&&u.push(e)}return u.sort(_t),u.map((e=>e.graphic))}getGraphicsData(e,t,s){const i=this._searchForItems(t);if(0===i.length||0===s.length)return[];i.sort(((e,t)=>e.zorder-t.zorder)),i[0].insertAfter=-1;for(let e=1;e<i.length;e++)i[e].insertAfter=i[e-1].graphic.uid;i.sort(((e,t)=>e.graphic.uid-t.graphic.uid)),s.sort(((e,t)=>e.uid-t.uid));let r,o=0,n=0;const a=t.resolution,l=[],d={originPosition:"upperLeft",scale:[a,a],translate:[t.bounds[0],t.bounds[3]]};for(const h of s){for(n=-2;o<i.length;)if(r=i[o],o++,h.uid===r.graphic.uid){n=r.insertAfter;break}if(!r?.geometry||-2===n)continue;const s=r.getGeometryQuantized(d,t.bounds,this._tileInfoView.spatialReference,a),c={...r.graphic.attributes};c[this._uidFieldName]=h.uid,null==r.groupId&&(r.groupId=e.createTemplateGroup(r.symbol,null)),l.push({centroid:ct.getCentroidQuantized(r,d),geometry:s,attributes:c,symbol:r.symbol,groupId:r.groupId,insertAfter:n,zorder:r.zorder})}return l.sort(((e,t)=>e.zorder-t.zorder)),l}queryTileData(e,t){if(0===this._graphics.length)return[];const{bounds:s,resolution:i}=t,r=this._searchForItems(t),o=[];return 0===r.length||this._createTileGraphics(o,e,r,{originPosition:"upperLeft",scale:[i,i],translate:[s[0],s[3]]},t),o}has(e){return this._itemByGraphic.has(e)}getBounds(e){const t=this._itemByGraphic.get(e);return t?t.bounds:null}getAllBounds(){return Array.from(this._itemByGraphic.values()).filter((e=>e.graphic.visible)).map((e=>e.bounds))}addOrModify(e,t,s){if(!e||null==t)return;this.has(e)&&this.remove(e),this._onAdd(e);const i=[0,0,0,0],r=this._getSymbolBounds(null,t,s,i,0),o=ct.acquire(e,t,s,null!=r?r:null,i);return this._itemByGraphic.set(e,o),s&&this._index.insert(o),o.bounds}remove(e){if(!this._itemByGraphic.has(e))return;this._onRemove(e);const t=this._itemByGraphic.get(e);t?.bounds&&this._index.remove(t),this._itemByGraphic.delete(e)}updateZ(){const e=this._graphics.items;let t,s;for(let i=0;i<e.length;i++)s=e[i],t=this._itemByGraphic.get(s),t&&(t.zorder=i)}update(e,t,s){const i=this._itemByGraphic.get(e);i.groupId=null;const r=x(i.bounds);this._index.remove(i);const o=this._getSymbolBounds(i.bounds,t,s,i.size,0);return null!=o&&i.set(e,t,s,o,i.size),s&&this._index.insert(i),{oldBounds:r,newBounds:i.bounds}}updateLevel(e){if(this._resolution===e)return;this._resolution=e,this._index.clear();const t=this._itemByGraphic,s=[];for(const[e,i]of t){const e=this._getSymbolBounds(i.bounds,i.symbolResource,i.geometry,i.size,0);i.geometry&&null!=e&&(i.bounds=e,s.push(i))}this._index.load(s)}clear(){this._itemByGraphic.clear(),this._index.clear()}_createTileGraphics(e,t,s,i,r){const o=this._uidFieldName,n=this._tileInfoView.spatialReference,{bounds:a,resolution:l}=r;let d,h,c,u;s.sort(((e,t)=>e.zorder-t.zorder));for(let r=0;r<s.length;r++){c=s[r],d=c.graphic,h=c.getGeometryQuantized(i,a,n,l),u=0===r?-1:s[r-1].graphic.uid;const f={...c.graphic.attributes};f[o]=d.uid,null==c.groupId&&(c.groupId=t.createTemplateGroup(c.symbol,null)),e.push({centroid:ct.getCentroidQuantized(c,i),geometry:h,attributes:f,symbol:c.symbol,groupId:c.groupId,insertAfter:u,zorder:c.zorder})}}_searchForItems(e){const t=this._tileInfoView.spatialReference,s=e.bounds,i=L(t);if(i&&t.isWrappable){const[t,r]=i.valid,o=Math.abs(s[2]-r)<pt,n=Math.abs(s[0]-t)<pt;if((!o||!n)&&(o||n)){const i=e.resolution;let n;n=y(o?[t,s[1],t+50*i,s[3]]:[r-50*i,s[1],r,s[3]]);const a=mt(this._index,s[0],s[1],s[2],s[3]),l=mt(this._index,n[0],n[1],n[2],n[3]);return[...new Set([...a,...l])]}}return mt(this._index,s[0],s[1],s[2],s[3])}_getSymbolBounds(e,t,s,i,r){if(!t||!t.symbol||!s)return null;if(e||(e=y()),De(e,s),!i||0===i[0]&&0===i[1]&&0===i[2]&&0===i[3]){const{hash:e,textInfo:s}=t,o=this._hashToCIM.get(e);if(!o)return null;i||(i=[0,0,0,0]);const n=this._inflatedSizeHelper.getSymbolInflateSize(i,o.symbol,this._cimResourceManager,r,s);i[0]=ve(n[0]),i[1]=ve(n[1]),i[2]=ve(n[2]),i[3]=ve(n[3])}const o=this._resolution,n=A.safeSize(i);return e[0]-=n*o,e[1]-=n*o,e[2]+=n*o,e[3]+=n*o,e}}const _t=(e,t)=>{const s=ot(e.graphic),i=ot(t.graphic);return s===i?t.zorder-e.zorder:s-i},xt=i("esri-2d-graphic-debug");function vt(e,t,s){let i=s.get(e);return i||(i={tile:t,addedOrModified:[],removed:[]},s.set(e,i)),i}let bt=class extends(a(n(t))){constructor(e){super(e),this._storage=new ue,this._displayIds=new Map,this._controller=new AbortController,this._tiles=new Map,this._graphicStoreUpdate=!1,this._graphicsSet=new Set,this._matcher=Promise.resolve(null),this._tileUpdateSet=new Set,this._tilesToUpdate=new Map,this._graphicIdToAbortController=new Map,this._attached=!1,this._updatingGraphicsTimer=null,this._hashToExpandedSymbol=new Map,this._hashToExpandedSymbolPromise=new Map,this._hashToCIMSymbolPromise=new Map,this._hashToCIM=new Map,this._processing=!1,this._needsProcessing=!1,this._pendingUpdate={added:new Set,updated:new Set,removed:new Set},this.lastUpdateId=-1,this.renderer=null,this.updateRequested=!1,this.defaultPointSymbolEnabled=!0,this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}destroy(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=null,this.notifyChange("updating")),this._controller.abort(),this.container.destroy(),this._set("graphics",null),this._graphicStore.clear(),this._attributeStore=null,this._hashToExpandedSymbol.clear(),this.view=null,this.renderer=null,this._hashToCIM.clear(),this._hashToCIMSymbolPromise.clear(),this._hashToExpandedSymbolPromise.clear()}_createMatcher(e,t,s){if(e){const i=se(e),r=ie({indexCount:0,fields:{}},"feature",e,i);this._matcher=ne(r,t,null,s)}}_createDisplayId(e){let t=this._displayIds.get(e);return t||(t=this._storage.createDisplayId(),this._displayIds.set(e,t)),t}initialize(){this._attributeStore=new fe({type:"local",initialize:e=>Promise.resolve(this.container.attributeView.initialize(e)),update:e=>this.container.attributeView.requestUpdate(e),render:()=>this.container.requestRender()},Fe("2d")),this.container.hasHighlight=()=>this._attributeStore.hasHighlight;const e=new ae(this.container.getMaterialItems.bind(this.container),this.view.featuresTilingScheme.tileInfo);this._graphicStore=new gt(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,(e=>{this._createDisplayId(e.uid),this._setFilterState(e.uid,e.visible)}),(e=>{const t=this._displayIds.get(e.uid);this._displayIds.delete(e.uid),this._storage.releaseDisplayId(t)}),this._hashToCIM),this._meshFactory=new le(null,this.uid,e),this._templateStore=e,this.handles.add([u((()=>this._effectiveRenderer),(t=>{this._createMatcher(t,e,this.container.stage.resourceManager);for(const e of this.graphics)this._pendingUpdate.updated.add(e);this.requestUpdate()})),this.view.graphicsTileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",(()=>{xt&&this.container.enableRenderingBounds((()=>this._graphicStore.getAllBounds())),this.graphics.items.length>0&&this._graphicsChangeHandler({target:this.graphics,added:this.graphics.items,removed:[],moved:[]}),this.handles.add(this.graphics.on("change",(e=>this._graphicsChangeHandler(e))),"graphics");const t=this.container.stage.resourceManager;this._createMatcher(this._effectiveRenderer,e,t),this._graphicStore.setResourceManager(t),this._attached=!0,this.notifyChange("updating")}))]);const t=this.view.graphicsTileStore.tiles;this._onTileUpdate({added:t,removed:[]})}get _effectiveRenderer(){return"function"==typeof this.renderer?this.renderer():this.renderer}get updating(){return!this._attached||null!==this._updatingGraphicsTimer||this._pendingUpdate.added.size>0||this._pendingUpdate.removed.size>0||this._pendingUpdate.updated.size>0||this._tileUpdateSet.size>0||this._tilesToUpdate.size>0||this._attributeStore?.updatingHandles.updating||this._processing}hitTest(e){if(!this.view||this.view.suspended)return[];const{resolution:t,rotation:s}=this.view.state;return this._graphicStore.hitTest(e.x,e.y,2,t,s)}update(e){d(this._controller.signal);const t=e.state,{resolution:s}=t;if(this._graphicStore.updateLevel(s),this._graphicStoreUpdate=!0,this.updateRequested=!1,this._pendingUpdate.updated.size>0){if(!this._processing)return void this._updateGraphics();this._needsProcessing=!0}}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())}processUpdate(e){this.updateRequested&&(this.updateRequested=!1,this.update(e))}graphicUpdateHandler(e){const{graphic:t,property:s}=e;switch(s){case"attributes":case"geometry":case"symbol":this._pendingUpdate.updated.add(t),this.requestUpdate();break;case"visible":this._setFilterState(t.uid,t.visible),this._attributeStore.sendUpdates()}}setHighlight(e){const t=e.map((e=>this._displayIds.get(e))).filter(r);this._attributeStore.setHighlight(e,t)}_getIntersectingTiles(e){const t=this._graphicStore.getBounds(e);if(!t||0===v(t)||0===b(t))return[];const s=function(e,t){const s=L(t);if(!s)return null;const[i,r]=s.valid;return e[2]>r?[y([e[0],e[1],r,e[3]]),y([i,e[1],i+e[2]-r,e[3]])]:e[0]<i?[y([i,e[1],e[2],e[3]]),y([r-(i-e[0]),e[1],r,e[3]])]:null}(t,this.view.spatialReference);return null!=s?[...new Set([...this.view.graphicsTileStore.boundsIntersections(s[0]),...this.view.graphicsTileStore.boundsIntersections(s[1])])]:this.view.graphicsTileStore.boundsIntersections(t)}async _updateTile(e){d(this._controller.signal);const t=e.tile,s=this._getGraphicsData(this._templateStore,t,e.addedOrModified),i=await this._processGraphics(t,s);return d(this._controller.signal),this._patchTile(t.key,{type:"update",addOrUpdate:i,remove:e.removed,end:!0,clear:!1,sort:!1}),i}_patchTile(e,t){const s=this._tiles.get(e);s&&(this.container.onTileData(s,t),this.container.requestRender())}_graphicsChangeHandler(e){const t=this._pendingUpdate;for(const s of e.added)t.added.add(s);for(const s of e.moved)t.updated.add(s);for(const s of e.removed)this._pendingUpdate.added.has(s)?t.added.delete(s):t.removed.add(s);this._processing?this._needsProcessing=!0:this._updateGraphics()}_getGraphicsToUpdate(){const e={added:[],removed:[],updated:[]};if(!this.graphics)return e;const t=this._pendingUpdate;for(const s of this.graphics.items)t.added.has(s)?e.added.push(s):t.updated.has(s)&&e.updated.push(s);for(const s of t.removed)this._graphicStore.has(s)&&e.removed.push(s);return t.added.clear(),t.removed.clear(),t.updated.clear(),e}async _updateGraphics(){this._processing=!0;const{added:e,removed:t,updated:s}=this._getGraphicsToUpdate(),i=this._tilesToUpdate;let r;try{if(!this._graphicStoreUpdate){const e=this.view.state,{resolution:t}=e;this._graphicStore.updateLevel(t)}const o=[],n=new Array(e.length+t.length);for(let e=0;e<s.length;e++){const t=s[e],a=this._getIntersectingTiles(t);for(const e of a)r=e.id,vt(r,e,i).removed.push(this._displayIds.get(t.uid));o.push(this._updateGraphic(t,null)),n[e]=t}const a=s.length;for(let t=0;t<e.length;t++){const s=e[t];n[a+t]=s,this._graphicsSet.add(s),o.push(this._addGraphic(s))}for(const e of t){this._abortProcessingGraphic(e.uid);const t=this._getIntersectingTiles(e);for(const s of t)r=s.id,vt(r,s,i).removed.push(this._displayIds.get(e.uid));this._graphicsSet.delete(e),this._graphicStore.remove(e)}let l;this._flipUpdatingGraphics(),await Promise.all(o);for(let e=0;e<n.length;e++){l=n[e];const t=this._getIntersectingTiles(l);for(const e of t)r=e.id,vt(r,e,i).addedOrModified.push(l)}this._graphicStore.updateZ();const d=[];for(const[e,t]of i)d.push(this._updateTile(t));await Promise.all(d)}catch(e){h(e)}for(const e of t)try{const t=await this._getSymbolForGraphic(e,null);if(t){const e=t.hash();this._hashToExpandedSymbol.delete(e)}}catch(e){h(e)}i.clear(),this.notifyChange("updating"),this._processing=!1,this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())}_getArcadeInfo(e){const t=(e.attributes?Object.keys(e.attributes):[]).map((t=>({name:t,alias:t,type:"string"==typeof e.attributes[t]?"esriFieldTypeString":"esriFieldTypeDouble"})));return null==e.geometry?null:{geometryType:T(e.geometry),spatialReference:m.fromJSON(e.geometry.spatialReference),fields:t}}_getSymbolForGraphic(e,t){return d(this._controller.signal),null!=e.symbol?Promise.resolve(e.symbol):null!=this._effectiveRenderer?this._effectiveRenderer.getSymbolAsync(e,{scale:this.view.state.scale,signal:null!=t?t.signal:null}):Promise.resolve(this._getNullSymbol(e))}_getCIMSymbol(e,t,s){let i=this._hashToCIM.get(t);if(i)return Promise.resolve(i);const r=O(e);if(null!=r){if("CIMSymbolReference"===r.type)return i=r,this._hashToCIM.set(t,i),Promise.resolve(i);let e=this._hashToCIMSymbolPromise.get(t);return e||(e=r.fetchCIMSymbol(s).then((e=>(this._hashToCIM.set(t,e.data),this._hashToCIMSymbolPromise.delete(t),e))).catch((e=>(this._hashToCIMSymbolPromise.delete(t),c(e),null))),this._hashToCIMSymbolPromise.set(t,e),e)}return Promise.resolve(null)}_expandCIMSymbol(e,t,s,i){const r=this._hashToExpandedSymbol.get(s);if(r)return Promise.resolve(r);let o=this._hashToExpandedSymbolPromise.get(s);if(o)return o;const n=this.container.stage,a=this._getArcadeInfo(t),l=se(null),d=Se(e,l);return o=de(d,a,n.resourceManager,i),this._hashToExpandedSymbolPromise.set(s,o),o.then((e=>(this._hashToExpandedSymbol.set(s,e),this._hashToExpandedSymbolPromise.delete(s),e))),o}async _getSymbolResources(e,t){return d(this._controller.signal),this.container.stage?this._getSymbolForGraphic(e,t).then((s=>{if(!s)return null;const i=s.hash();return this._getCIMSymbol(s,i,t).then((s=>null==s?null:this._expandCIMSymbol(s,e,i,t).then((e=>{const t=e.layers.filter((e=>"text"===e.type&&"string"==typeof e.text));if(t&&t.length>0){const s=new Array(t.length);for(let e=0;e<t.length;e++){const i=t[e],r=[],[n]=o(i.text);i.text=n;for(let e=0;e<n.length;e++)r.push(n.charCodeAt(e));s[e]={symbol:i,id:e,glyphIds:r}}const r=new Map;return this.container.getMaterialItems(s).then((s=>{l(s);for(let e=0;e<t.length;e++){const i=t[e];r.set(i.cim,{text:i.text,mosaicItem:s[e].mosaicItem})}return{symbol:e,textInfo:r,hash:i}}))}return{symbol:e,hash:i}}))))})).catch((e=>(c(e),null))):null}async _projectAndNormalizeGeometry(e,t){if(d(this._controller.signal),null==e.geometry||"mesh"===e.geometry.type)return null;let s=e.geometry;if(B(s)){const e=s.rings;s.rings=e}else if(F(s)){const e=s.paths;s.paths=e}else if(S(s)){const r=await this._getSymbolForGraphic(e,t);d(this._controller.signal),s=r&&("simple-marker"===(i=r.type)||"picture-marker"===i||"esriSMS"===i||"esriPMS"===i||function(e){return"text"===e||"esriTS"===e}(r.type))?s.center:function(e){if(!e)return null;const{xmin:t,ymin:s,xmax:i,ymax:r,spatialReference:o}=e;return new D({rings:[[[t,s],[t,r],[i,r],[i,s],[t,s]]],spatialReference:o})}(s)}var i;await z(s.spatialReference,this.view.spatialReference);const r=M(s),o=j(r,s.spatialReference,this.view.spatialReference);return o&&w(o),o}_onTileUpdate(e){const t=L(this.view.spatialReference);if(e.added&&e.added.length>0)for(const s of e.added)this._addNewTile(s,t);if(e.removed&&e.removed.length>0)for(const t of e.removed)this._removeTile(t.key)}async _addGraphic(e){this._abortProcessingGraphic(e.uid),d(this._controller.signal);const t=new AbortController;this._graphicIdToAbortController.set(e.uid,t);const s={signal:t.signal};try{await this._addOrUpdateGraphic(e,s),d(this._controller.signal),this._graphicIdToAbortController.delete(e.uid)}catch(t){if(this._graphicIdToAbortController.delete(e.uid),!h(t))throw t}}_updateGraphic(e,t){d(this._controller.signal);const s=this._projectAndNormalizeGeometry(e,t),i=this._getSymbolResources(e,t);return Promise.all([s,i]).then((([t,s])=>{d(this._controller.signal),this._graphicStore.addOrModify(e,s,t)}))}_addOrUpdateGraphic(e,t){d(this._controller.signal);const s=this._projectAndNormalizeGeometry(e,t),i=this._getSymbolResources(e,t);return Promise.all([s,i]).then((([t,s])=>{d(this._controller.signal),this._graphicsSet.has(e)&&this._graphicStore.addOrModify(e,s,t)}))}_addTile(e){const t=this.view.featuresTilingScheme.getTileBounds(y(),e),s=this.view.featuresTilingScheme.getTileResolution(e.level),i=new Ge(e,s,t[0],t[3]);return this._tiles.set(e,i),this.container.addChild(i),i}async _addNewTile(e,t){const s=this._addTile(e.key),i=this._graphicStore.queryTileData(this._templateStore,e);if(0===i.length)return;if(t){const s=Math.round((t.valid[1]-t.valid[0])/e.resolution);for(const e of i)e.geometry&&(R(e.geometry)||I(e.geometry))&&this._wrapPoints(e,s)}const r=e.key;this._tileUpdateSet.add(e.key),this.notifyChange("updating");try{const t={type:"update",clear:!1,addOrUpdate:await this._processGraphics(e,i),remove:[],end:!0,sort:!1};s.patch(t),this._tileUpdateSet.delete(r),this.notifyChange("updating")}catch(e){if(this._tileUpdateSet.delete(r),this.notifyChange("updating"),!h(e))throw e}}_removeTile(e){if(!this._tiles.has(e))return;const t=this._tiles.get(e);this.container.removeChild(t),t.destroy(),this._tiles.delete(e)}_setFilterState(e,t){const s=this._displayIds.get(e),i=this._attributeStore.getHighlightFlag(e);this._attributeStore.setData(s,0,0,i|(t?k:0))}_getGraphicsData(e,t,s){const i=this.view,r=L(i.spatialReference),o=this._graphicStore.getGraphicsData(e,t,s);if(r){const e=Math.round((r.valid[1]-r.valid[0])/t.resolution);for(const t of o)t.geometry&&(R(t.geometry)||I(t.geometry))&&this._wrapPoints(t,e)}return o}_wrapPoints(e,t){const s=e.geometry;I(s)?this._wrapMultipoint(s,t):this._wrapPoint(e,t)}_wrapMultipoint(e,t){const s=e.points,i=[];let r=0,o=0;for(const[e,n]of s){if(i.push([e+r,n]),r=0,t===rt){const s=250;e+o<s?(i.push([t,0]),r=-t):e+o>rt-s&&(i.push([-t,0]),r=t)}else e+o<-50?(i.push([t,0]),r=-t):e+o>562&&(i.push([-t,0]),r=t);o+=e}e.points=i}_wrapPoint(e,t){const s=e.geometry;if(t===rt){const i=250;s.x<i?e.geometry={points:[[s.x,s.y],[t,0]]}:s.x>rt-i&&(e.geometry={points:[[s.x,s.y],[-t,0]]})}else s.x<-50?e.geometry={points:[[s.x,s.y],[t,0]]}:s.x>562&&(e.geometry={points:[[s.x,s.y],[-t,0]]})}_processGraphics(e,t,s){if(!t||!t.length||!this._meshFactory)return Promise.resolve(null);const i=nt.from(t,this.uid,e.transform),r=this._meshFactory;return this._matcher.then((t=>r.analyzeGraphics(i,this.container.stage.resourceManager,t,null,null,s).then((()=>(this._attributeStore.sendUpdates(),this._processAnalyzedGraphics(e,i))))))}_processAnalyzedGraphics(e,t){const s=this._meshFactory,i=t.getSize(),r=t.getCursor(),o={features:i,records:i,metrics:0},n=new he(e.key.id,o,K.DEFAULT,!1,!1),a=[];for(;r.next();){const t=r.readGraphic();t.insertAfter=-1===t.insertAfter?-1:this._displayIds.get(t.insertAfter),t.displayId=this._displayIds.get(t.attributes[this.uid]);const i=new Xe(t.displayId);i.insertAfter=t.insertAfter,a.push(i),s.writeGraphic(n,r,e.level,this.container.stage.resourceManager)}const l=e.tileInfoView.tileInfo.isWrappable,d=n.serialize(l);if(1!==d.length)return new it;const h=d[0].message;return it.fromVertexData(h,a)}_abortProcessingGraphic(e){this._graphicIdToAbortController.get(e)?.abort()}_getNullSymbol(e){const t=e.geometry;return F(t)?U:B(t)||S(t)?P:this.defaultPointSymbolEnabled?V:null}_flipUpdatingGraphics(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=setTimeout((()=>{this._updatingGraphicsTimer=null,this.notifyChange("updating")}),160),this.notifyChange("updating")}};e([f()],bt.prototype,"_effectiveRenderer",null),e([f({constructOnly:!0})],bt.prototype,"requestUpdateCallback",void 0),e([f()],bt.prototype,"container",void 0),e([f({constructOnly:!0})],bt.prototype,"graphics",void 0),e([f()],bt.prototype,"renderer",void 0),e([f()],bt.prototype,"updating",null),e([f()],bt.prototype,"view",void 0),e([f()],bt.prototype,"updateRequested",void 0),e([f()],bt.prototype,"defaultPointSymbolEnabled",void 0),bt=e([p("esri.views.2d.layers.support.GraphicsView2D")],bt);const Dt=bt;export{Dt as G};
