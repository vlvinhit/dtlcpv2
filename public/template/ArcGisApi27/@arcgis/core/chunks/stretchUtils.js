/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{g as t}from"./maybe.js";import n from"../layers/support/PixelBlock.js";import{g as s}from"./pixelRangeUtils.js";import{a as e}from"./stretchRendererUtils.js";const i=1,a=[.299,.587,.114];function o(t,n=256){n=Math.min(n,256);const{size:s,counts:e}=t,i=new Uint8Array(s),a=e.reduce(((t,s)=>t+s/n),0);let o=0,r=0,l=0,f=a;for(let t=0;t<s;t++)if(l+=e[t],!(t<s-1&&l+e[t+1]<f)){for(;o<n-1&&f<l;)o++,f+=a;for(let n=r;n<=t;n++)i[n]=o;r=t+1}for(let t=r;t<s;t++)i[t]=n-1;return i}function r(t){const{minCutOff:n,maxCutOff:s,gamma:e,pixelType:i,rounding:a}=t,o=t.outMin||0,r=t.outMax||255;if(!["u8","u16","s8","s16"].includes(i))return null;const l=n.length;let f,u,c=0;"s8"===i?c=-127:"s16"===i&&(c=-32767);let m=256;["u16","s16"].includes(i)&&(m=65536);const h=[],p=[],x=r-o;for(f=0;f<l;f++)p[f]=s[f]-n[f],h[f]=0===p[f]?0:x/p[f];let d;const M=[];let y,b,v;if(e&&e.length>=l){const t=g(l,e);for(f=0;f<l;f++){for(v=[],u=0;u<m;u++)if(0!==p[f])if(y=u+c,d=(y-n[f])/p[f],b=1,e[f]>1&&(b-=(1/x)**(d*t[f])),y<s[f]&&y>n[f]){const t=b*x*d**(1/e[f])+o;v[u]="floor"===a?Math.floor(t):"round"===a?Math.round(t):t}else y>=s[f]?v[u]=r:v[u]=o;else v[u]=o;M[f]=v}}else for(f=0;f<l;f++){for(v=[],u=0;u<m;u++)if(y=u+c,y<=n[f])v[u]=o;else if(y>=s[f])v[u]=r;else{const t=(y-n[f])*h[f]+o;v[u]="floor"===a?Math.floor(t):"round"===a?Math.round(t):t}M[f]=v}if(null!=t.contrastOffset){const n=function(t,n){const s=Math.min(Math.max(t,-100),100),e=Math.min(Math.max(n??0,-100),100);let i=0,a=0;const o=new Uint8Array(256);for(i=0;i<256;i++)s>0&&s<100?a=(200*i-25500+510*e)/(2*(100-s))+128:s<=0&&s>-100?a=(200*i-25500+510*e)*(100+s)/2e4+128:100===s?(a=200*i-25500+256*(100-s)+510*e,a=a>0?255:0):-100===s&&(a=128),o[i]=a>255?255:a<0?0:a;return o}(t.contrastOffset,t.brightnessOffset);for(f=0;f<l;f++)for(v=M[f],u=0;u<m;u++)v[u]=n[v[u]]}return{lut:M,offset:c}}function l(t,n,s){const e=[];for(let i=0;i<n.length;i++){let o=0,r=0,l=0;"min"in n[i]?({min:o,max:r,avg:l}=n[i]):[o,r,l]=n[i];let u=l??0;"u8"!==t&&(u=255*(u-o)/(r-o)),s&&(u*=a[i]),e.push(f(u))}return e}function f(t){if(t<=0||t>=255)return i;let n=0;150!==t&&(n=t<=150?45*Math.cos(.01047*t):17*Math.sin(.021*t));const s=t+n,e=Math.log(t/255),a=Math.log(s/255);if(0===a)return i;const o=e/a;return isNaN(o)?i:Math.min(9.9,Math.max(.01,o))}function u(t){const{pixels:n,mask:s,pixelType:e,bandMasks:i}=t,a=n.map(((t,n)=>function(t,n,s,e){let i=1/0,a=-1/0,o=0,r=0;const l=t.length;for(let s=0;s<l;s++){const e=t[s];n&&!n[s]||(i=e<i?e:i,a=e>a?e:a,o+=e,r++)}if(0===r)return{statistics:{min:0,max:0,avg:0,stddev:0},histogram:null};const f=o/r;let u=0;for(let s=0;s<l;s++)n&&!n[s]||(u+=(t[s]-f)**2);const c=n?n.filter((t=>t)).length:l,m={min:i,max:a,avg:f,stddev:c<=1?0:Math.sqrt(u/(c-1))};if(["u8","s8","u4","u2","u1"].includes(s)){const s=a-i+1,e=new Uint32Array(s);for(let s=0;s<l;s++)n&&!n[s]||e[t[s]-i]++;return{statistics:m,histogram:{min:i-.5,max:a+.5,size:s,counts:e}}}const h=new Uint32Array(256),g=(a-i)/256;if(0===g)return{statistics:m,histogram:{min:i,max:a,size:1,counts:new Uint32Array(1).fill(r)}};const p=new Uint32Array(257);for(let s=0;s<l;s++)n&&!n[s]||p[Math.floor((t[s]-i)/g)]++;for(let t=0;t<255;t++)h[t]=p[t];return h[255]=p[255]+p[256],{statistics:m,histogram:{min:i,max:a,size:256,counts:h}}}(t,i?.[n]??s,e)));return{statistics:a.map((({statistics:t})=>t)),histograms:a.map((({histogram:t})=>t))}}function c(t){if(null==t||!t.pixels?.length)return null;const{pixels:n,mask:s,bandMasks:e,pixelType:i}=t,a=t.width*t.height,o=n.length;let r,l,f,u,c;const m=[],h=[];let g,p,x,d,M,y,b,v,k,w;const z=256;for(u=0;u<o;u++){g=new Uint32Array(z),x=n[u];const o=e?.[u]??s;if("u8"===i)if(r=-.5,l=255.5,o)for(c=0;c<a;c++)o[c]&&g[x[c]]++;else for(c=0;c<a;c++)g[x[c]]++;else{let n=!1;t.statistics||(t.updateStatistics(),n=!0);const s=t.statistics;if(r=s[u].minValue,l=s[u].maxValue,f=(l-r)/z,0===f){!s||t.validPixelCount||n||t.updateStatistics();const e=(t.validPixelCount||t.width*t.height)/z;for(let t=0;t<z;t++)g[t]=Math.round(e*(t+1))-Math.round(e*t)}else{for(p=new Uint32Array(257),c=0;c<a;c++)o&&!o[c]||p[Math.floor((x[c]-r)/f)]++;for(c=0;c<255;c++)g[c]=p[c];g[255]=p[255]+p[256]}}for(m.push({min:r,max:l,size:z,counts:g}),d=0,M=0,v=0,c=0;c<z;c++)d+=g[c],M+=c*g[c];for(k=M/d,c=0;c<z;c++)v+=g[c]*(c-k)**2;w=Math.sqrt(v/(d-1)),f=(l-r)/z,y=(k+.5)*f+r,b=w*f,h.push({min:r,max:l,avg:y,stddev:b})}return{statistics:h,histograms:m}}function m(t){const n=[];for(let s=0;s<t.length;s++){const{min:e,max:i,size:a,counts:o}=t[s];let r=0,l=0;for(let t=0;t<a;t++)r+=o[t],l+=t*o[t];const f=l/r;let u=0;for(let t=0;t<a;t++)u+=o[t]*(t-f)**2;const c=(i-e)/a,m=(f+.5)*c+e,h=Math.sqrt(u/(r-1))*c;n.push({min:e,max:i,avg:m,stddev:h})}return n}function h(n,i){const{pixelBlock:a,bandIds:r,returnHistogramLut:l,rasterInfo:f}=i;let u=null,m=null,h=n.stretchType;if("number"==typeof h&&(h=e[h]),n.dra)if("minMax"===h&&null!=a&&a.statistics)u=a.statistics.map((t=>[t.minValue,t.maxValue,0,0]));else{const t=c(a);u=null!=t?t.statistics:null,m=null!=t?t.histograms:null}else u=n.statistics?.length>0?n.statistics:f.statistics,m="histograms"in n?n.histograms:void 0,m||(m=f.histograms);"percentClip"!==h&&"histogramEqualization"!==h||m?.length||(h="minMax");const g=u?.length||m?.length||f.bandCount,p=[],x=[];let d,M,y,b,v,k,w,z,C;u&&!Array.isArray(u[0])&&(u=u.map((t=>[t.min,t.max,t.avg,t.stddev])));const[O,A]=s(f.pixelType);if(!u?.length){for(u=[],z=0;z<g;z++)u.push([O,A,1,1]);"standardDeviation"===h&&(h="minMax")}switch(h){case"none":for(z=0;z<g;z++)p[z]=O,x[z]=A;break;case"minMax":for(z=0;z<g;z++){const t=u[z];p[z]=t[0],x[z]=t[1]}break;case"standardDeviation":for(z=0;z<g;z++){const t=u[z];p[z]=t[2]-n.numberOfStandardDeviations*t[3],x[z]=t[2]+n.numberOfStandardDeviations*t[3],p[z]<t[0]&&(p[z]=t[0]),x[z]>t[1]&&(x[z]=t[1])}break;case"histogramEqualization":for(t(m),z=0;z<g;z++)p[z]=m[z].min,x[z]=m[z].max;break;case"percentClip":for(t(m),z=0;z<m.length;z++){for(d=m[z],v=new Uint32Array(d.size),b=[...d.counts],b.length>=20&&(b[0]=b[1]=b[2]=b[b.length-1]=b[b.length-2]=0),y=0,M=(d.max-d.min)/d.size,w=-.5===d.min&&1===M?.5:0,C=0;C<d.size;C++)y+=b[C],v[C]=y;for(k=(n.minPercent||0)*y/100,p[z]=d.min+w,C=0;C<d.size;C++)if(v[C]>k){p[z]=d.min+M*(C+w);break}for(k=(1-(n.maxPercent||0)/100)*y,x[z]=d.max+w,C=d.size-2;C>=0;C--)if(v[C]<k){x[z]=d.min+M*(C+2-w);break}if(x[z]<p[z]){const t=p[z];p[z]=x[z],x[z]=t}}break;default:for(z=0;z<g;z++){const t=u[z];p[z]=t[0],x[z]=t[1]}}let U,T,q;return"histogramEqualization"===h?(t(m),T=m[0].size||256,U=0,l&&(q=m.map((t=>o(t))))):(T=n.max||255,U=n.min||0),function(t,n){if(null==n||0===n.length)return t;const s=Math.max.apply(null,n),{minCutOff:e,maxCutOff:i,outMin:a,outMax:o,histogramLut:r}=t;return e.length===n.length||e.length<=s?t:{minCutOff:n.map((t=>e[t])),maxCutOff:n.map((t=>i[t])),histogramLut:r?n.map((t=>r[t])):null,outMin:a,outMax:o}}({minCutOff:p,maxCutOff:x,outMax:T,outMin:U,histogramLut:q},r)}function g(t,n){const s=new Float32Array(t);for(let e=0;e<t;e++)n[e]>1?n[e]>2?s[e]=6.5+(n[e]-2)**2.5:s[e]=6.5+100*(2-n[e])**4:s[e]=1;return s}function p(t,s){if(null==t||!t.pixels?.length)return t;const{mask:e,bandMasks:i,width:a,height:o,pixels:r}=t,{minCutOff:l,maxCutOff:f,gamma:u}=s,c=s.outMin||0,m=s.outMax||255,h=a*o,p=s.outputPixelType||"u8",x=t.pixels.map((()=>n.createEmptyBand(p,h))),d=x.length,M=m-c,y=[],b=[];for(let t=0;t<d;t++)b[t]=f[t]-l[t],y[t]=0===b[t]?0:M/b[t];const v=p.startsWith("u")||p.startsWith("s"),k=u&&u.length>=d,w=!!s.isRenderer;if(k){const t=g(d,u);for(let n=0;n<d;n++){const s=i?.[n]??e;for(let e=0;e<h;e++)if(null==s||s[e]){if(0===b[n]){x[n][e]=c;continue}const s=r[n][e],i=(s-l[n])/b[n];let a=1;if(u[n]>1&&(a-=(1/M)**(i*t[n])),s<f[n]&&s>l[n]){const t=a*M*i**(1/u[n])+c;x[n][e]=w?Math.floor(t):v?Math.round(t):t}else s>=f[n]?x[n][e]=m:x[n][e]=c}}}else for(let t=0;t<d;t++){const n=i?.[t]??e;for(let s=0;s<h;s++)if(null==n||n[s]){const n=r[t][s];if(n<f[t]&&n>l[t]){const e=(n-l[t])*y[t]+c;x[t][s]=w?Math.floor(e):v?Math.round(e):e}else n>=f[t]?x[t][s]=m:x[t][s]=c}}const z=new n({width:a,height:o,mask:e,bandMasks:i,pixels:x,pixelType:p});return z.updateStatistics(),z}export{l as a,o as b,r as c,m as d,c as e,u as f,h as g,g as h,p as s};
