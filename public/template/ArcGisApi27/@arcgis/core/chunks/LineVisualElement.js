/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{tryProjectWithZConversion as e}from"../geometry/projection.js";import{g as t}from"./ElevationProvider.js";import{j as r,f as s}from"./mat4.js";import{c as o}from"./mat4f64.js";import{s as i,d as a}from"./vec3.js";import{Z as n,c as l}from"./vec3f64.js";import{f as m,d as h}from"./vec4f64.js";import{V as c}from"./VisualElement.js";import{W as p,U as u,O as d,R as f}from"./TriangleMaterial.js";import{l as _,c as g}from"./line.js";import{R as y}from"./Material.js";function C(r,s,o,i=!1){const a=e(r,s);return null==a?null:(a.hasZ&&!i||null==o||(a.z=t(o,a)??0),a)}function v(e,t,r){r.warnOnce(`Failed to project analysis geometry (id: '${e.id}'), projection from spatial reference (wkid: '${t.wkid}') to view spatial reference is not supported. Projection may be possible after calling projection.load().`)}class P extends c{constructor(e){super(e.view),this._resources=null,this._transform=o()}get object(){return null!=this._resources?this._resources.object:null}get transform(){return this._transform}set transform(e){r(this._transform,e),null!=this._resources&&(this._resources.object.transformation=this._transform)}recreate(){this.attached&&this.createResources()}recreateGeometry(){if(null==this._resources)return;const e=this._resources.object,t=this.view._stage;t.removeMany(e.geometries),e.removeAllGeometries(),this.createGeometries(e),e.visible=this.visible,t.addMany(e.geometries)}createResources(){this.destroyResources();const e=this.view._stage;if(!e)return;const t=new p(e,{pickable:!1,updatePolicy:u.SYNC}),r=new d({castShadow:!1});r.transformation=this._transform,this.createExternalResources(),this.createGeometries(r),e.addMany(r.geometries),this.forEachExternalMaterial((t=>e.add(t))),e.add(r),t.add(r),r.visible=this.visible,this._resources={layer:t,object:r}}destroyResources(){const e=this.view._stage;null!=this._resources&&e&&(e.remove(this._resources.object),this._resources.layer.destroy(),this.forEachExternalMaterial((t=>{e.remove(t),t.dispose()})),e.removeMany(this._resources.object.geometries),this._resources.object.dispose(),this.destroyExternalResources(),this._resources=null)}updateVisibility(e){null!=this._resources&&(this._resources.object.visible=e)}}class w extends P{constructor(e,t){super(e),this._hasExternalMaterial=!1,this._hasExternalMaterial=null!=t,this._material=null!=t?t:new f({width:1,color:m(1,0,1,1),stippleOffColor:null,stipplePattern:null,stipplePreferContinuous:!0,isClosed:!1,falloff:0,innerColor:null,innerWidth:1,hasPolygonOffset:!1,renderOccluded:y.OccludeAndTransparent,writeDepth:!0}),this.applyProps(e)}setGeometryFromRenderSpacePoint(e,t=1e3){this.geometry=[[[e[0]-t,e[1],e[2]],[e[0]+t,e[1],e[2]]],[[e[0],e[1]-t,e[2]],[e[0],e[1]+t,e[2]]],[[e[0],e[1],e[2]-t],[e[0],e[1],e[2]+t]]]}setGeometryFromExtent(e){const t=this.view.spatialReference,r=l(),s=l(),o=100,a=[];i(r,e[0],e[1],o),this.view.renderCoordsHelper.toRenderCoords(r,t,s),a.push([s[0],s[1],s[2]]),i(r,e[2],e[1],o),this.view.renderCoordsHelper.toRenderCoords(r,t,s),a.push([s[0],s[1],s[2]]),i(r,e[2],e[3],o),this.view.renderCoordsHelper.toRenderCoords(r,t,s),a.push([s[0],s[1],s[2]]),i(r,e[0],e[3],o),this.view.renderCoordsHelper.toRenderCoords(r,t,s),a.push([s[0],s[1],s[2]]),i(r,e[0],e[1],o),this.view.renderCoordsHelper.toRenderCoords(r,t,s),a.push([s[0],s[1],s[2]]),i(r,e[0],e[1],o),this.view.renderCoordsHelper.toRenderCoords(r,t,s),a.push([s[0],s[1],s[2]]),this.geometry=[a]}setGeometryFromFrustum(e){const t=[];e.lines.forEach((e=>{t.push([e.origin[0],e.origin[1],e.origin[2]]),t.push([e.endpoint[0],e.endpoint[1],e.endpoint[2]])})),this.geometry=[t]}setGeometryFromBoundedPlane(e){const t=[],r=e.origin,s=e.basis1,o=e.basis2,i=.5,a=l(),n=l(),m=l(),h=l();a[0]=r[0]-s[0]*i-o[0]*i,a[1]=r[1]-s[1]*i-o[1]*i,a[2]=r[2]-s[2]*i-o[2]*i,n[0]=r[0]-s[0]*i+o[0]*i,n[1]=r[1]-s[1]*i+o[1]*i,n[2]=r[2]-s[2]*i+o[2]*i,m[0]=r[0]+s[0]*i+o[0]*i,m[1]=r[1]+s[1]*i+o[1]*i,m[2]=r[2]+s[2]*i+o[2]*i,h[0]=r[0]+s[0]*i-o[0]*i,h[1]=r[1]+s[1]*i-o[1]*i,h[2]=r[2]+s[2]*i-o[2]*i,t.push([a[0],a[1],a[2]]),t.push([n[0],n[1],n[2]]),t.push([m[0],m[1],m[2]]),t.push([h[0],h[1],h[2]]),t.push([a[0],a[1],a[2]]),this.geometry=[t]}setGeometryFromSegment(e){const t=e.endRenderSpace;this.transform=s(j,t);const{points:r}=e.createRenderGeometry(t,this.view.renderCoordsHelper);this.geometry=[r]}setGeometryFromSegments(e,t=n){this.transform=s(j,t),this.geometry=e.map((e=>e.createRenderGeometry(t,this.view.renderCoordsHelper).points))}getTransformedGeometry(){return null==this._geometry?null:this._geometry.map((e=>e.map((e=>a(l(),e,this.transform)))))}get renderOccluded(){return this._material.parameters.renderOccluded}set renderOccluded(e){this._material.setParameters({renderOccluded:e})}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this.recreateGeometry()}get width(){return this._material.parameters.width}set width(e){this._material.setParameters({width:e})}get color(){return this._material.parameters.color}set color(e){const t=1===e[3];this._material.setParameters({color:h(e),writeDepth:t})}get innerWidth(){return this._material.parameters.innerWidth}set innerWidth(e){this._material.setParameters({innerWidth:e})}get innerColor(){return this._material.parameters.innerColor}set innerColor(e){this._material.setParameters({innerColor:null!=e?h(e):null})}get stipplePattern(){return this._material.parameters.stipplePattern}set stipplePattern(e){null!=this._material&&this._material.setParameters({stipplePattern:e})}get stippleOffColor(){return this._material.parameters.stippleOffColor}set stippleOffColor(e){this._material.setParameters({stippleOffColor:null!=e?h(e):null})}get stipplePreferContinuous(){return this._material.parameters.stipplePreferContinuous}set stipplePreferContinuous(e){this._material.setParameters({stipplePreferContinuous:e})}get falloff(){return this._material.parameters.falloff}set falloff(e){this._material.setParameters({falloff:e})}get polygonOffset(){return this._material.parameters.hasPolygonOffset}set polygonOffset(e){this._material.setParameters({hasPolygonOffset:e})}createExternalResources(){}destroyExternalResources(){}createGeometries(e){for(const t of _(this.geometry)){const r=g(this._material,t);e.addGeometry(r)}}forEachExternalMaterial(e){this._hasExternalMaterial||e(this._material)}}const j=o();export{w as L,P as O,C as a,v as l};
