/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{r}from"./asyncUtils.js";import o from"../core/Error.js";import{eachAlways as e,throwIfAborted as s}from"../core/promiseUtils.js";import{g as t}from"./uuid.js";import{getSiblingOfSameTypeI as p}from"./resourceUtils.js";import"./tslib.es6.js";import"../core/Accessor.js";import"../core/Handles.js";import"./maybe.js";import"../core/accessorSupport/decorators/subclass.js";import"./typedArrayUtil.js";import"./metadata.js";import"../core/lang.js";import"./utils.js";import"./tracking.js";import"./Logger.js";import"../config.js";import"./object.js";import"./string.js";import"./ensureType.js";import"./get.js";import"./ObjectPool.js";import"./ObservableBase.js";import"../core/accessorSupport/decorators/property.js";import"./watch.js";import"./ArrayPool.js";import"../core/scheduling.js";import"./nextTick.js";import"./PooledArray.js";import"../request.js";import"../kernel.js";import"../core/urlUtils.js";async function c(r,c,m){if(!c||!c.resources)return;const n=c.portalItem===r.portalItem?new Set(r.paths):new Set;r.paths.length=0,r.portalItem=c.portalItem;const u=new Set(c.resources.toKeep.map((r=>r.resource.path))),h=new Set,l=[];u.forEach((o=>{n.delete(o),r.paths.push(o)}));for(const o of c.resources.toUpdate)if(n.delete(o.resource.path),u.has(o.resource.path)||h.has(o.resource.path)){const{resource:e,content:s,finish:c,error:a}=o,n=p(e,t());r.paths.push(n.path),l.push(i({resource:n,content:s,compress:o.compress,finish:c,error:a},m))}else r.paths.push(o.resource.path),l.push(a(o,m)),h.add(o.resource.path);for(const o of c.resources.toAdd)l.push(i(o,m)),r.paths.push(o.resource.path);if(n.forEach((r=>{if(c.portalItem){const o=c.portalItem.resourceFromPath(r);l.push(o.portalItem.removeResource(o).catch((()=>{})))}})),0===l.length)return;const j=await e(l);s(m);const f=j.filter((r=>"error"in r)).map((r=>r.error));if(f.length>0)throw new o("save:resources","Failed to save one or more resources",{errors:f})}async function i(o,e){const s={...null!=e?e:{},compress:o.compress},t=await r(o.resource.portalItem.addResource(o.resource,o.content,s));if(!0!==t.ok)throw o.error?.(t.error),t.error;o.finish?.(o.resource)}async function a(o,e){const s=await r(o.resource.update(o.content,e));if(!0!==s.ok)throw o.error?.(s.error),s.error;o.finish?.(o.resource)}export{c as saveResources};
