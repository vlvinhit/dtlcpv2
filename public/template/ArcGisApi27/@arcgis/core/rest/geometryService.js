/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import e from"../request.js";import{p as t,a as r}from"../chunks/utils4.js";import"../geometry.js";import{e as o}from"../chunks/utils5.js";import n from"../geometry/Polygon.js";import{fromJSON as i,getJsonType as a}from"../geometry/support/jsonUtils.js";export{c as cut,s as simplify}from"../chunks/simplify.js";import{J as m}from"../chunks/jsonMap.js";import N from"./support/GeneralizeParameters.js";import f from"./support/LengthsParameters.js";import u from"./support/OffsetParameters.js";export{p as project}from"../chunks/project.js";import I from"./support/RelationParameters.js";import T from"./support/TrimExtendParameters.js";import _ from"../geometry/Polyline.js";import"../config.js";import"../chunks/typedArrayUtil.js";import"../chunks/object.js";import"../core/lang.js";import"../kernel.js";import"../core/urlUtils.js";import"../core/Error.js";import"../chunks/Logger.js";import"../chunks/string.js";import"../chunks/maybe.js";import"../core/promiseUtils.js";import"../chunks/ensureType.js";import"../geometry/Extent.js";import"../chunks/tslib.es6.js";import"../core/accessorSupport/decorators/property.js";import"../chunks/get.js";import"../chunks/utils.js";import"../chunks/metadata.js";import"../core/accessorSupport/decorators/subclass.js";import"../chunks/tracking.js";import"../geometry/Geometry.js";import"../core/JSONSupport.js";import"../core/Accessor.js";import"../core/Handles.js";import"../chunks/ObjectPool.js";import"../chunks/ObservableBase.js";import"../chunks/watch.js";import"../chunks/ArrayPool.js";import"../core/scheduling.js";import"../chunks/nextTick.js";import"../chunks/PooledArray.js";import"../chunks/reader.js";import"../geometry/SpatialReference.js";import"../chunks/unitUtils.js";import"../chunks/writer.js";import"../geometry/Point.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/support/webMercatorUtils.js";import"../geometry/Multipoint.js";import"../chunks/zmUtils.js";import"../chunks/typeUtils.js";import"../chunks/extentUtils.js";import"../chunks/aaBoundingRect.js";import"../chunks/mathUtils.js";import"../chunks/vec3.js";import"../chunks/vec3f64.js";import"../chunks/common.js";import"../chunks/vec4.js";import"./support/ProjectParameters.js";async function y(s,o,n){const i=t(s),a={...i.query,f:"json",...o.toJSON()},c=r(a,n);return e(i.path+"/areasAndLengths",c).then((e=>e.data))}async function l(s,i,a,c){const m=i[0].spatialReference,N=t(s),p={...N.query,f:"json",sr:JSON.stringify(m.toJSON()),polygons:JSON.stringify(o(i).geometries),polylines:JSON.stringify(o(a).geometries)},f=r(p,c);return e(N.path+"/autoComplete",f).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new n({spatialReference:m,rings:e})))))}async function g(s,o,i){const a=t(s),c={...a.query,f:"json",...o.toJSON()},m=o.outSpatialReference||o.geometries[0].spatialReference,N=r(c,i);return e(a.path+"/buffer",N).then((e=>(e.data.geometries||[]).map((({rings:e})=>new n({spatialReference:m,rings:e})))))}async function S(s,n,a){const c=n[0].spatialReference,m=t(s),N={...m.query,f:"json",sr:JSON.stringify(c.toJSON()),geometries:JSON.stringify(o(n))},p=r(N,a);return e(m.path+"/convexHull",p).then((({data:e})=>i(e.geometry).set({spatialReference:c})))}async function O(s,o,n){const a=o.geometries?.[0].spatialReference,c=t(s),m={...c.query,f:"json",...o.toJSON()},N=r(m,n);return e(c.path+"/densify",N).then((({data:e})=>(e.geometries||[]).map((e=>i(e).set({spatialReference:a})))))}async function R(r,s,n,c){const m=s[0].spatialReference,N=t(r);let p={query:{...N.query,f:"json",sr:JSON.stringify(m.toJSON()),geometries:JSON.stringify(o(s)),geometry:JSON.stringify({geometryType:a(n),geometry:n.toJSON()})}};return c&&(p={...c,...p}),e(N.path+"/difference",p).then((({data:e})=>(e.geometries||[]).map((e=>i(e).set({spatialReference:m})))))}async function U(s,o,n){const i=t(s),a={...i.query,f:"json",...o.toJSON()},c=r(a,n);return e(i.path+"/distance",c).then((({data:e})=>e&&e.distance))}const E=new m({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"}),h={UNIT_METER:9001,UNIT_GERMAN_METER:9031,UNIT_FOOT:9002,UNIT_SURVEY_FOOT:9003,UNIT_CLARKE_FOOT:9005,UNIT_FATHOM:9014,UNIT_NAUTICAL_MILE:9030,UNIT_SURVEY_CHAIN:9033,UNIT_SURVEY_LINK:9034,UNIT_SURVEY_MILE:9035,UNIT_KILOMETER:9036,UNIT_CLARKE_YARD:9037,UNIT_CLARKE_CHAIN:9038,UNIT_CLARKE_LINK:9039,UNIT_SEARS_YARD:9040,UNIT_SEARS_FOOT:9041,UNIT_SEARS_CHAIN:9042,UNIT_SEARS_LINK:9043,UNIT_BENOIT_1895A_YARD:9050,UNIT_BENOIT_1895A_FOOT:9051,UNIT_BENOIT_1895A_CHAIN:9052,UNIT_BENOIT_1895A_LINK:9053,UNIT_BENOIT_1895B_YARD:9060,UNIT_BENOIT_1895B_FOOT:9061,UNIT_BENOIT_1895B_CHAIN:9062,UNIT_BENOIT_1895B_LINK:9063,UNIT_INDIAN_FOOT:9080,UNIT_INDIAN_1937_FOOT:9081,UNIT_INDIAN_1962_FOOT:9082,UNIT_INDIAN_1975_FOOT:9083,UNIT_INDIAN_YARD:9084,UNIT_INDIAN_1937_YARD:9085,UNIT_INDIAN_1962_YARD:9086,UNIT_INDIAN_1975_YARD:9087,UNIT_FOOT_1865:9070,UNIT_RADIAN:9101,UNIT_DEGREE:9102,UNIT_ARCMINUTE:9103,UNIT_ARCSECOND:9104,UNIT_GRAD:9105,UNIT_GON:9106,UNIT_MICRORADIAN:9109,UNIT_ARCMINUTE_CENTESIMAL:9112,UNIT_ARCSECOND_CENTESIMAL:9113,UNIT_MIL6400:9114,UNIT_BRITISH_1936_FOOT:9095,UNIT_GOLDCOAST_FOOT:9094,UNIT_INTERNATIONAL_CHAIN:109003,UNIT_INTERNATIONAL_LINK:109004,UNIT_INTERNATIONAL_YARD:109001,UNIT_STATUTE_MILE:9093,UNIT_SURVEY_YARD:109002,UNIT_50KILOMETER_LENGTH:109030,UNIT_150KILOMETER_LENGTH:109031,UNIT_DECIMETER:109005,UNIT_CENTIMETER:109006,UNIT_MILLIMETER:109007,UNIT_INTERNATIONAL_INCH:109008,UNIT_US_SURVEY_INCH:109009,UNIT_INTERNATIONAL_ROD:109010,UNIT_US_SURVEY_ROD:109011,UNIT_US_NAUTICAL_MILE:109012,UNIT_UK_NAUTICAL_MILE:109013,UNIT_SQUARE_INCHES:"esriSquareInches",UNIT_SQUARE_FEET:"esriSquareFeet",UNIT_SQUARE_YARDS:"esriSquareYards",UNIT_ACRES:"esriAcres",UNIT_SQUARE_MILES:"esriSquareMiles",UNIT_SQUARE_MILLIMETERS:"esriSquareMillimeters",UNIT_SQUARE_CENTIMETERS:"esriSquareCentimeters",UNIT_SQUARE_DECIMETERS:"esriSquareDecimeters",UNIT_SQUARE_METERS:"esriSquareMeters",UNIT_ARES:"esriAres",UNIT_HECTARES:"esriHectares",UNIT_SQUARE_KILOMETERS:"esriSquareKilometers"};async function j(s,o,n){const i={};null!=o.sr&&"object"==typeof o.sr?i.sr=o.sr.wkid||JSON.stringify(o.sr):i.sr=o.sr,i.strings=JSON.stringify(o.strings);const a=o.conversionType||"mgrs";i.conversionType=E.toJSON(a),i.conversionMode=o.conversionMode;const c=t(s),m={...c.query,f:"json",...i},N=r(m,n);return e(c.path+"/fromGeoCoordinateString",N).then((({data:e})=>e.coordinates))}const d=new m({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});async function A(s,o,n){const c=(o=N.from(o)).toJSON(),m=function(e){const{geometries:t,deviationUnit:r,maxDeviation:s}=e.toJSON(),o={maxDeviation:s};return t&&t.length&&(o.geometries=JSON.stringify({geometryType:a(t[0]),geometries:t}),o.sr=JSON.stringify(t[0].spatialReference)),d.write(r,o,"deviationUnit"),o}(o),p=t(s),f={...p.query,f:"json",...m},u=c.geometries[0].spatialReference,I=r(f,n);return e(p.path+"/generalize",I).then((({data:e})=>(e.geometries||[]).map((e=>i(e).set({spatialReference:u})))))}async function J(s,n,c,m){const N=n[0].spatialReference,p=t(s),f={...p.query,f:"json",sr:JSON.stringify(N.toJSON()),geometries:JSON.stringify(o(n)),geometry:JSON.stringify({geometryType:a(c),geometry:c.toJSON()})},u=r(f,m);return e(p.path+"/intersect",u).then((({data:e})=>(e.geometries||[]).map((e=>i(e).set({spatialReference:N})))))}function k(s,o,n){const a=o.map((e=>e.toJSON())),c=o[0].spatialReference,m=t(s),N={...m.query,f:"json",sr:c.wkid??JSON.stringify(c.toJSON()),polygons:JSON.stringify(a)},p=r(N,n);return e(m.path+"/labelPoints",p).then((({data:e})=>(e.labelPoints||[]).map((e=>i(e).set({spatialReference:c})))))}const M=new m({preserveShape:"preserve-shape"});async function D(s,o,n){const i=function(e){const{polylines:t,lengthUnit:r,geodesic:s,calculationType:o}=e.toJSON(),n={};n.polylines=JSON.stringify(t);const i=e.polylines[0].spatialReference;return n.sr=i.wkid??JSON.stringify(i.toJSON()),r&&(n.lengthUnit=r),s&&(n.geodesic=s),o&&(n.calculationType=M.toJSON(o)),n}(o=f.from(o)),a=t(s),c={...a.query,f:"json",...i},m=r(c,n);return e(a.path+"/lengths",m).then((({data:e})=>e))}const L=new m({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),C=new m({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});async function G(s,o,n){const c=function(e){const{geometries:t,bevelRatio:r,offsetDistance:s,offsetHow:o,offsetUnit:n}=e.toJSON(),i={bevelRatio:r,offsetDistance:s};return t&&t.length&&(i.geometries=JSON.stringify({geometryType:a(t[0]),geometries:t}),i.sr=JSON.stringify(t[0].spatialReference)),o&&(i.offsetHow=L.toJSON(o)),n&&(i.offsetUnit=C.toJSON(n)),i}(o=u.from(o)),m=t(s),N={...m.query,f:"json",...c},p=o.geometries?.[0].spatialReference,f=r(N,n);return e(m.path+"/offset",f).then((({data:e})=>(e.geometries||[]).map((e=>i(e).set({spatialReference:p})))))}const q=new m({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});async function v(s,o,n){const i=function(e){const{geometries1:t,geometries2:r,relation:s,relationParameter:o}=e.toJSON(),n={};if(t&&t.length){n.geometries1=JSON.stringify({geometryType:a(t[0]),geometries:t});const e=t[0].spatialReference;n.sr=e.wkid??JSON.stringify(e)}return r&&r.length>0&&(n.geometries2=JSON.stringify({geometryType:a(r[0]),geometries:r})),s&&(n.relation=q.toJSON(s)),o&&(n.relationParam=o),n}(o=I.from(o)),c=t(s),m={...c.query,f:"json",...i},N=r(m,n);return e(c.path+"/relation",N).then((({data:e})=>e.relations))}async function w(s,o,n,c){const m=o.spatialReference,N=t(s),p={...N.query,f:"json",sr:JSON.stringify(m.toJSON()),target:JSON.stringify({geometryType:a(o),geometry:o.toJSON()}),reshaper:JSON.stringify(n.toJSON())},f=r(p,c);return e(N.path+"/reshape",f).then((({data:e})=>i(e.geometry).set({spatialReference:m})))}async function H(s,o,n){const i={};null!=o.sr&&"object"==typeof o.sr?i.sr=o.sr.wkid||JSON.stringify(o.sr):i.sr=o.sr,i.coordinates=JSON.stringify(o.coordinates);const a=o.conversionType||"mgrs";i.conversionType=E.toJSON(a),i.conversionMode=o.conversionMode,i.numOfDigits=o.numOfDigits,i.rounding=o.rounding,i.addSpaces=o.addSpaces;const c=t(s),m={...c.query,f:"json",...i},N=r(m,n);return e(c.path+"/toGeoCoordinateString",N).then((({data:e})=>e.strings))}const Y=new m({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});async function b(s,o,n){const i=function(e){const{extendHow:t,polylines:r,trimExtendTo:s}=e.toJSON(),o={};return o.extendHow=Y.toJSON(t),r&&r.length&&(o.polylines=JSON.stringify(r),o.sr=JSON.stringify(r[0].spatialReference)),s&&(o.trimExtendTo=JSON.stringify(s)),o}(o=T.from(o)),a=t(s),c={...a.query,f:"json",...i},m=o.sr,N=r(c,n);return e(a.path+"/trimExtend",N).then((({data:e})=>(e.geometries||[]).map((({paths:e})=>new _({spatialReference:m,paths:e})))))}async function x(s,n,a){const c=n[0].spatialReference,m=t(s),N={...m.query,f:"json",sr:JSON.stringify(c.toJSON()),geometries:JSON.stringify(o(n))},p=r(N,a);return e(m.path+"/union",p).then((({data:e})=>i(e.geometry).set({spatialReference:c})))}export{y as areasAndLengths,l as autoComplete,g as buffer,E as conversionTypeKebabDict,S as convexHull,O as densify,R as difference,U as distance,j as fromGeoCoordinateString,A as generalize,J as intersect,k as labelPoints,D as lengths,G as offset,v as relation,w as reshape,H as toGeoCoordinateString,b as trimExtend,x as union,h as units};
