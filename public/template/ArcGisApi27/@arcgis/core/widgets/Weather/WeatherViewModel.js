/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import r from"../../core/Accessor.js";import t from"../../core/Handles.js";import{L as s}from"../../chunks/Logger.js";import{d as o,c as n}from"../../chunks/maybe.js";import{watch as i,syncAndInitial as a}from"../../core/reactiveUtils.js";import{property as p}from"../../core/accessorSupport/decorators/property.js";import{subclass as h}from"../../core/accessorSupport/decorators/subclass.js";import c from"../../views/3d/environment/CloudyWeather.js";import m from"../../views/3d/environment/FoggyWeather.js";import l from"../../views/3d/environment/RainyWeather.js";import u from"../../views/3d/environment/SnowyWeather.js";import d from"../../views/3d/environment/SunnyWeather.js";import{v as y}from"../../chunks/weather.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../core/lang.js";import"../../chunks/typedArrayUtil.js";import"../../chunks/metadata.js";import"../../chunks/ObjectPool.js";import"../../chunks/ObservableBase.js";import"../../chunks/tracking.js";import"../../chunks/watch.js";import"../../chunks/ArrayPool.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../chunks/PooledArray.js";import"../../core/promiseUtils.js";import"../../core/Error.js";import"../../chunks/object.js";import"../../config.js";import"../../chunks/string.js";import"../../chunks/ensureType.js";import"../../core/JSONSupport.js";import"../../chunks/enumeration.js";import"../../chunks/jsonMap.js";var j,w;!function(e){e.Disabled="disabled",e.Ready="ready",e.Error="error"}(j||(j={})),function(e){e.NotVisible="not-visible",e.LocalScene="local-scene",e.NoAtmosphere="no-atmosphere",e.UnsupportedView="unsupported-view"}(w||(w={}));const v="esri.widgets.Weather.WeatherViewModel",g=s.getLogger(v);let k=class extends r{constructor(e){super(e),this.view=null,this._handles=new t,this._settingWeather=!1,this._weatherByType={sunny:new d,cloudy:new c,rainy:new l,snowy:new u,foggy:new m}}initialize(){this._handles.add([i((()=>this.current),(e=>{this._settingWeather||null==e||(this._weatherByType={...this._weatherByType,[e.type]:e})}),a)])}destroy(){this._handles=o(this._handles)}get state(){const e=this.view;return null!=e&&e.ready?null!=this.error?this.error===w.NotVisible?j.Ready:j.Error:j.Ready:j.Disabled}get error(){const e=this.view;return null!=e&&e.ready?"3d"!==e.type?w.UnsupportedView:"local"===e.viewingMode?w.LocalScene:e.environment.atmosphereEnabled?e.environmentManager.weatherVisible?null:w.NotVisible:w.NoAtmosphere:null}get current(){return this._environment?.weather??this._weatherByType.sunny}set current(e){n(this._environment,(r=>r.weather=e))}get test(){return{...this._weatherByType}}get _environment(){const e=this.view;return null!=e&&"3d"===e.type?e.environment:null}setWeatherByType(e){if(!y(e,g))return;const r=this._environment;null!=r&&(this._settingWeather=!0,r.weather=this._weatherByType[e],this._settingWeather=!1)}setSnowCoverEnabled(e){const r=this.current;"snowCover"in r&&(r.snowCover=e?"enabled":"disabled")}};e([p()],k.prototype,"view",void 0),e([p()],k.prototype,"state",null),e([p()],k.prototype,"error",null),e([p()],k.prototype,"current",null),e([p()],k.prototype,"_environment",null),k=e([h(v)],k);const f=k;export{j as W,w as a,f as default};
