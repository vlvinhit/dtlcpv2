/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import t from"../PopupTemplate.js";import s from"../core/Error.js";import{L as r}from"../chunks/Logger.js";import{M as i}from"../chunks/MultiOriginJSONSupport.js";import{eachAlways as o,createAbortError as a,throwIfAbortError as n}from"../core/promiseUtils.js";import{watch as l}from"../core/reactiveUtils.js";import{property as p}from"../core/accessorSupport/decorators/property.js";import{m,I as u}from"../chunks/ensureType.js";import{i as c,h}from"../chunks/typedArrayUtil.js";import{e as f}from"../chunks/enumeration.js";import{subclass as d}from"../core/accessorSupport/decorators/subclass.js";import y from"./Layer.js";import{A as g}from"../chunks/ArcGISService.js";import{BlendLayer as x}from"./mixins/BlendLayer.js";import{CustomParametersMixin as j}from"./mixins/CustomParametersMixin.js";import{B as b,ImageryTileMixin as I,F as w}from"./mixins/ImageryTileMixin.js";import{O as S}from"../chunks/OperationalLayer.js";import{PortalLayer as k}from"./mixins/PortalLayer.js";import{RefreshableLayer as R}from"./mixins/RefreshableLayer.js";import{ScaleRangeLayer as v}from"./mixins/ScaleRangeLayer.js";import{TemporalLayer as T}from"./mixins/TemporalLayer.js";import{a as C}from"../chunks/commonProperties2.js";import _ from"./support/Field.js";import P,{i as F}from"./support/RasterFunction.js";import"../geometry.js";import M from"./support/LOD.js";import O,{R as D}from"./support/RasterInfo.js";import L from"./support/TileInfo.js";import{b as A,g as U,i as E,p as B,a as N,c as z,e as V,T as H,f as J,h as G,j as q}from"../chunks/RasterSymbolizer.js";import{i as W,r as $,P as Y,G as X}from"../chunks/utils8.js";import K from"../rest/support/FeatureSet.js";import Q from"../geometry/SpatialReference.js";import Z from"../geometry/Extent.js";import ee from"../geometry/Point.js";import{s as te,f as se}from"../chunks/vectorFieldUtils.js";import{e as re,d as ie}from"../chunks/stretchUtils.js";import{i as oe,g as ae,a as ne,b as le,c as pe,d as me}from"../chunks/xmlUtilities.js";import{g as ue}from"../chunks/maybe.js";import{urlToObject as ce}from"../core/urlUtils.js";import{T as he}from"../chunks/TilemapCache.js";import{f as fe}from"../chunks/fetchRasterInfo.js";import de from"./support/PixelBlock.js";import{c as ye,g as ge}from"../chunks/rasterFunctionHelper.js";import{createPopupTemplate as xe}from"../support/popupUtils.js";import"../core/Clonable.js";import"../core/Accessor.js";import"../core/Handles.js";import"../chunks/get.js";import"../chunks/utils.js";import"../core/lang.js";import"../chunks/metadata.js";import"../chunks/ObjectPool.js";import"../chunks/ObservableBase.js";import"../chunks/tracking.js";import"../chunks/watch.js";import"../chunks/ArrayPool.js";import"../core/scheduling.js";import"../chunks/nextTick.js";import"../chunks/PooledArray.js";import"../config.js";import"../chunks/object.js";import"../chunks/string.js";import"../core/Collection.js";import"../core/Evented.js";import"../chunks/shared.js";import"../chunks/SimpleObservable.js";import"../core/JSONSupport.js";import"../core/accessorSupport/decorators/cast.js";import"../chunks/reader.js";import"../chunks/writer.js";import"./support/fieldUtils.js";import"../chunks/arcadeOnDemand.js";import"../geometry/Geometry.js";import"../chunks/unitUtils.js";import"../chunks/jsonMap.js";import"../geometry/support/webMercatorUtils.js";import"../geometry/Multipoint.js";import"../chunks/zmUtils.js";import"../geometry/Polygon.js";import"../chunks/extentUtils.js";import"../chunks/aaBoundingRect.js";import"../chunks/mathUtils.js";import"../chunks/vec3.js";import"../chunks/vec3f64.js";import"../chunks/common.js";import"../chunks/vec4.js";import"../geometry/Polyline.js";import"../chunks/typeUtils.js";import"../geometry/support/jsonUtils.js";import"../popup/content.js";import"../popup/content/AttachmentsContent.js";import"../popup/content/Content.js";import"../popup/content/CustomContent.js";import"../popup/content/ExpressionContent.js";import"../popup/ElementExpressionInfo.js";import"../popup/content/FieldsContent.js";import"../popup/FieldInfo.js";import"../popup/support/FieldInfoFormat.js";import"../chunks/date.js";import"../chunks/locale.js";import"../chunks/datetime.js";import"../chunks/number.js";import"../popup/content/MediaContent.js";import"../popup/content/BarChartMediaInfo.js";import"../popup/content/mixins/ChartMediaInfo.js";import"../popup/content/mixins/MediaInfo.js";import"../popup/content/support/ChartMediaInfoValue.js";import"../popup/content/support/ChartMediaInfoValueSeries.js";import"../chunks/chartMediaInfoUtils.js";import"../popup/content/ColumnChartMediaInfo.js";import"../popup/content/ImageMediaInfo.js";import"../popup/content/support/ImageMediaInfoValue.js";import"../popup/content/LineChartMediaInfo.js";import"../popup/content/PieChartMediaInfo.js";import"../popup/content/RelationshipContent.js";import"../popup/support/RelatedRecordsInfoFieldOrder.js";import"../popup/content/TextContent.js";import"../popup/ExpressionInfo.js";import"../popup/LayerOptions.js";import"../popup/RelatedRecordsInfo.js";import"../support/actions/ActionBase.js";import"../core/Identifiable.js";import"../support/actions/ActionButton.js";import"../support/actions/ActionToggle.js";import"../request.js";import"../kernel.js";import"../core/Loadable.js";import"../core/Promise.js";import"../chunks/arcgisLayerUrl.js";import"../chunks/persistableUrlUtils.js";import"../chunks/jsonUtils.js";import"../chunks/parser.js";import"../chunks/colorUtils.js";import"../chunks/screenUtils.js";import"../chunks/mat4.js";import"../chunks/_commonjsHelpers.js";import"../rasterRenderers.js";import"../renderers/ClassBreaksRenderer.js";import"../symbols.js";import"../symbols/CIMSymbol.js";import"../symbols/Symbol.js";import"../Color.js";import"../symbols/ExtrudeSymbol3DLayer.js";import"../symbols/Symbol3DLayer.js";import"../chunks/utils2.js";import"../symbols/edges/Edges3D.js";import"../chunks/materialUtils.js";import"../chunks/opacityUtils.js";import"../symbols/edges/SketchEdges3D.js";import"../symbols/edges/SolidEdges3D.js";import"../chunks/Symbol3DMaterial.js";import"../symbols/FillSymbol.js";import"../symbols/SimpleLineSymbol.js";import"../symbols/LineSymbol.js";import"../symbols/LineSymbolMarker.js";import"../chunks/lineMarkers.js";import"../symbols/FillSymbol3DLayer.js";import"../symbols/patterns/LineStylePattern3D.js";import"../symbols/patterns/StylePattern3D.js";import"../chunks/utils3.js";import"../chunks/colors.js";import"../chunks/symbolLayerUtils3D.js";import"../chunks/aaBoundingBox.js";import"../symbols/Font.js";import"../symbols/IconSymbol3DLayer.js";import"../symbols/LabelSymbol3D.js";import"../symbols/Symbol3D.js";import"../chunks/collectionUtils.js";import"../portal/Portal.js";import"../portal/PortalQueryParams.js";import"../portal/PortalQueryResult.js";import"../portal/PortalUser.js";import"../portal/PortalFolder.js";import"../portal/PortalGroup.js";import"../symbols/LineSymbol3DLayer.js";import"../symbols/LineStyleMarker3D.js";import"../symbols/ObjectSymbol3DLayer.js";import"../symbols/PathSymbol3DLayer.js";import"../symbols/TextSymbol3DLayer.js";import"../symbols/WaterSymbol3DLayer.js";import"../symbols/support/StyleOrigin.js";import"../chunks/Thumbnail.js";import"../chunks/calloutUtils.js";import"../symbols/callouts/Callout3D.js";import"../symbols/callouts/LineCallout3D.js";import"../symbols/support/Symbol3DVerticalOffset.js";import"../symbols/LineSymbol3D.js";import"../symbols/MarkerSymbol.js";import"../symbols/MeshSymbol3D.js";import"../symbols/PictureFillSymbol.js";import"../chunks/urlUtils.js";import"../symbols/PictureMarkerSymbol.js";import"../symbols/PointSymbol3D.js";import"../symbols/PolygonSymbol3D.js";import"../symbols/SimpleFillSymbol.js";import"../symbols/SimpleMarkerSymbol.js";import"../symbols/TextSymbol.js";import"../symbols/WebStyleSymbol.js";import"../renderers/Renderer.js";import"../renderers/support/AuthoringInfo.js";import"../renderers/support/AuthoringInfoVisualVariable.js";import"../chunks/colorRamps.js";import"../rest/support/AlgorithmicColorRamp.js";import"../rest/support/ColorRamp.js";import"../rest/support/MultipartColorRamp.js";import"../renderers/mixins/VisualVariablesMixin.js";import"../renderers/visualVariables/ColorVariable.js";import"../renderers/visualVariables/VisualVariable.js";import"../chunks/LegendOptions.js";import"../renderers/visualVariables/support/ColorStop.js";import"../renderers/visualVariables/OpacityVariable.js";import"../renderers/visualVariables/support/OpacityStop.js";import"../renderers/visualVariables/RotationVariable.js";import"../renderers/visualVariables/SizeVariable.js";import"../renderers/visualVariables/support/SizeStop.js";import"../chunks/visualVariableUtils.js";import"../Graphic.js";import"../chunks/compilerUtils.js";import"../chunks/lengthUtils.js";import"../renderers/support/ClassBreakInfo.js";import"../chunks/commonProperties.js";import"../symbols/support/jsonUtils.js";import"../chunks/layerUtils.js";import"../renderers/FlowRenderer.js";import"../renderers/RasterColormapRenderer.js";import"../renderers/support/ColormapInfo.js";import"../chunks/colorRampUtils.js";import"../chunks/colorUtils2.js";import"../renderers/RasterShadedReliefRenderer.js";import"../renderers/RasterStretchRenderer.js";import"../chunks/stretchRendererUtils.js";import"../renderers/UniqueValueRenderer.js";import"../chunks/diffUtils.js";import"../renderers/support/UniqueValue.js";import"../renderers/support/UniqueValueClass.js";import"../renderers/support/UniqueValueGroup.js";import"../renderers/support/UniqueValueInfo.js";import"../chunks/styleUtils.js";import"../chunks/featureFlags.js";import"../renderers/VectorFieldRenderer.js";import"../geometry/support/normalizeUtils.js";import"../chunks/normalizeUtilsCommon.js";import"../chunks/simplify.js";import"../chunks/utils4.js";import"../chunks/utils5.js";import"../chunks/utils6.js";import"../chunks/asyncUtils.js";import"../symbols/support/cimSymbolUtils.js";import"../chunks/utils7.js";import"../chunks/assets.js";import"../chunks/LRUCache.js";import"../chunks/MemCache.js";import"../chunks/pixelRangeUtils.js";import"./support/DimensionalDefinition.js";import"./support/MultidimensionalSubset.js";import"../chunks/RasterJobHandler.js";import"../core/workers/workers.js";import"../core/workers/Connection.js";import"../chunks/Queue.js";import"../core/workers/RemoteClient.js";import"../intl.js";import"../chunks/messages.js";import"../chunks/multidimensionalUtils.js";import"../chunks/RawBlockCache.js";import"../chunks/rasterProjectionHelper.js";import"../chunks/pe.js";import"../geometry/projection.js";import"../chunks/geodesicConstants.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/support/GeographicTransformationStep.js";import"../chunks/zscale.js";import"../chunks/rasterRendererHelper.js";import"../chunks/rasterRendererChecks.js";import"../chunks/generateRendererUtils.js";import"../rest/support/ImageHistogramParameters.js";import"../TimeExtent.js";import"../chunks/timeUtils.js";import"../chunks/deprecate.js";import"./support/MosaicRule.js";import"../chunks/dataUtils.js";import"../portal/PortalItem.js";import"../portal/PortalItemResource.js";import"../portal/PortalRating.js";import"../chunks/portalItemUtils.js";import"../TimeInterval.js";import"./support/TimeInfo.js";import"../chunks/TimeReference.js";import"../support/timeUtils.js";import"../chunks/ElevationInfo.js";import"../chunks/unitConversionUtils.js";import"../chunks/domains.js";import"./support/CodedValueDomain.js";import"./support/Domain.js";import"./support/InheritedDomain.js";import"./support/RangeDomain.js";import"../chunks/fieldType.js";import"./support/RasterBandInfo.js";import"./support/RasterSensorInfo.js";import"../chunks/TileKey.js";import"../chunks/ByteSizeUnit.js";import"./support/rasterFunctionConstants.js";class je{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),s=3&t.getUint8(0);if(3!==s)return{header:{version:s},recordSet:null};const r=t.getUint32(4,!0),i=t.getUint16(8,!0),o=t.getUint16(10,!0),a={version:s,recordCount:r,headerByteCount:i,recordByteCount:o};let n=32;const l=[],p=[];let m;if(3===s){for(;13!==t.getUint8(n);)m=String.fromCharCode(t.getUint8(n+11)).trim(),l.push({name:A(new Uint8Array(e,n,11)),type:m,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(m)],length:t.getUint8(n+16)}),n+=32;if(n+=1,l.length>0)for(;p.length<r&&e.byteLength-n>o;){const s=[];32===t.getUint8(n)?(n+=1,l.forEach((t=>{if("C"===t.type)s.push(A(new Uint8Array(e,n,t.length)).trim());else if("N"===t.type)s.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,n,t.length)).trim(),10));else if("F"===t.type)s.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,n,t.length)).trim()));else if("D"===t.type){const r=String.fromCharCode.apply(null,new Uint8Array(e,n,t.length)).trim();s.push(new Date(parseInt(r.substring(0,4),10),parseInt(r.substring(4,6),10)-1,parseInt(r.substring(6,8),10)))}n+=t.length})),p.push(s)):n+=o}}const u=function(e){const t=e.fields,s=e.records,r=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",i=[{name:r,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),o=i.map((e=>e.name)),a=[];let n=0,l=0;return s.forEach((e=>{const t={};for(t[r]=n++,l=1;l<o.length;l++)t[o[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:i,features:a}}({fields:l,records:p});return{header:a,fields:l,records:p,recordSet:u}}}const be=new Map;be.set("int16","esriFieldTypeSmallInteger"),be.set("int32","esriFieldTypeInteger"),be.set("int64","esriFieldTypeInteger"),be.set("float32","esriFieldTypeSingle"),be.set("float64","esriFieldTypeDouble"),be.set("text","esriFieldTypeString");let Ie=class extends b{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:e?.signal});if(!this._validateHeader(t))throw new s("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:r,rasterInfo:i}=this._parseHeader(t);if("thematic"===i.dataType){const e=await this._fetchAuxiliaryInformation();i.attributeTable=e}this._set("storageInfo",r),this._set("rasterInfo",i),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,s,r={}){const{transposeInfo:i}=this.rasterInfo.storageInfo,{transposedVariableName:o}=r,a=!(!i||!o),n=a?0:this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(n<0)return null;const l=this._buildCacheFilePath(n,t,s,r.multidimensionalDefinition,o),p=this._getIndexRecordFromBundle(t,s,a),m=await this.request(l,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:r.signal});if(!m)return null;const u=new Uint8Array(m.data),c=this._getTileEndAndContentType(u,p);if(0===c.recordSize)return null;const h=await this.request(l,{range:{from:c.position,to:c.position+c.recordSize},responseType:"array-buffer",signal:r.signal});if(!h)return null;const[f,d]=this._getTileSize(a);return this.decodePixelBlock(h.data,{width:f,height:d,planes:null,pixelType:null,returnInterleaved:a})}_validateHeader(e){return e&&"RasterInfo"===e.type&&!["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"].some((t=>!e[t]))}_parseHeader(e){const t=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:s,histograms:r,colormap:i,blockWidth:o,blockHeight:a,firstPyramidLevel:n,maximumPyramidLevel:l}=e,p=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),m=e.extent.spatialReference,u=e.geodataXform?.spatialReference,c=new Q(m?.wkid||m?.wkt?m:u);let h=new Z({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:c});const f=new ee({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:c}),d=Math.round((h.xmax-h.xmin)/f.x),y=Math.round((h.ymax-h.ymin)/f.y),g=this._parseTransform(e.geodataXform),x=g?h:null;g&&(h=g.forwardTransform(h),f.x=(h.xmax-h.xmin)/d,f.y=(h.ymax-h.ymin)/y);const j=e.properties??{},b=e.format.toLowerCase().replace("cache/",""),I=new ee(e.origin.x,e.origin.y,c);let w,S,k,R;if(i&&i.colors)for(w=[],S=0;S<i.colors.length;S++)k=i.colors[S],R=i.values?i.values[S]:S,w.push([R,255&k,k<<16>>>24,k<<8>>>24,k>>>24]);const v=e.LODInfos,T=[];for(S=0;S<v.levels.length;S++)T.push(new M({level:v.levels[S],resolution:v.resolutions[S],scale:96/.0254*v.resolutions[S]}));const C=new L({dpi:96,lods:T,format:b,origin:I,size:[o,a],spatialReference:c}),_={recordSize:8,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*8+64},P=[{maxCol:Math.ceil(d/o)-1,maxRow:Math.ceil(y/a)-1,minCol:0,minRow:0}];let F=2;if(l>0)for(S=0;S<l;S++)P.push({maxCol:Math.ceil(d/F/o)-1,maxRow:Math.ceil(y/F/a)-1,minCol:0,minRow:0}),F*=2;const A=e.mdInfo;let U=null;if(A&&j._yxs){const e=j._yxs;U={packetSize:e.PacketSize,tileSize:[e.TileXSize,e.TileYSize]}}return{storageInfo:_,rasterInfo:new O({width:d,height:y,pixelType:t,bandCount:s,extent:h,nativeExtent:x,transform:g,spatialReference:c,pixelSize:f,keyProperties:j,statistics:p,histograms:r,multidimensionalInfo:A,colormap:w,storageInfo:new D({blockWidth:o,blockHeight:a,pyramidBlockWidth:o,pyramidBlockHeight:a,origin:I,tileInfo:C,transposeInfo:U,firstPyramidLevel:n,maximumPyramidLevel:l,blockBoundary:P})})}}_parseTransform(e){if(!W(e))throw new s("cloudraster:open","the data contains unsupported geodata transform types");const t=$(e);if("identity"===t.type)return null;if("polynomial"!==t.type||!t.forwardCoefficients?.length||!t.inverseCoefficients?.length)throw new s("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return t}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),s=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),r=await Promise.all([t,s]);let i;if(r[0]){let e=r[0].fields;const t=r[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":be.get(e.type),name:e.name,alias:e.alias||e.name})));const s=t.map((e=>({attributes:e})));e&&t&&(i={fields:e,features:s})}}return!i&&r[1]&&(i=je.parse(r[1]).recordSet),K.fromJSON(i)}_buildCacheFilePath(e,t,s,r,i){const o=this._getPackageSize(!!i),a=Math.floor(t/o)*o,n=Math.floor(s/o)*o,l="R"+this._toHexString4(a)+"C"+this._toHexString4(n);let p="L";p+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:m}=this.rasterInfo,u=r?.[0];if(null==m||!u)return`${this.url}/_alllayers/${p}/${l}.bundle`;let c="_yxs";if(!i){c=m.variables.find((e=>e.name===u.variableName)).dimensions[0].values.indexOf(u.values[0]).toString(16);const e=4-c.length;for(let t=0;t<e;t++)c="0"+c;c="S"+c}const h=this._getVariableFolderName(i||u.variableName);return`${this.url}/_alllayers/${h}/${c}/${p}/${l}.bundle`}_getPackageSize(e=!1){const{transposeInfo:t}=this.rasterInfo.storageInfo;return e&&null!=t?t.packetSize??0:this.storageInfo.packetSize}_getTileSize(e=!1){const{storageInfo:t}=this.rasterInfo,{transposeInfo:s}=t;return e&&null!=s?s.tileSize:t.tileInfo.size}_getVariableFolderName(e){return""===(e=e.trim())?"_v":e.replaceAll(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(e,t,s=!1){const r=this._getPackageSize(s),i=r*(e%r)+t%r;if(i<0)throw new Error("Invalid level / row / col");return 20+i*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const s=e.subarray(t,t+8);let r,i=0;for(r=0;r<5;r++)i|=(255&s[r])<<8*r;const o=0xffffffffff&i;for(i=0,r=5;r<8;r++)i|=(255&s[r])<<8*(r-5);return{position:o,recordSize:0xffffffffff&i}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t}return t}};e([p({readOnly:!0})],Ie.prototype,"storageInfo",void 0),e([p({type:String,json:{write:!0}})],Ie.prototype,"datasetFormat",void 0),Ie=e([d("esri.layers.support.rasterDatasets.CloudRaster")],Ie);const we=Ie;let Se=class extends b{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.data=null}async open(e){await this.init();const t=this.data,{pixelBlock:s,statistics:r,histograms:i,name:o,keyProperties:a,nativeExtent:n,transform:l}=this.data,{width:p,height:m,pixelType:u}=s,c=t.extent??new Z({xmin:-.5,ymin:.5,xmax:p-.5,ymax:m-.5,spatialReference:new Q({wkid:3857})}),h=t.isPseudoSpatialReference??!t.extent,f={x:c.width/p,y:c.height/m},d=new O({width:p,height:m,pixelType:u,extent:c,nativeExtent:n,transform:l,pixelSize:f,spatialReference:c.spatialReference,bandCount:s.pixels.length,keyProperties:a||{},statistics:r,isPseudoSpatialReference:h,histograms:i});this.createRemoteDatasetStorageInfo(d,512,512),this._set("rasterInfo",d),this.updateTileInfo(),await this._buildInMemoryRaster(s,{width:512,height:512},e),this.datasetName=o,this.url="/InMemory/"+o}fetchRawTile(e,t,s,r={}){const i=this._pixelBlockTiles.get(`${e}/${t}/${s}`);return Promise.resolve(i)}async _buildInMemoryRaster(e,t,r){const i=this.rasterInfo.storageInfo.maximumPyramidLevel,a=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:i},r):Promise.resolve(te(e,t,i)),n=null!=this.rasterInfo.statistics,l=null!=this.rasterInfo.histograms,p=n?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},r):Promise.resolve(re(e)),m=await o([a,p]);if(!m[0].value&&m[1].value)throw new s("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=m[0].value,n||(this.rasterInfo.statistics=m[1].value?.statistics),l||(this.rasterInfo.histograms=m[1].value?.histograms)}};e([p({type:String,json:{write:!0}})],Se.prototype,"datasetFormat",void 0),e([p()],Se.prototype,"data",void 0),Se=e([d("esri.layers.support.rasterDatasets.InMemoryRaster")],Se);const ke=Se;function Re(e,t){if(!e||!t)return null;const s=[];for(let r=0;r<e.length;r++)s.push(e[r]),s.push(t[r]);return s}function ve(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new Q({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const s=e.indexOf("VERTCS"),r=e.indexOf("PROJCS"),i=r>-1?r:e.indexOf("GEOGCS");if(-1===i)return null;const o=e.slice(i,e.lastIndexOf("]",s)+1).trim(),a=e.slice(s,e.lastIndexOf("]")).trim();t=Te(o);const n=new Q(t?{wkid:t}:{wkt:o}),l=Te(a);return l&&(n.vcsWkid=l),n}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=Te(e),new Q(0!==t?{wkid:t}:{wkt:e})):null}function Te(e){const t=e.replaceAll("]","[").replaceAll('"',"").split("[").map((e=>e.trim())).filter((e=>""!==e)),s=t[t.length-1].split(","),r=s[0]?.toLowerCase();if(("epsg"===r||"esri"===r)&&e.endsWith('"]]')){const e=Number(s[1]);if(!isNaN(e)&&0!==e)return e}return 0}function Ce(e){if("pamdataset"!==e?.documentElement.tagName?.toLowerCase())return{};const t={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(oe(e,"SRS")){if(!t.spatialReference){const s=ae(e);t.spatialReference=ve(s)}}else if(oe(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:s,transform:r}=function(e){const t=le(e,"GeodataXform"),s=ve(pe(t,"SpatialReference/WKID")||ae(t,"SpatialReference/WKT"));if("typens:PolynomialXform"!==t.getAttribute("xsi:type"))return{spatialReference:s,transform:null};const r=pe(t,"PolynomialOrder")??1,i=me(t,"CoeffX/Double"),o=me(t,"CoeffY/Double"),a=me(t,"InverseCoeffX/Double"),n=me(t,"InverseCoeffY/Double"),l=Re(i,o),p=Re(a,n);return{spatialReference:s,transform:l&&p&&l.length&&p.length?new Y({spatialReference:s,polynomialOrder:r,forwardCoefficients:l,inverseCoefficients:p}):null}}(e);t.transform=r,t.spatialReference||(t.spatialReference=s)}else ne(e,"MDI").forEach((e=>t.metadata[e.getAttribute("key")]=ae(e)));else if(oe(e,"PAMRasterBand")){const s=function(e){const t=pe(e,"NoDataValue"),s=le(e,"Histograms/HistItem"),r=pe(s,"HistMin"),i=pe(s,"HistMax"),o=pe(s,"BucketCount"),a=ae(s,"HistCounts")?.split("|").map((e=>Number(e)));let n,l,p,m;ne(e,"Metadata/MDI").forEach((e=>{const t=Number(e.textContent??e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":n=t;break;case"STATISTICS_MAXIMUM":l=t;break;case"STATISTICS_MEAN":p=t;break;case"STATISTICS_STDDEV":m=t}}));const u=pe(e,"Metadata/SourceBandIndex");return{noDataValue:t,histogram:a?.length&&null!=r&&null!=i?{min:r,max:i,size:o||a.length,counts:a}:null,sourceBandIndex:u,statistics:null!=n&&null!=l?{min:n,max:l,avg:p,stddev:m}:null}}(e);null!=s.sourceBandIndex&&null==t.rasterBands[s.sourceBandIndex]?t.rasterBands[s.sourceBandIndex]=s:t.rasterBands.push(s)}}));const s=t.rasterBands;if(s.length){const e=!!s[0].statistics;t.statistics=e?s.map((e=>e.statistics)).filter(c):null;const r=!!s[0].histogram;t.histograms=r?s.map((e=>e.histogram)).filter(c):null}return t}let _e=class extends b{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:s,statistics:r,histograms:i,transform:o}=await this._fetchAuxiliaryData(e);const a=!s;a&&(s=new Q({wkid:3857})),i?.length&&null==r&&(r=ie(i));const{width:n,height:l}=t;let p=new Z({xmin:-.5,ymin:.5-l,xmax:n-.5,ymax:.5,spatialReference:s});const m=o?o.forwardTransform(p):p;let u=!0;if(o){const e=o.forwardCoefficients;u=e&&0===e[1]&&0===e[2],u&&(o=null,p=m)}const c=new ke({data:{extent:m,nativeExtent:p,transform:o,pixelBlock:t,statistics:r,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await c.open(),c.data=null,this._set("rasterInfo",c.rasterInfo),this._inMemoryRaster=c}fetchRawTile(e,t,s,r={}){return this._inMemoryRaster.fetchRawTile(e,t,s,r)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:e?.signal}),r=U(t).toUpperCase();if("JPG"!==r&&"PNG"!==r&&"GIF"!==r&&"BMP"!==r)throw new s("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",r);const i=r.toLowerCase(),o="gif"===i||"bmp"===i||!h("ios"),a=await this.decodePixelBlock(t,{format:i,useCanvas:o,hasNoZlibMask:!0});if(null==a)throw new s("image-aux-raster:open","the data cannot be decoded");return a}async _fetchAuxiliaryData(e){const t=e?.signal,s=this.ioConfig.skipExtensions??[],r=s.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:t}),i=this.datasetFormat,n="JPG"===i?"jgw":"PNG"===i?"pgw":"BMP"===i?"bpw":null,l=n&&s.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:t}),p=await o([r,l]);if(t?.aborted)throw a();const m=Ce(p[0].value?.data);if(!m.transform){const e=p[1].value?p[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;m.transform=6===e?.length?new Y({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return m}};e([p({type:String,json:{write:!0}})],_e.prototype,"datasetFormat",void 0),_e=e([d("esri.layers.support.rasterDatasets.ImageAuxRaster")],_e);const Pe=_e;let Fe=class extends b{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async open(e){await this.init();const t=e&&e.signal,r=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});r.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const i=r.data;if(this.sourceJSON=i,!i)throw new s("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!i.tileInfo)throw new s("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo(),this.tileType=i.cacheType,null==this.tileType&&(["jpg","jpeg","png","png8","png24","png32","mixed"].includes(i.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===i.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=i.name?.slice(i.name.indexOf("/")+1)??"";const o=await this._fetchRasterInfo({signal:t});if(null==o)throw new s("image-server-raster:open","cannot initialize image service");const a="Map"===this.tileType?function(e,t){if(!e)return null;const{minScale:s,maxScale:r,minLOD:i,maxLOD:o}=t;if(null!=i&&null!=o)return L.fromJSON({...e,lods:e.lods.filter((({level:e})=>null!=e&&e>=i&&e<=o))});if(0!==s&&0!==r){const t=e=>Math.round(1e4*e)/1e4,i=s?t(s):1/0,o=r?t(r):-1/0;return L.fromJSON({...e,lods:e.lods.filter((e=>{const s=t(e.scale);return s<=i&&s>=o}))})}return L.fromJSON(e)}(i.tileInfo,i):L.fromJSON(i.tileInfo);ue(a);const[n,l]=this._computeMinMaxLOD(o,a),{extent:p,pixelSize:m}=o,u=.5/o.width*m.x,c=Math.max(m.x,m.y),{lods:h}=a;("Map"!==this.tileType&&0!==i.maxScale||Math.abs(m.x-m.y)>u||!h.some((e=>Math.abs(e.resolution-c)<u)))&&(m.x=m.y=n.resolution,o.width=Math.ceil((p.xmax-p.xmin)/m.x-.1),o.height=Math.ceil((p.ymax-p.ymin)/m.y-.1));const f=n.level-l.level,[d,y]=a.size,g=[],x=[];h.forEach(((e,t)=>{e.level>=l.level&&e.level<=n.level&&g.push({x:e.resolution,y:e.resolution}),t<h.length-1&&x.push(Math.round(10*e.resolution/h[t+1].resolution)/10)})),g.sort(((e,t)=>e.x-t.x));const j=this.computeBlockBoundary(p,d,y,a.origin,g,f),b=g.length>1?g.slice(1):null;let I;i.transposeInfo&&(I={tileSize:[i.transposeInfo.rows,i.transposeInfo.cols],packetSize:o.keyProperties?._yxs.PacketSize??0});const w=x.length<=1||x.length>=3&&x.slice(0,x.length-1).every((e=>e===x[0]))?x[0]??2:Math.round(10/(l.resolution/n.resolution)**(-1/f))/10;if(o.storageInfo=new D({blockWidth:a.size[0],blockHeight:a.size[1],pyramidBlockWidth:a.size[0],pyramidBlockHeight:a.size[1],pyramidResolutions:b,pyramidScalingFactor:w,compression:a.format,origin:a.origin,firstPyramidLevel:1,maximumPyramidLevel:f,tileInfo:a,transposeInfo:I,blockBoundary:j}),this._fixGCSShift(o),this._set("rasterInfo",o),i.capabilities.toLowerCase().includes("tilemap")){const e={tileInfo:o.storageInfo.tileInfo,parsedUrl:ce(this.url),url:this.url,tileServers:[]};this._tilemapCache=new he({layer:e})}}async fetchRawTile(e,t,s,r={}){const{storageInfo:i,extent:o}=this.rasterInfo,{transposeInfo:a}=i,n=null!=a&&!!r.transposedVariableName;if(this._slices&&!n&&null==r.sliceId)return null;const l=n?0:i.maximumPyramidLevel-e+this._levelOffset,p=`${this.url}/tile/${l}/${t}/${s}`,m=this._slices?n?{variable:r.transposedVariableName}:{sliceId:r.sliceId||0}:null,{data:u}=await this.request(p,{query:m,responseType:"array-buffer",signal:r.signal});if(!u)return null;const c=n?a.tileSize:i.tileInfo.size,h=await this.decodePixelBlock(u,{width:c[0],height:c[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnInterleaved:n,noDataValue:this.rasterInfo.noDataValue});if(null==h)return null;const f=i.blockBoundary[e];if("jpg"!==i.compression||s>f.minCol&&s<f.maxCol&&t>f.minRow&&t<f.maxRow)return h;const{origin:d,blockWidth:y,blockHeight:g}=i,{x,y:j}=this.getPyramidPixelSize(e),b=Math.round((o.xmin-d.x)/x)%y,I=Math.round((o.xmax-d.x)/x)%y||y,w=Math.round((d.y-o.ymax)/j)%g,S=Math.round((d.y-o.ymin)/j)%g||g,k=s===f.minCol?b:0,R=t===f.minRow?w:0,v=s===f.maxCol?I:y,T=t===f.maxRow?S:g;return se(h,{x:k,y:R},{width:v-k,height:T-R}),h}getSliceIndex(e){if(!this._slices||null==e||0===e.length)return null;const t=e;for(let e=0;e<this._slices.length;e++){const s=this._slices[e].multidimensionalDefinition;if(s.length===t.length&&!s.some((e=>{const s=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));return!s||(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(s.values[0])?`${s.values[0][0]}-${s.values[0][1]}`:s.values[0])})))return e}return null}async fetchVariableStatisticsHistograms(e,t){const s=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.statistics)),r=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.histograms)),i=await Promise.all([s,r]);return i[0]&&i[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:i[0]||null,histograms:i[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(e,0,t.datumTransformation);if(null===s)return null;let r=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let o=i-r+this._levelOffset;const a=s.srcLocation;for(;o>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(o,s.row,s.col,t))break}catch{}if(o--,r++,s=this.identifyPixelLocation(a,r,t.datumTransformation),null===s)return null}return-1===o||null==s?null:r}async _fetchRasterInfo(e){const t=this.sourceJSON;if("Map"===this.tileType){const e=t.fullExtent||t.extent,s=Math.ceil((e.xmax-e.xmin)/t.pixelSizeX-.1),r=Math.ceil((e.ymax-e.ymin)/t.pixelSizeY-.1),i=Q.fromJSON(t.spatialReference||e.spatialReference),o=new ee({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:i});return new O({width:s,height:r,bandCount:3,extent:Z.fromJSON(e),spatialReference:i,pixelSize:o,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:s}=e,r=fe(this.url,this.sourceJSON,{signal:s,query:this.ioConfig.customFetchParameters}),i=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:s}).then((e=>e.data&&e.data.slices)).catch((()=>null)):null,o=await Promise.all([r,i]);return this._slices=o[1],o[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:s}=e;t.xmin>-1&&t.xmax>181&&s?.wkid&&s.isGeographic&&(e.nativeExtent=e.extent,e.transform=new X,e.extent=e.transform.forwardTransform(t))}_computeMinMaxLOD(e,t){const{pixelSize:s}=e,r=.5/e.width*s.x,{lods:i}=t,o=t.lodAt(Math.max.apply(null,i.map((e=>e.level)))),a=t.lodAt(Math.min.apply(null,i.map((e=>e.level)))),{tileType:n}=this;if("Map"===n)return this._levelOffset=i[0].level,[o,a];if("Raster"===n)return[i.find((e=>e.resolution===s.x))??o,a];const{minScale:l,maxScale:p}=this.sourceJSON;let m=o;p>0&&(m=i.find((e=>Math.abs(e.scale-p)<r)),m||(m=i.filter((e=>e.scale>p)).sort(((e,t)=>e.scale>t.scale?1:-1))[0]??o));let u=a;return l>0&&(u=i.find((e=>Math.abs(e.scale-l)<r))??a,this._levelOffset=u.level-a.level),[m,u]}};e([p({type:String,json:{write:!0}})],Fe.prototype,"datasetFormat",void 0),e([p()],Fe.prototype,"tileType",void 0),Fe=e([d("esri.layers.support.rasterDatasets.ImageServerRaster")],Fe);const Me=Fe,Oe=new Map;Oe.set("Int8","s8"),Oe.set("UInt8","u8"),Oe.set("Int16","s16"),Oe.set("UInt16","u16"),Oe.set("Int32","s32"),Oe.set("UInt32","u32"),Oe.set("Float32","f32"),Oe.set("Float64","f32"),Oe.set("Double64","f32");const De=new Map;De.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),De.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),De.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),De.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let Le=class extends b{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const t=e?e.signal:null,s=await this.request(this.url,{responseType:"xml",signal:t}),{rasterInfo:r,files:i}=this._parseHeader(s.data);if(-1===this.ioConfig.skipExtensions?.indexOf("aux.xml")){const t=await this._fetchAuxiliaryData(e);null!=t&&(r.statistics=t.statistics??r.statistics,r.histograms=t.histograms,t.histograms&&null==r.statistics&&(r.statistics=ie(t.histograms)))}this._set("rasterInfo",r),this._files=i;const o=await this.request(i.index,{responseType:"array-buffer",signal:t});this._storageIndex=this._parseIndex(o.data);const{blockWidth:a,blockHeight:n}=this.rasterInfo.storageInfo,l=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:p,height:m}=this.rasterInfo,u=[],c=this._getBandSegmentCount();let h=0,f=-1;for(;h<this._storageIndex.length;){f++;const e=Math.ceil(p/a/l**f)-1,t=Math.ceil(m/n/l**f)-1;h+=(e+1)*(t+1)*c*4,u.push({maxRow:t,maxCol:e,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=u,f>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=f),this.updateTileInfo()}async fetchRawTile(e,t,s,r={}){const{blockWidth:i,blockHeight:o,blockBoundary:a}=this.rasterInfo.storageInfo,n=a[e];if(!n||n.maxRow<t||n.maxCol<s||n.minRow>t||n.minCol>s)return null;const{bandCount:l,pixelType:p}=this.rasterInfo,{ranges:m,actualTileWidth:u,actualTileHeight:c}=this._getTileLocation(e,t,s);if(!m||0===m.length)return null;if(0===m[0].from&&0===m[0].to){const e=new Uint8Array(i*o);return new de({width:i,height:o,pixels:null,mask:e,validPixelCount:0})}const{bandIds:h}=this.ioConfig,f=this._getBandSegmentCount(),d=[];let y=0;for(y=0;y<f;y++)h&&!h.includes(y)||d.push(this.request(this._files.data,{range:{from:m[y].from,to:m[y].to},responseType:"array-buffer",signal:r.signal}));const g=await Promise.all(d),x=g.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),j=new Uint8Array(x);let b=0;for(y=0;y<f;y++)j.set(new Uint8Array(g[y].data),b),b+=g[y].data.byteLength;const I=De.get(this.rasterInfo.storageInfo.compression).decoderFormat,w=await this.decodePixelBlock(j.buffer,{width:i,height:o,format:I,planes:h?.length||l,pixelType:p});if(null==w)return null;let{noDataValue:S}=this.rasterInfo;if(null!=S&&"lerc"!==I&&!w.mask&&(S=S[0],null!=S)){const e=w.width*w.height,t=new Uint8Array(e);if(Math.abs(S)>1e24)for(y=0;y<e;y++)Math.abs((w.pixels[0][y]-S)/S)>1e-6&&(t[y]=1);else for(y=0;y<e;y++)w.pixels[0][y]!==S&&(t[y]=1);w.mask=t}let k=0,R=0;if(u!==i||c!==o){let e=w.mask;if(e)for(y=0;y<o;y++)if(R=y*i,y<c)for(k=u;k<i;k++)e[R+k]=0;else for(k=0;k<i;k++)e[R+k]=0;else for(e=new Uint8Array(i*o),w.mask=e,y=0;y<c;y++)for(R=y*i,k=0;k<u;k++)e[R+k]=1}return w}_parseIndex(e){if(e.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let t,s,r,i,o,a;if(E){for(s=new Uint8Array(e),i=new ArrayBuffer(e.byteLength),r=new Uint8Array(i),o=0;o<e.byteLength/4;o++)for(a=0;a<4;a++)r[4*o+a]=s[4*o+3-a];t=new Uint32Array(i)}else t=new Uint32Array(e);return t}_getBandSegmentCount(){return De.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,s){const{blockWidth:r,blockHeight:i,pyramidScalingFactor:o}=this.rasterInfo.storageInfo,{width:a,height:n}=this.rasterInfo,l=this._getBandSegmentCount();let p,m,u,c=0,h=0;for(u=0;u<e;u++)h=o**u,p=Math.ceil(a/r/h),m=Math.ceil(n/i/h),c+=p*m;h=o**e,p=Math.ceil(a/r/h),m=Math.ceil(n/i/h),c+=t*p+s,c*=4*l;const f=this._storageIndex.subarray(c,c+4*l);let d=0,y=0;const g=[];for(let e=0;e<l;e++)d=f[4*e]*2**32+f[4*e+1],y=d+f[4*e+2]*2**32+f[4*e+3],g.push({from:d,to:y});return{ranges:g,actualTileWidth:s<p-1?r:Math.ceil(a/h)-r*(p-1),actualTileHeight:t<m-1?i:Math.ceil(n/h)-i*(m-1)}}_parseHeader(e){const t=le(e,"MRF_META/Raster");if(!t)throw new s("mrf:open","not a valid MRF format");const r=le(t,"Size"),i=parseInt(r.getAttribute("x"),10),o=parseInt(r.getAttribute("y"),10),a=parseInt(r.getAttribute("c"),10),n=(ae(t,"Compression")||"none").toLowerCase();if(!De.has(n))throw new s("mrf:open","currently does not support compression "+n);const l=ae(t,"DataType")||"UInt8",p=Oe.get(l);if(null==p)throw new s("mrf:open","currently does not support pixel type "+l);const m=le(t,"PageSize"),u=parseInt(m.getAttribute("x"),10),c=parseInt(m.getAttribute("y"),10),h=le(t,"DataValues");let f,d;if(h&&(d=h.getAttribute("NoData"),null!=d&&(f=d.trim().split(" ").map((e=>parseFloat(e))))),le(e,"MRF_META/CachedSource"))throw new s("mrf:open","currently does not support MRF referencing other data files");const y=le(e,"MRF_META/GeoTags"),g=le(y,"BoundingBox");let x,j=!1;if(null!=g){const e=parseFloat(g.getAttribute("minx")),t=parseFloat(g.getAttribute("miny")),s=parseFloat(g.getAttribute("maxx")),r=parseFloat(g.getAttribute("maxy")),i=ae(y,"Projection")||"";let o=Q.WGS84;if("LOCAL_CS[]"!==i)if(i.toLowerCase().startsWith("epsg:")){const e=Number(i.slice(5));isNaN(e)||0===e||(o=new Q({wkid:e}))}else o=ve(i)??Q.WGS84;else j=!0,o=new Q({wkid:3857});x=new Z(e,t,s,r),x.spatialReference=o}else j=!0,x=new Z({xmin:-.5,ymin:.5-o,xmax:i-.5,ymax:.5,spatialReference:new Q({wkid:3857})});const b=le(e,"MRF_META/Rsets"),I=parseInt(b&&b.getAttribute("scale")||"2",10),w=x.spatialReference,S=new D({origin:new ee({x:x.xmin,y:x.ymax,spatialReference:w}),blockWidth:u,blockHeight:c,pyramidBlockWidth:u,pyramidBlockHeight:c,compression:n,pyramidScalingFactor:I}),k=new ee({x:x.width/i,y:x.height/o,spatialReference:w}),R=new O({width:i,height:o,extent:x,isPseudoSpatialReference:j,spatialReference:w,bandCount:a,pixelType:p,pixelSize:k,noDataValue:f,storageInfo:S}),v=ae(e,"datafile"),T=ae(e,"IndexFile");return{rasterInfo:R,files:{mrf:this.url,index:T||this.url.replace(".mrf",".idx"),data:v||this.url.replace(".mrf",De.get(n).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Ce(t)}catch{return null}}};e([p()],Le.prototype,"_files",void 0),e([p()],Le.prototype,"_storageIndex",void 0),e([p({type:String,json:{write:!0}})],Le.prototype,"datasetFormat",void 0),Le=e([d("esri.layers.support.rasterIO.MRFRaster")],Le);const Ae=Le,Ue=(e,t)=>e.get(t)?.values,Ee=(e,t)=>e.get(t)?.values?.[0];let Be=class extends b{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){await this.init();const t=e?e.signal:null,{data:r}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!r)throw new s("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:i,firstIFDPos:o,isBigTiff:a}=B(r),n=[];await this._readIFDs(n,r,i,o,0,a?8:4,t);const{imageInfo:l,rasterInfo:p}=this._parseIFDs(n),m=N(n),u=z(n);if(this._headerInfo={littleEndian:i,isBigTiff:a,ifds:n,pyramidIFDs:m,maskIFDs:u,...l},this._set("rasterInfo",p),!l.isSupported)throw new s("tiffraster:open","this tiff is not supported: "+l.message);if(!l.tileWidth)throw new s("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");const c=n[0].get("PREDICTOR")?.values?.[0],h=n[0].get("SAMPLEFORMAT")?.values?.[0];if(3===h&&2===c)throw new s("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floatting point data");const{skipExtensions:f=[]}=this.ioConfig;if(!f.includes("aux.xml")){const t=await this._fetchAuxiliaryMetaData(e);null!=t&&this._processPAMInfo(t,p)}f.includes("vat.dbf")||1!==p.bandCount||"u8"!==p.pixelType||(p.attributeTable=await this._fetchAuxiliaryTable(e),null!=p.attributeTable&&(p.keyProperties.DataType="thematic")),this.updateTileInfo()}async fetchRawTile(e,t,s,r={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,s))return null;const i=await this._fetchRawTiffTile(e,t,s,!1,r);if(null!=i&&this._headerInfo.hasMaskBand){const o=await this._fetchRawTiffTile(e,t,s,!0,r);null!=o&&o.pixels[0]instanceof Uint8Array&&(i.mask=o.pixels[0])}return i}_parseIFDs(e){const t=V(e),{width:s,height:r,tileWidth:i,tileHeight:o,planes:a,pixelType:n,compression:l,firstPyramidLevel:p,maximumPyramidLevel:m,pyramidBlockWidth:u,pyramidBlockHeight:c,tileBoundary:h,affine:f,metadata:d}=t;let y=ve(t.extent.spatialReference?.wkt||t.extent.spatialReference?.wkid),g=!!t.isPseudoGeographic;null==y&&(g=!0,y=new Q({wkid:3857}));const x=new Z({...t.extent,spatialReference:y}),j=new ee(x?{x:x.xmin,y:x.ymax,spatialReference:y}:{x:0,y:0}),b=new D({blockWidth:i,blockHeight:o,pyramidBlockWidth:u,pyramidBlockHeight:c,compression:l,origin:j,firstPyramidLevel:p,maximumPyramidLevel:m,blockBoundary:h}),I=new ee({x:(x.xmax-x.xmin)/s,y:(x.ymax-x.ymin)/r,spatialReference:y}),w=d?{BandProperties:d.bandProperties,DataType:d.dataType}:{};let S=null;const k=Ee(e[0],"PHOTOMETRICINTERPRETATION"),R=Ue(e[0],"COLORMAP");if(k<=3&&R?.length>3&&R.length%3==0){S=[];const e=R.length/3;for(let t=0;t<e;t++)S.push([t,R[t]>>>8,R[t+e]>>>8,R[t+2*e]>>>8])}const v=new O({width:s,height:r,bandCount:a,pixelType:n,pixelSize:I,storageInfo:b,spatialReference:y,isPseudoSpatialReference:g,keyProperties:w,extent:x,colormap:S,statistics:d?d.statistics:null});return f?.length&&(v.nativeExtent=new Z({xmin:-.5,ymin:.5-r,xmax:s-.5,ymax:.5,spatialReference:y}),v.transform=new Y({polynomialOrder:1,forwardCoefficients:[f[2]+f[0]/2,f[5]-f[3]/2,f[0],f[3],-f[1],-f[4]]}),v.extent=v.transform.forwardTransform(v.nativeExtent),v.pixelSize=new ee({x:(x.xmax-x.xmin)/s,y:(x.ymax-x.ymin)/r,spatialReference:y}),b.origin.x=-.5,b.origin.y=.5),{imageInfo:t,rasterInfo:v}}_processPAMInfo(e,t){if(t.statistics=e.statistics??t.statistics,t.histograms=e.histograms,e.histograms&&null==t.statistics&&(t.statistics=ie(e.histograms)),e.transform&&null==t.transform){t.transform=e.transform,t.nativeExtent=t.extent;const s=t.transform.forwardTransform(t.nativeExtent);t.pixelSize=new ee({x:(s.xmax-s.xmin)/t.width,y:(s.ymax-s.ymin)/t.height,spatialReference:t.spatialReference}),t.extent=s}t.isPseudoSpatialReference&&e.spatialReference&&(t.spatialReference=e.spatialReference,t.extent.spatialReference=t.nativeExtent.spatialReference=t.storageInfo.origin.spatialReference=t.spatialReference)}async _readIFDs(e,t,s,r,i,o=4,a){if(!r)return null;(r>=t.byteLength||r<0)&&(t=(await this.request(this.url,{range:{from:r+i,to:r+i+this._bufferSize},responseType:"array-buffer",signal:a})).data,i=r+i,r=0);const n=await this._readIFD(t,s,r,i,H.TIFF_TAGS,o,a);if(e.push(n.ifd),!n.nextIFD)return null;await this._readIFDs(e,t,s,n.nextIFD-i,i,o,a)}async _readIFD(e,t,s,r,i=H.TIFF_TAGS,o=4,a){if(!e)return null;const n=J(e,t,s,r,i,o);if(n.success){const s=[];if(n.ifd?.forEach((e=>{e.values||s.push(e)})),s.length>0){const i=s.map((e=>e.offlineOffsetSize)).filter(c),o=Math.min.apply(null,i.map((e=>e[0])));if(Math.min.apply(null,i.map((e=>e[0]+e[1])))-o<=this._bufferSize){const{data:i}=await this.request(this.url,{range:{from:o,to:o+this._bufferSize},responseType:"array-buffer",signal:a});e=i,r=o,s.forEach((s=>G(e,t,s,r)))}}if(n.ifd?.has("GEOKEYDIRECTORY")){const s=n.ifd.get("GEOKEYDIRECTORY"),i=s?.values;if(i&&i.length>4){const o=i[0]+"."+i[1]+"."+i[2],n=await this._readIFD(e,t,s.valueOffset+6-r,r,H.GEO_KEYS,2,a);s.data=n.ifd,s.data&&s.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[o]})}}return n}if(n.requiredBufferSize&&n.requiredBufferSize!==e.byteLength){const s=await this.request(this.url,{range:{from:r,to:r+n.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(e=s.data).byteLength<n.requiredBufferSize?null:this._readIFD(e,t,0,r,H.TIFF_TAGS,4,a)}}async _fetchRawTiffTile(e,t,s,r,i={}){const o=this._getTileLocation(e,t,s,r);if(!o)return null;const{ranges:a,actualTileWidth:n,actualTileHeight:l,ifd:p}=o,m=a.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:i.signal}))),u=await Promise.all(m),c=u.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),h=1===u.length?u[0].data:new ArrayBuffer(c),f=[0],d=[0];if(u.length>1){const e=new Uint8Array(h);for(let t=0,s=0;t<u.length;t++){const r=u[t].data;e.set(new Uint8Array(r),s),f[t]=s,s+=r.byteLength,d[t]=r.byteLength}}const{blockWidth:y,blockHeight:g}=this.getBlockWidthHeight(e),x=await this.decodePixelBlock(h,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:p,offsets:f,sizes:d},width:y,height:g,planes:null,pixelType:null});if(null==x)return null;let j,b,I;if(n!==y||l!==g){let e=x.mask;if(e)for(j=0;j<g;j++)if(I=j*y,j<l)for(b=n;b<y;b++)e[I+b]=0;else for(b=0;b<y;b++)e[I+b]=0;else for(e=new Uint8Array(y*g),x.mask=e,j=0;j<l;j++)for(I=j*y,b=0;b<n;b++)e[I+b]=1}return x}_getTileLocation(e,t,s,r=!1){const{firstPyramidLevel:i,blockBoundary:o}=this.rasterInfo.storageInfo,a=0===e?0:e-(i-1),{_headerInfo:n}=this;if(!n)return null;const l=r?n.maskIFDs[a]:0===a?n?.ifds[0]:n?.pyramidIFDs[a-1];if(!l)return null;const p=q(l,n),m=Ue(l,"TILEOFFSETS");if(void 0===m)return null;const u=Ue(l,"TILEBYTECOUNTS"),{minRow:c,minCol:h,maxRow:f,maxCol:d}=o[a];if(t>f||s>d||t<c||s<h)return null;const y=Ee(l,"IMAGEWIDTH"),g=Ee(l,"IMAGELENGTH"),x=Ee(l,"TILEWIDTH"),j=Ee(l,"TILELENGTH"),b=[];if(p){const{bandCount:e}=this.rasterInfo;for(let r=0;r<e;r++){const e=r*(f+1)*(d+1)+t*(d+1)+s;b[r]={from:m[e],to:m[e]+u[e]-1}}}else{const e=t*(d+1)+s;b.push({from:m[e],to:m[e]+u[e]-1})}for(let e=0;e<b.length;e++)if(null==b[e].from||!b[e].to)return null;return{ranges:b,ifd:l,actualTileWidth:s===d&&y%x||x,actualTileHeight:t===f&&g%j||j}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Ce(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e?.signal}),s=je.parse(t);return s?.recordSet?K.fromJSON(s.recordSet):null}catch{return null}}};e([p()],Be.prototype,"_files",void 0),e([p()],Be.prototype,"_headerInfo",void 0),e([p()],Be.prototype,"_bufferSize",void 0),e([p({type:String,json:{write:!0}})],Be.prototype,"datasetFormat",void 0),Be=e([d("esri.layers.support.rasterDatasets.TIFFRaster")],Be);const Ne=Be,ze=new Map;ze.set("CRF",{desc:"Cloud Raster Format",constructor:we}),ze.set("MRF",{desc:"Meta Raster Format",constructor:Ae}),ze.set("TIFF",{desc:"GeoTIFF",constructor:Ne}),ze.set("RasterTileServer",{desc:"Raster Tile Server",constructor:Me}),ze.set("JPG",{desc:"JPG Raster Format",constructor:Pe}),ze.set("PNG",{desc:"PNG Raster Format",constructor:Pe}),ze.set("GIF",{desc:"GIF Raster Format",constructor:Pe}),ze.set("BMP",{desc:"BMP Raster Format",constructor:Pe});class Ve{static get supportedFormats(){const e=new Set;return ze.forEach(((t,s)=>e.add(s))),e}static async open(e){const{url:t,ioConfig:r,sourceJSON:i}=e;let o=e.datasetFormat;null==o&&t.lastIndexOf(".")&&(o=t.slice(t.lastIndexOf(".")+1).toUpperCase()),"OVR"===o||"TIF"===o?o="TIFF":"JPG"!==o&&"JPEG"!==o&&"JFIF"!==o||(o="JPG"),t.toLowerCase().includes("/imageserver")&&!t.toLowerCase().includes("/wcsserver")&&(o="RasterTileServer");const a={url:t,sourceJSON:i,datasetFormat:o,ioConfig:r??{bandIds:null,sampling:null}};let n,l;if(o&&this.supportedFormats.has(o)){if("CRF"===o&&!r?.enableCRF)throw new s("rasterfactory:open",`cannot open raster: ${t}`);return n=ze.get(o).constructor,l=new n(a),await l.open({signal:e.signal}),l}if(o)throw new s("rasterfactory:open","not a supported format "+o);const p=Array.from(ze.keys());let m=0;const u=()=>(o=p[m++],o&&("CRF"!==o||r?.enableCRF)?(n=ze.get(o).constructor,l=new n(a),l.open({signal:e.signal}).then((()=>l)).catch((()=>u()))):null);return u()}static register(e,t,s){ze.has(e.toUpperCase())||ze.set(e.toUpperCase(),{desc:t,constructor:s})}}let He=class extends(x(v(S(k(j(I(T(g(R(i(y))))))))))){constructor(...e){super(...e),this._primaryRasters=[],this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(n).then((()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const e=[new _({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new _({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],{rasterInfo:t}=this,s=t?.attributeTable,r=null!=s?s.fields:null;if(r){const t=r.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name="Raster."+e.name,t}));e.push(...t)}const i=t?.dataType,o=t?.multidimensionalInfo;if(("vector-magdir"===i||"vector-uv"===i)&&null!=o){const t=o.variables[0].unit?.trim(),s="Magnitude"+(t?` (${t})`:"");e.push(new _({name:"Raster.Magnitude",alias:s,domain:null,editable:!1,type:"double"})),e.push(new _({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return e}createPopupTemplate(e){const{rasterFields:t}=this,s=new Set(t.map((({name:e})=>e)).filter((e=>"raster.servicepixelvalue.raw"!==e.toLowerCase())));return xe({fields:t,title:this.title},{...e,visibleFieldNames:s})}async generateRasterInfo(e,t){if(!(e=m(P,e)))return this.rasterInfo;try{const s={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((e=>s[e.url]=e));const r=ye(e.functionDefinition?.toJSON()??e.toJSON(),s),i=new w({rasterFunction:r});return await i.open(t),i.rasterInfo}catch(e){if(e instanceof s)throw e;throw new s("imagery-tile-layer","the given raster function is not supported")}}write(e,t){const r=this._primaryRasters[0]??this.raster;if(this.loaded?"RasterTileServer"===r.datasetFormat&&("Raster"===r.tileType||"Map"===r.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t&&t.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new s("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){let t=!1;if(this.raster)this.raster.rasterInfo||await this.raster.open(),"Function"===this.raster.datasetFormat?(t=!0,this._primaryRasters=this.raster.primaryRasters.rasters):this._primaryRasters=[this.raster],this.url=this.raster.url;else{const{rasterFunction:t}=this,i=[this.url];t&&ge(t.toJSON(),i);const o=await Promise.all(i.map((t=>Ve.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e})))),a=o.findIndex((e=>null==e));if(a>-1)throw new s("imagery-tile-layer:open",`cannot open raster: ${i[a]}`);if(this._primaryRasters=o,t){const e={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((t=>e[t.url]=t));const i=ye(t.functionDefinition?.toJSON()??t.toJSON(),e),a=new w({rasterFunction:i});try{await a.open(),this.raster=a}catch(e){const t=r.getLogger(this);e instanceof s&&t.error("imagery-tile-layer:open",e.message),t.warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=o[0]}}else this.raster=o[0]}const i=this.raster.rasterInfo;if(!i)throw new s("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("rasterInfo",t?i:this._primaryRasters[0].rasterInfo),this._set("spatialReference",i.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"})}else this.read({tileInfo:this.rasterInfo.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(l((()=>this.customParameters),(e=>{this.raster&&(this.raster.ioConfig.customFetchParameters=e)})))}};e([p()],He.prototype,"_primaryRasters",void 0),e([p({type:[u],json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],He.prototype,"bandIds",void 0),e([p({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),f(F)],He.prototype,"interpolation",void 0),e([p(C)],He.prototype,"legendEnabled",void 0),e([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],He.prototype,"isReference",void 0),e([p({type:["show","hide"]})],He.prototype,"listMode",void 0),e([p({json:{read:!0,write:!0}})],He.prototype,"blendMode",void 0),e([p()],He.prototype,"sourceJSON",void 0),e([p({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],He.prototype,"version",void 0),e([p({readOnly:!0,json:{read:!1}})],He.prototype,"type",void 0),e([p({type:["ArcGISTiledImageServiceLayer"]})],He.prototype,"operationalLayerType",void 0),e([p({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,t,s){t[s]=!e}}}})],He.prototype,"popupEnabled",void 0),e([p({type:t,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],He.prototype,"popupTemplate",void 0),e([p({readOnly:!0})],He.prototype,"defaultPopupTemplate",null),e([p({readOnly:!0,type:[_]})],He.prototype,"fields",void 0),e([p({readOnly:!0,type:[_]})],He.prototype,"rasterFields",null),He=e([d("esri.layers.ImageryTileLayer")],He);const Je=He;export{Je as default};
