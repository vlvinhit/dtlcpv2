// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../../chunks/_rollupPluginBabelHelpers ../../../Graphic ../../../core/typedArrayUtil ../../../core/workers/WorkerHandle ../../../geometry/SpatialReference ../../../layers/support/Field".split(" "),function(n,k,r,p,t,q,u){function v(b){switch(b.type){case "polyline":b.paths.reduce((c,a)=>c+a.length,0)<p.NATIVE_ARRAY_MAX_SIZE&&(b.paths=b.hasZ||b.hasM?b.paths.map(c=>c.map(a=>[a[0],a[1],a[2]])):b.paths.map(c=>c.map(a=>[a[0],a[1]])));break;case "polygon":b.rings.reduce((c,a)=>c+a.length,
0)<p.NATIVE_ARRAY_MAX_SIZE&&(b.rings=b.hasZ||b.hasM?b.rings.map(c=>c.map(a=>[a[0],a[1],a[2]])):b.rings.map(c=>c.map(a=>[a[0],a[1]])))}}let z=function(){function b(a){this._controller=a;this._handle=new w(f=>a.schedule(f))}var c=b.prototype;c.destroy=function(){this._handle.destroy()};c.invoke=function(a,f){if(!a.buffer||0===a.buffer.byteLength)return Promise.resolve(null);a.options.sourceSpatialReference&&a.options.sourceSpatialReference instanceof q&&(a.options={...a.options,sourceSpatialReference:a.options.sourceSpatialReference.toJSON()});
return this._handle.invoke(a,f).then(d=>{let g=0,l=0;const m=async h=>{d.spatialReference=q.fromJSON(d.spatialReference);if(d.fields)for(;g<d.fields.length;)if(d.fields[g]=u.fromJSON(d.fields[g]),g++,h.madeProgress())return this._controller.reschedule(e=>m(e));const x=d.spatialReference;for(;l<d.features.length;){const e=d.features[l];++l;e.uid=r.generateUID();if(null!=e.geometry&&(e.geometry.spatialReference=x,v(e.geometry),h.madeProgress()))return this._controller.reschedule(y=>m(y))}return d};
return this._controller.schedule(h=>m(h))})};return k._createClass(b)}(),w=function(b){function c(a){return b.call(this,"PBFDecoderWorker","_parseFeatureQuery",{_parseFeatureQuery:f=>[f.buffer]},a)||this}k._inherits(c,b);return k._createClass(c)}(t.WorkerHandle);n.PBFDecoder=z;Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});