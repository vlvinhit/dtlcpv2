// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("require exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../chunks/vec4f64 ../core/shaderLibrary/ShaderOutput ../core/shaderTechnique/ReloadableShaderModule ../core/shaderTechnique/ShaderTechnique ../lib/DefaultVertexAttributeLocations ../lib/OrderIndependentTransparency ../lib/Program ../lib/StencilUtils ../lib/TransparencyPassType ../materials/VisualVariablePassParameters ../../../../chunks/ColorMaterial.glsl ../../../webgl/renderState".split(" "),function(v,m,f,w,r,x,g,y,h,
z,n,t,p,A,k){p=function(d){function a(){var e=d.apply(this,arguments)||this;e.color=w.ZEROS;return e}f._inherits(a,d);return f._createClass(a)}(p.VisualVariablePassParameters);g=function(d){function a(){return d.apply(this,arguments)||this}f._inherits(a,d);var e=a.prototype;e.initializeProgram=function(c){return new z.Program(c.rctx,a.shader.get().build(this.configuration),y.Default3D)};e._createPipeline=function(c,l){const b=this.configuration,q=c===t.TransparencyPassType.NONE,u=c===t.TransparencyPassType.FrontFace;
return k.makePipelineState({blending:b.output!==r.ShaderOutput.Color&&b.output!==r.ShaderOutput.Alpha||!b.transparent?null:q?h.blendingDefault:h.oitBlending(c),culling:k.cullingParams(b.cullFace),depthTest:{func:h.oitDepthTest(c)},depthWrite:q||u?b.writeDepth?k.defaultDepthWriteParams:null:null,colorWrite:k.defaultColorWriteParams,stencilWrite:b.hasOccludees?n.stencilWriteMaskOn:null,stencilTest:b.hasOccludees?l?n.stencilToolMaskBaseParams:n.stencilBaseAllZerosParams:null,polygonOffset:q||u?b.polygonOffset?
B:null:h.getOITPolygonOffset(b.enableOffset)})};e.initializePipeline=function(){this._occludeePipelineState=this._createPipeline(this.configuration.transparencyPassType,!0);return this._createPipeline(this.configuration.transparencyPassType,!1)};e.getPipelineState=function(c,l){return l?this._occludeePipelineState:f._get(f._getPrototypeOf(a.prototype),"getPipelineState",this).call(this,c,l)};return f._createClass(a)}(g.ShaderTechnique);g.shader=new x.ReloadableShaderModule(A.ColorMaterial,()=>new Promise((d,
a)=>v(["./ColorMaterial.glsl"],d,a)));const B={factor:1,units:1};m.ColorMaterialPassParameters=p;m.ColorMaterialTechnique=g;Object.defineProperty(m,Symbol.toStringTag,{value:"Module"})});