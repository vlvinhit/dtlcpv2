// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("require exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../chunks/tslib.es6 ../core/shaderLibrary/ShaderOutput ../core/shaderTechnique/ReloadableShaderModule ../core/shaderTechnique/ShaderTechnique ../core/shaderTechnique/ShaderTechniqueConfiguration ../lib/basicInterfaces ../lib/OrderIndependentTransparency ../lib/Program ../lib/TransparencyPassType ../lib/VertexAttribute ../materials/DefaultTechniqueConfiguration ../../../../chunks/ShadedColorMaterial.glsl ../../../webgl/enums ../../../webgl/renderState".split(" "),
function(z,k,l,c,m,b,n,d,w,p,A,q,t,B,C,u,r){n=function(f){function e(){return f.apply(this,arguments)||this}l._inherits(e,f);var a=e.prototype;a.initializeProgram=function(g){return new A.Program(g.rctx,e.shader.get().build(this.configuration),x)};a._setPipelineState=function(g){const h=this.configuration,v=g===q.TransparencyPassType.NONE,y=g===q.TransparencyPassType.FrontFace;return r.makePipelineState({blending:h.output!==m.ShaderOutput.Color&&h.output!==m.ShaderOutput.Alpha||!h.transparent?null:
v?p.blendingDefault:p.oitBlending(g),culling:r.cullingParams(h.cullFace),depthTest:{func:y?u.CompareFunction.LESS:h.shadingEnabled?u.CompareFunction.LEQUAL:u.CompareFunction.LESS},depthWrite:v?h.writeDepth?r.defaultDepthWriteParams:null:p.oitDepthWrite(g),colorWrite:r.defaultColorWriteParams,polygonOffset:v||y?null:p.OITPolygonOffset})};a.initializePipeline=function(){return this._setPipelineState(this.configuration.transparencyPassType)};return l._createClass(e)}(n.ShaderTechnique);n.shader=new b.ReloadableShaderModule(C.ShadedColorMaterialShader,
()=>new Promise((f,e)=>z(["./ShadedColorMaterial.glsl"],f,e)));b=function(f){function e(){var a=f.apply(this,arguments)||this;a.output=m.ShaderOutput.Color;a.cullFace=w.CullFaceOptions.None;a.transparencyPassType=q.TransparencyPassType.NONE;a.hasSlicePlane=!1;a.transparent=!1;a.writeDepth=!0;a.screenSizeEnabled=!0;a.shadingEnabled=!0;a.hasMultipassTerrain=!1;a.cullAboveGround=!1;return a}l._inherits(e,f);return l._createClass(e)}(B.DefaultTechniqueConfiguration);c.__decorate([d.parameter({count:m.ShaderOutput.COUNT})],
b.prototype,"output",void 0);c.__decorate([d.parameter({count:w.CullFaceOptions.COUNT})],b.prototype,"cullFace",void 0);c.__decorate([d.parameter({count:q.TransparencyPassType.COUNT})],b.prototype,"transparencyPassType",void 0);c.__decorate([d.parameter()],b.prototype,"hasSlicePlane",void 0);c.__decorate([d.parameter()],b.prototype,"transparent",void 0);c.__decorate([d.parameter()],b.prototype,"writeDepth",void 0);c.__decorate([d.parameter()],b.prototype,"screenSizeEnabled",void 0);c.__decorate([d.parameter()],
b.prototype,"shadingEnabled",void 0);c.__decorate([d.parameter()],b.prototype,"hasMultipassTerrain",void 0);c.__decorate([d.parameter()],b.prototype,"cullAboveGround",void 0);const x=new Map([[t.VertexAttribute.POSITION,0],[t.VertexAttribute.NORMAL,1],[t.VertexAttribute.OFFSET,2]]);k.ShadedColorMaterialTechnique=n;k.ShadedColorMaterialTechniqueConfiguration=b;k.vertexAttributeLocations=x;Object.defineProperty(k,Symbol.toStringTag,{value:"Module"})});