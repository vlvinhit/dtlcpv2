// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../chunks/vec3 ../../../../chunks/vec3f64 ../../../../chunks/vec4f64 ../../../../geometry/support/aaBoundingBox ../../../../geometry/support/buffer/BufferView ../../support/buffer/InterleavedLayout ../core/shaderLibrary/ShaderOutput ../lib/basicInterfaces ../lib/GLMaterial ../lib/Material ../lib/RenderSlot ../lib/Util ../lib/VertexAttribute ./internal/bufferWriterUtils ./internal/MaterialUtil ../shaders/ShadedColorMaterialTechnique".split(" "),
function(r,l,m,t,x,y,G,H,q,I,J,z,n,K,e,A,B,u){let P=function(f){function d(b){b=f.call(this,b,new C)||this;b.supportsEdges=!0;b._configuration=new u.ShadedColorMaterialTechniqueConfiguration;b._vertexAttributeLocations=u.vertexAttributeLocations;return b}l._inherits(d,f);var a=d.prototype;a.getConfiguration=function(b,c){this._configuration.output=b;this._configuration.cullFace=this.parameters.cullFace;this._configuration.hasSlicePlane=this.parameters.hasSlicePlane;this._configuration.transparent=
this.parameters.transparent;this._configuration.writeDepth=this.parameters.writeDepth;this._configuration.screenSizeEnabled=this.parameters.screenSizeEnabled;this._configuration.shadingEnabled=this.parameters.shadingEnabled;this._configuration.transparencyPassType=c.transparencyPassType;this._configuration.hasMultipassTerrain=c.multipassTerrain.enabled;this._configuration.cullAboveGround=c.multipassTerrain.cullAboveGround;return this._configuration};a.intersect=function(b,c,h,p,D,E){if(this.parameters.screenSizeEnabled){const v=
b.vertexAttributes.get(e.VertexAttribute.OFFSET);B.intersectTriangleGeometry(b,h,p,D,{applyToVertex:(g,w,L,k)=>{k=m.set(F,v.data[3*k],v.data[3*k+1],v.data[3*k+2]);g=m.set(M,g,w,L);m.scale(k,k,this.parameters.screenSizeScale*h.camera.computeRenderPixelSizeAt(k));m.add(g,g,k);return[g[0],g[1],g[2]]},applyToAabb:g=>{const w=y.center(g,F);return y.scale(g,this.parameters.screenSizeScale*h.camera.computeRenderPixelSizeAt(w))}},E)}else B.intersectTriangleGeometry(b,h,p,D,void 0,E)};a.requiresSlot=function(b,
c){return c===q.ShaderOutput.Highlight?b===n.RenderSlot.OPAQUE_MATERIAL:c===q.ShaderOutput.Color||c===q.ShaderOutput.Alpha||c===q.ShaderOutput.ObjectAndLayerIdColor?(c=n.RenderSlot.OPAQUE_MATERIAL,this.parameters.transparent&&(c=this.parameters.writeDepth?n.RenderSlot.TRANSPARENT_MATERIAL:n.RenderSlot.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL),b===c||b===n.RenderSlot.DRAPED_MATERIAL):!1};a.createGLMaterial=function(b){return new N(b)};a.createBufferWriter=function(){return new O(this.parameters.screenSizeEnabled)};
return l._createClass(d)}(z.Material),N=function(f){function d(){return f.apply(this,arguments)||this}l._inherits(d,f);d.prototype.beginSlot=function(a){return this.ensureTechnique(u.ShadedColorMaterialTechnique,a)};return l._createClass(d)}(J),C=function(f){function d(){var a=f.apply(this,arguments)||this;a.color=x.fromValues(1,1,1,1);a.shadingTint=x.fromValues(0,0,0,.25);a.shadingDirection=m.normalize(t.create(),[.5,-.5,-.5]);a.screenSizeScale=14;a.transparent=!1;a.writeDepth=!0;a.hasSlicePlane=
!1;a.cullFace=I.CullFaceOptions.None;a.screenSizeEnabled=!1;a.shadingEnabled=!0;return a}l._inherits(d,f);return l._createClass(d)}(z.MaterialParameters),O=function(){function f(a){this.screenSizeEnabled=a;a=H.newLayout().vec3f(e.VertexAttribute.POSITION).vec3f(e.VertexAttribute.NORMAL);this.screenSizeEnabled&&a.vec3f(e.VertexAttribute.OFFSET);this.vertexBufferLayout=a}var d=f.prototype;d.elementCount=function(a){return a.indices.get(e.VertexAttribute.POSITION).length};d.write=function(a,b,c,h,p){A.writeDefaultAttributes(c,
this.vertexBufferLayout,a,b,h,p);if(this.screenSizeEnabled)if(c.vertexAttributes.has(e.VertexAttribute.OFFSET))if(a=c.vertexAttributes.get(e.VertexAttribute.OFFSET),c=c.indices.get(e.VertexAttribute.OFFSET),K.assert(3===a.size),h=h.getField(e.VertexAttribute.OFFSET,G.BufferViewVec3f))A.writePosition(c,a.data,b,h,p);else throw Error("unable to acquire view for "+e.VertexAttribute.OFFSET);else throw Error(`${e.VertexAttribute.OFFSET} vertex attribute required for screenSizeEnabled ShadedColorMaterial`);
};return l._createClass(f)}();const F=t.create(),M=t.create();r.ShadedColorMaterial=P;r.ShadedColorMaterialParameters=C;Object.defineProperty(r,Symbol.toStringTag,{value:"Module"})});