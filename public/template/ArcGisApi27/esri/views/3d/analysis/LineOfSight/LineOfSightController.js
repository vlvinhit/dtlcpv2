// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../chunks/tslib.es6 ../../../../geometry ../../../../analysis/featureReferenceUtils ../../../../core/Accessor ../../../../core/asyncUtils ../../../../core/Evented ../../../../core/Handles ../../../../core/handleUtils ../../../../core/Logger ../../../../core/maybe ../../../../core/promiseUtils ../../../../core/reactiveUtils ../../../../core/accessorSupport/decorators/property ../../../../core/accessorSupport/ensureType ../../../../core/arrayUtils ../../../../core/has ../../../../core/accessorSupport/decorators/subclass ../../../../chunks/vec3 ../../../../chunks/vec3f64 ../../../../core/support/WatchUpdatingTracking ../../../../geometry/projection ../../../../geometry/support/aaBoundingRect ../../../../geometry/support/ray ../../../../support/elevationInfoUtils ../LineOfSightAnalysisResult ./LineOfSightComputation ./LineOfSightRayIntersector ../support/projectionUtils ../../webgl-engine/lib/IntersectorInterfaces ../../webgl-engine/lib/intersectorUtilsConversions ../../../support/Scheduler ../../../../geometry/Point".split(" "),
function(p,K,q,ha,I,V,W,X,L,z,Y,M,Z,D,t,ia,ja,ka,aa,g,x,ba,A,E,J,N,ca,da,ea,O,P,B,y,fa){const Q=Y.getLogger("esri.views.3d.analysis.LineOfSight.LineOfSightController");p.LineOfSightController=function(R){function F(a){a=R.call(this,a)||this;a.updateOnCameraChange=!0;a._observerGroundOffsetRenderSpace=0;a._effectiveObserverElevationMode="absolute-height";a._observerFeatureId=null;a._updatingHandles=new ba.WatchUpdatingTracking;a._frameTask=y.ImmediateTask;a._handles=new L;a._computationHandles=new L;
a._externalObserverUpdate=!0;return a}K._inherits(F,R);var l=F.prototype;l.initialize=function(){const a=this.view.resourceController?.scheduler;this._frameTask=a?a.registerTask(y.TaskPriority.LINE_OF_SIGHT_TOOL):y.ImmediateTask;this._intersector=new ea.LineOfSightRayIntersector({view:this.view});this._handles.add([this._connectObserver(),this._connectComputations(),this._connectTargets()])};l.destroy=function(){this._handles.destroy();this._computationHandles.destroy();this._computations.removeAll();
this._updatingHandles.destroy()};l._computeResult=function(a){const b=a.computation,{inputPoints:c,computationResult:d}=b,{observerAdjusted:k,targetAdjusted:e}=c,{start:f,end:n}=d;g.copy(f,k);g.copy(n,e);this._canCompute(b)?this._computeIntersection(a):this._interpolateIntersection(a);b.notifyResultChanged();this.emit("result-changed",{target:a.computation.target,result:b.result})};l._updateAdjustedPointsFromFeatures=function(a){const b=this.view;var {sceneIntersectionHelper:c}=b;({inputPoints:a}=
a);const {observerAdjusted:d,observerFeatureId:k,targetFeatureId:e,targetAdjusted:f}=a;if(null!=k||null!=e){var n=g.distance(d,f),m=this._intersector.intersector,h=J.fromPoints(a.observer,a.target,S);m.options.store=P.StoreResults.ALL;c.intersectToolIntersectorRay(h,m);var v=h=c=null,u=null;for(const r of m.results.all)m=B.toGraphic(r,this.view),null!=m&&null!=r.distanceInRenderSpace&&(m=I.getFeatureId(m),null!=m&&(null!=k&&m===k&&(null==c&&(c=this._getFeatureDistanceThreshold(r,b,n)),r.distanceInRenderSpace<
c&&(v=r)),null!=e&&m===e&&(null==h&&(h=this._getFeatureDistanceThreshold(r,b,n)),null==u&&r.distanceInRenderSpace<n&&n-r.distanceInRenderSpace<h&&(u=r))));null!=v&&v.getIntersectionPoint(d)&&(a.observerSurfaceNormal=v.getTransformedNormal(x.create()));null!=u&&u.getIntersectionPoint(f)&&(a.targetSurfaceNormal=u.getTransformedNormal(x.create()))}};l._getFeatureDistanceThreshold=function(a,b,c){return B.hasLod(a)&&(a=B.getIntersectedFeatureBSRadius(a,b),null!=a)?Math.min(.05*a,c):1E-5*c};l._adjustStartEndPositions=
function(a){const b=this._screenPixelSize,c=this.view;var {inputPoints:d}=a;const {observer:k,observerSurfaceNormal:e,target:f,targetSurfaceNormal:n,observerAdjusted:m,targetAdjusted:h}=d;d=G;g.copy(m,k);g.copy(h,f);this._updateAdjustedPointsFromFeatures(a);null!=e?g.copy(d,e):g.subtract(d,h,m);g.normalize(d,d);g.scale(d,d,Math.min(b,1));g.add(m,m,d);null!=n?g.copy(d,n):g.subtract(d,m,h);a=c.state.camera.computeScreenPixelSizeAt(h);g.normalize(d,d);g.scale(d,d,Math.min(a,1));g.add(h,h,d)};l._computeIntersection=
function({computation:a,interpolationInfo:b}){const {view:c}=this,{sceneIntersectionHelper:d,renderCoordsHelper:k}=c;if(null!=d){var e=this._intersector.intersector,{computationResult:f,inputPoints:n}=a,{observer:m,target:h}=n,{start:v,end:u}=f,r=J.fromPoints(v,u,S);e.options.store=P.StoreResults.MIN;d.intersectToolIntersectorRay(r,e);e=e.results.min;r=f.intersection;var T=G,w=!0;null!=e&&e.getIntersectionPoint(r)&&(g.copy(b.originalIntersection,r),g.copy(b.originalObserver,v),g.copy(b.originalTarget,
u),k.fromRenderCoords(r,T,c.spatialReference),b=1-g.dist(u,h)/g.dist(v,h),w=g.dist(m,r)>=b*g.dist(m,h));b=new fa(T,c.spatialReference);var {result:C,target:U}=a;null!=C?(C.target=U,C.intersectedGraphic=w?null:B.toGraphic(e,c),C.intersectedLocation=w?null:b,C.visible=w):a.result=new ca.LineOfSightAnalysisResult({target:U,elevationAlignedTargetLocation:a.elevationAlignedTargetLocation,intersectedGraphic:w?null:B.toGraphic(e,c),intersectedLocation:w?null:b,visible:w});f.isValid=n.isValid=!0;f.isTargetVisible=
w}};l._interpolateIntersection=function({computation:a,interpolationInfo:b}){const {computationResult:c,inputPoints:d}=a,{start:k,end:e,intersection:f}=c,{originalIntersection:n,originalObserver:m,originalTarget:h}=b;g.copy(f,n);d.isValid?(a=G,b=g.dist(m,n)/g.dist(m,h),g.sub(a,k,m),g.scale(a,a,1-b),g.add(f,f,a),g.sub(a,e,h),g.scale(a,a,b),g.add(f,f,a),c.isValid=!0):(a.result=null,c.isValid=!1,c.isTargetVisible=!1)};l._canCompute=function(a){var b=this.view.frustum;if(null==this.analysisViewData.elevationAlignedObserver||
null==a.elevationAlignedTargetLocation||null==b)return!1;const {observerAdjusted:c,targetAdjusted:d}=a.inputPoints;a=b.intersectsPoint(c);b=b.intersectsPoint(d);return a&&b};l._onObserverPositionChange=function(a,b,c,d,k){this._externalObserverUpdate=k;if(null==a)this._observerFeatureId=this.analysisViewData.elevationAlignedObserver=null;else if(null==b)O.logFailedGeometryProjectionError(this.analysis,a.spatialReference,Q),this.analysisViewData.elevationAlignedObserver=null;else{a=this._getEffectiveElevationInfo(b,
c);var {absoluteZ:e,elevation:f}=N.zValueInAbsoluteHeightMode(b.x,b.y,b.z,this.view.spatialReference,this.view,a);b=b.clone();b.z=e;this._effectiveObserverElevationMode=a.mode;this.analysisViewData.elevationAlignedObserver=b;a=x.create();this.view.renderCoordsHelper.toRenderCoords(b,a);this._elevationAlignedObserverPositionRenderSpace=a;this._observerGroundOffsetRenderSpace=e-f;this._observerFeatureId=I.getFeatureId(d);this.priority=y.TaskPriority.LINE_OF_SIGHT_TOOL_INTERACTIVE}};l._onObserverRenderSpacePositionChangeForComputation=
function(a,b,c,d,k){const {inputPoints:e}=a;g.copy(e.observer,b);e.observerFeatureId=k;e.observerSurfaceNormal=null;switch(d){case "on-the-ground":case "relative-to-ground":b=this._intersector.updateFromGroundIntersection(e.observer,c,e.observer),null==e.observerFeatureId&&(e.observerSurfaceNormal=b)}this._adjustStartEndPositions(a);a.notifyInputPointsChanged();this.priority=y.TaskPriority.LINE_OF_SIGHT_TOOL_INTERACTIVE};l._onTargetPositionChange=function(a,b,c,d,k,e=!0){const f=a.inputPoints;e&&
(f.isValid=!1);if(null==c)null!=b&&O.logFailedGeometryProjectionError(this.analysis,b.spatialReference,Q),a.elevationAlignedTargetLocation=null,a.notifyInputPointsChanged();else{b=this._getEffectiveElevationInfo(c,d);var {absoluteZ:n,elevation:m}=N.zValueInAbsoluteHeightMode(c.x,c.y,c.z,this.view.spatialReference,this.view,b);c=c.clone();c.z=n;a.elevationAlignedTargetLocation=c;this.view.renderCoordsHelper.toRenderCoords(a.elevationAlignedTargetLocation,f.target);f.targetFeatureId=I.getFeatureId(k);
f.targetSurfaceNormal=null;switch(b.mode){case "on-the-ground":case "relative-to-ground":k=this._intersector.updateFromGroundIntersection(f.target,n-m,f.target),null==f.targetFeatureId&&(f.targetSurfaceNormal=k)}this._adjustStartEndPositions(a);a.notifyInputPointsChanged();this.priority=y.TaskPriority.LINE_OF_SIGHT_TOOL_INTERACTIVE}};l._connectComputationToTarget=function(a){return z.handlesGroup([this._updatingHandles.add(()=>({computation:a,targetPosition:a.target.position,targetElevationInfo:a.target.elevationInfo,
targetFeatureInfo:a.target.feature,projectedTargetPosition:A.projectOrLoad(a.target.position,this.view.spatialReference)}),({computation:b,targetPosition:c,targetElevationInfo:d,targetFeatureInfo:k,projectedTargetPosition:e})=>{null!=e.pending?this._updatingHandles.addPromise(e.pending):this._onTargetPositionChange(b,c,e.geometry,d,k)},D.initial)])};l._connectComputationToObserver=function(a){return this._updatingHandles.add(()=>({computation:a,observer:this.analysisViewData.elevationAlignedObserver}),
({computation:b})=>{this._externalObserverUpdate&&(b.inputPoints.isValid=!1,b.notifyInputPointsChanged())},D.initial)};l._connectComputationToRenderSpaceObserver=function(a){return this._updatingHandles.add(()=>({computation:a,observer:this._elevationAlignedObserverPositionRenderSpace,observerGroundOffset:this._observerGroundOffsetRenderSpace,observerElevationMode:this._effectiveObserverElevationMode,observerFeatureId:this._observerFeatureId}),({computation:b,observer:c,observerGroundOffset:d,observerElevationMode:k,
observerFeatureId:e})=>{this._onObserverRenderSpacePositionChangeForComputation(b,c,d,k,e)},D.initial)};l._connectComputationToCamera=function(a){return this._updatingHandles.add(()=>({camera:this.view.state.camera,isDirty:this._isCameraDirty}),({isDirty:b})=>{!this.updateOnCameraChange||a.inputPoints.isValid&&!b||a.notifyInputPointsChanged()})};l._connectComputationToSlicePlane=function(a){return this._updatingHandles.add(()=>this.view.slicePlane,()=>{a.inputPoints.isValid=!1;a.notifyInputPointsChanged()})};
l._connectComputationToElevation=function(a){const b=(c,d)=>{const k=this.analysis.observer,e=a.target;var f=null;let n=null,m=null;var h=null;let v=null,u=null;if(null!=k&&null!=k.position){f=A.projectOrLoad(k.position,this.view.spatialReference);if(null!=f.pending){this._updatingHandles.addPromise(f.pending);f.pending.finally(()=>b(c,d));return}f=f.geometry;n=k.elevationInfo;m=k.feature}if(null!=e.position){h=A.projectOrLoad(e.position,this.view.spatialReference);if(null!=h.pending){this._updatingHandles.addPromise(h.pending);
h.pending.finally(()=>b(c,d));return}h=h.geometry;v=e.elevationInfo;u=e.feature}if(null!=f||null!=h)A.projectBoundingRect(c,d,H,this.view.spatialReference),null!=f&&E.containsPointObject(H,f)&&this._onObserverPositionChange(null!=k?k.position:null,f,n,m,!1),null!=h&&E.containsPointObject(H,h)&&this._onTargetPositionChange(a,e.position,h,v,u,!1),null!=f&&null!=h&&E.intersectsSegment(H,f,h)&&a.notifyInputPointsChanged()};return this.view.elevationProvider.on("elevation-change",c=>b(c.extent,c.spatialReference))};
l._connectComputationToTask=function(a){let b=null;const c={computation:a,interpolationInfo:{originalIntersection:x.create(),originalObserver:x.create(),originalTarget:x.create()}};return z.handlesGroup([this._updatingHandles.add(()=>a.inputPoints,()=>{b=M.abortMaybe(b);b=W.createTask(async d=>{await Z.ignoreAbortErrors(this._frameTask.schedule(()=>this._computeResult(c),d))})},{initial:!0,equals:()=>!1}),z.makeHandle(()=>b=M.abortMaybe(b))])};l._connectComputation=function(a){const b=this._computationHandles;
b.has(a)||b.add([this._connectComputationToTarget(a),this._connectComputationToObserver(a),this._connectComputationToRenderSpaceObserver(a),this._connectComputationToCamera(a),this._connectComputationToSlicePlane(a),this._connectComputationToElevation(a),this._connectComputationToTask(a)],a)};l._disconnectComputation=function(a){this._computationHandles.remove(a)};l._onComputationCollectionChange=function({added:a,removed:b}){for(const c of b)this._disconnectComputation(c);for(const c of a)this._connectComputation(c)};
l._onTargetCollectionChange=function({added:a,removed:b}){for(const c of b)this._removeTarget(c);for(const c of a)this._addTarget(c)};l._onCursorTargetChange=function(a,b){null!=b&&this._removeTarget(b);null!=a&&this._addTarget(a)};l._addTarget=function(a){this._computations.some(b=>b.target===a)||this._computations.add(new da.LineOfSightComputation({target:a}))};l._removeTarget=function(a){const b=this._computations.findIndex(c=>c.target===a);this._computations.removeAt(b)};l._connectObserver=function(){return z.handlesGroup([this._updatingHandles.add(()=>
({observerPosition:null!=this.analysis.observer?this.analysis.observer.position:null,projectedObserverPosition:A.projectOrLoad(null!=this.analysis.observer?this.analysis.observer.position:null,this.view.spatialReference),observerElevationInfo:null!=this.analysis.observer?this.analysis.observer.elevationInfo:null,observerFeatureInfo:null!=this.analysis.observer?this.analysis.observer.feature:null}),({observerPosition:a,projectedObserverPosition:b,observerElevationInfo:c,observerFeatureInfo:d})=>{null!=
b.pending?this._updatingHandles.addPromise(b.pending):this._onObserverPositionChange(a,b.geometry,c,d,!0)},D.initial)])};l._connectComputations=function(){return this._updatingHandles.addOnCollectionChange(()=>this._computations,a=>this._onComputationCollectionChange(a),{initial:!0,final:!0})};l._connectTargets=function(){return z.handlesGroup([this._updatingHandles.addOnCollectionChange(()=>this.analysis.targets,a=>this._onTargetCollectionChange(a),{initial:!0,final:!0}),this._updatingHandles.add(()=>
this.analysisViewData.cursorTarget,(a,b)=>{this._onCursorTargetChange(a,b)})])};l._getEffectiveElevationInfo=function(a,b){return a.hasZ?b??{mode:"absolute-height",offset:0}:{mode:"on-the-ground",offset:0}};K._createClass(F,[{key:"updating",get:function(){return this._frameTask.updating||this._updatingHandles.updating}},{key:"priority",get:function(){return this._frameTask.priority},set:function(a){this._frameTask.priority=a}},{key:"_computations",get:function(){return this.analysisViewData.computations}},
{key:"_elevationAlignedObserverPositionRenderSpace",get:function(){return this.analysisViewData.observerEngineLocation},set:function(a){this.analysisViewData.observerEngineLocation=a}},{key:"_screenPixelSize",get:function(){return this.view.state.camera.computeScreenPixelSizeAt(this._elevationAlignedObserverPositionRenderSpace)}},{key:"_isCameraDirty",get:function(){var a=this.analysisViewData.elevationAlignedObserver;const {view:b}=this,{renderCoordsHelper:c}=b;if(null==a||null==c)return!1;const d=
G;c.toRenderCoords(a,d);a=b.state.camera.computeScreenPixelSizeAt(d);return.1<Math.abs((a-this._screenPixelSize)/this._screenPixelSize)}}]);return F}(X.EventedMixin(V));q.__decorate([t.property({constructOnly:!0})],p.LineOfSightController.prototype,"analysis",void 0);q.__decorate([t.property({constructOnly:!0})],p.LineOfSightController.prototype,"analysisViewData",void 0);q.__decorate([t.property({constructOnly:!0})],p.LineOfSightController.prototype,"view",void 0);q.__decorate([t.property()],p.LineOfSightController.prototype,
"updating",null);q.__decorate([t.property()],p.LineOfSightController.prototype,"priority",null);q.__decorate([t.property()],p.LineOfSightController.prototype,"updateOnCameraChange",void 0);q.__decorate([t.property()],p.LineOfSightController.prototype,"_computations",null);q.__decorate([t.property()],p.LineOfSightController.prototype,"_elevationAlignedObserverPositionRenderSpace",null);q.__decorate([t.property()],p.LineOfSightController.prototype,"_observerGroundOffsetRenderSpace",void 0);q.__decorate([t.property()],
p.LineOfSightController.prototype,"_effectiveObserverElevationMode",void 0);q.__decorate([t.property()],p.LineOfSightController.prototype,"_observerFeatureId",void 0);q.__decorate([t.property()],p.LineOfSightController.prototype,"_screenPixelSize",null);q.__decorate([t.property({readOnly:!0})],p.LineOfSightController.prototype,"_updatingHandles",void 0);q.__decorate([t.property()],p.LineOfSightController.prototype,"_frameTask",void 0);q.__decorate([t.property()],p.LineOfSightController.prototype,
"_isCameraDirty",null);p.LineOfSightController=q.__decorate([aa.subclass("esri.views.3d.analysis.LineOfSight.LineOfSightController")],p.LineOfSightController);const G=x.create(),S=J.create(),H=E.empty();Object.defineProperty(p,Symbol.toStringTag,{value:"Module"})});