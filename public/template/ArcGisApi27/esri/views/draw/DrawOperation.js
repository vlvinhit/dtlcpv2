// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../core/Evented ../../core/HandleOwner ../../core/lang ../../core/maybe ../../core/promiseUtils ../../core/reactiveUtils ../../core/screenUtils ../../core/accessorSupport/decorators/property ../../core/accessorSupport/ensureType ../../core/accessorSupport/decorators/subclass ../../core/accessorSupport/diffUtils ../../layers/graphics/dehydratedFeatureComparison ../../support/elevationInfoUtils ../ViewingMode ./DrawingMode ./DrawManipulator ../interactive/coordinateHelper ../interactive/dragEventPipeline ../interactive/editGeometry/EditGeometry ../interactive/editGeometry/EditGeometryOperations ../interactive/sketch/SketchLabelOptions ../interactive/sketch/SketchTooltipOptions ../interactive/snapping/SnappingContext ../interactive/snapping/SnappingDragPipelineStep ../interactive/snapping/SnappingOperation ../interactive/snapping/snappingUtils".split(" "),
function(f,x,h,G,H,I,r,y,q,J,k,U,K,L,z,M,N,A,O,P,t,B,Q,C,D,E,R,S,T){f.DrawOperation=function(F){function u(a){var b=F.call(this,a)||this;b._createOperationCompleted=!1;b._pointerDownStates=new Set;b._stagedScreenPoint=null;b._stagedPointerType=null;b.isDraped=!0;b.labelOptions=new C;b.tooltipOptions=new D;b.cursor=null;b.loading=!1;b.snapToSceneEnabled=null;b.lastVertex=null;null==a.elevationInfo&&(b.elevationInfo=M.getEffectiveElevationInfo(!!a.hasZ));return b}x._inherits(u,F);var g=u.prototype;
g.initialize=function(){const {geometryType:a,view:b}=this,e=b.spatialReference,d="viewingMode"in b.state?b.state.viewingMode:N.ViewingMode.Local,p="segment"===a||"multipoint"===a?"polyline":a;this.coordinateHelper=P.createCoordinateHelper(this.hasZ,this.hasM,e);this._editGeometryOperations=new Q.EditGeometryOperations(new B.EditGeometry(p,this.coordinateHelper));this._snappingOperation=new S.SnappingOperation({view:b,constrainResult:c=>null==c?c:this._getEffectiveDrawSurface()?.constrainZ(c)});this.addHandles([q.watch(()=>
this.stagedVertex,c=>{null!=c&&this.emit("cursor-update",{updated:null,vertices:[{componentIndex:0,vertexIndex:this._activeComponent.vertices.length,coordinates:this.coordinateHelper.pointToArray(c)}],operation:"apply",type:"vertex-update"})},{sync:!0,equals:(c,l)=>r.equalsMaybe(c,l,z.pointEquals)}),q.watch(()=>this.view.viewpoint,(c,l)=>{c&&l&&L.diff(c,l)&&this._onViewpointChange()})]);this._activeComponent=new B.Component(e,d);this._editGeometryOperations.data.components.push(this._activeComponent);
const m=this.segmentLabels;null!=m&&(m.context={view:b,editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,labelOptions:this.labelOptions},this.addHandles([q.watch(()=>this.labelOptions.enabled,c=>{m.visible=c},q.syncAndInitial),this.on("cursor-update",()=>{const c=this.stagedVertex;m.stagedVertex=null!=c?this.coordinateHelper.pointToVector(c):null})]));this.addHandles(this._editGeometryOperations.on(["vertex-add","vertex-update","vertex-remove"],c=>{const l=c.vertices.map(v=>
({componentIndex:0,vertexIndex:v.index,coordinates:this.coordinateHelper.vectorToArray(v.pos)})),w=l.map(v=>v.coordinates);switch(c.type){case "vertex-add":this.emit(c.type,{...c,added:w,vertices:l});break;case "vertex-update":this.emit(c.type,{...c,updated:w,vertices:l});break;case "vertex-remove":this.emit(c.type,{...c,removed:w,vertices:l})}c=this._activeComponent.getLastVertex();c=null!=c?this.coordinateHelper.vectorToDehydratedPoint(c.pos):null;null!=c&&null!=this.lastVertex&&z.pointEquals(this.lastVertex,
c)||(this.lastVertex=c)}));const n=this._manipulator=new O.DrawManipulator({grabbableForEvent:c=>"click"!==this.drawingMode?!0:"touch"===c.pointerType&&this._snappingEnabled&&1===this._pointerDownStates.size});this.manipulators.add(n);n.grabbable="point"!==a;this.addHandles([this._createManipulatorDragPipeline(n),n.events.on("immediate-click",c=>this._onImmediateClick(c)),n.events.on("immediate-double-click",c=>this._onImmediateDoubleClick(c)),q.watch(()=>({cursor:this.cursor,loading:this.loading}),
({cursor:c,loading:l})=>{n.cursor=l?"progress":c},q.syncAndInitial)]);T.setupSnappingToggleHandles(this,()=>{const c=this._getSnappingContext(this.view.inputManager.latestPointerType??"mouse");null!=this.snappingManager&&this.updatingHandles.addPromise(y.ignoreAbortErrors(this._snappingOperation.resnap(this.snappingManager,c)))})};g.destroy=function(){r.destroyMaybe(this.segmentLabels);r.destroyMaybe(this._snappingOperation);this._editGeometryOperations=r.destroyMaybe(this._editGeometryOperations)};
g.cancel=function(){this.complete({aborted:!0})};g.commitStagedVertex=function(){this._snappingOperation.abort();if(null!=this.stagedVertex){const {stagedVertex:a}=this;this.stagedVertex=null;this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(a))}};g.complete=function(a){a=a&&a.aborted||!1;this._snappingOperation.abort();null!=this.snappingManager&&this.snappingManager.doneSnapping();"segment"===this.geometryType||"point"===this.geometryType?this.commitStagedVertex():this.stagedVertex=
null;this._createOperationCompleted=!("multipoint"===this.geometryType&&0===this.numVertices||"polyline"===this.geometryType&&2>this.numVertices||"polygon"===this.geometryType&&3>this.numVertices);(this.isCompleted||a)&&this.emit("complete",{vertices:this.vertices.map((b,e)=>({componentIndex:0,vertexIndex:e,coordinates:b})),aborted:a,type:"complete"})};g.onInputEvent=function(a){switch(a.type){case "pointer-down":this._pointerDownStates.add(a.pointerId);break;case "pointer-up":this._pointerDownStates.delete(a.pointerId)}switch(a.type){case "pointer-move":return this._onPointerMove(a);
case "hold":return this._onHold(a)}};g.redo=function(){this._editGeometryOperations.redo()};g.undo=function(){null!=this.snappingManager&&this.snappingManager.doneSnapping();this._editGeometryOperations.undo()};g._closeOnClickVertexIndex=function(a){const b=this._activeComponent;if("polygon"===this.geometryType&&2<b.vertices.length){if(this._vertexWithinPointerDistance(b.vertices[0].pos,a))return 0;if(this._vertexWithinPointerDistance(b.vertices[b.vertices.length-1].pos,a))return b.vertices.length-
1}return null};g._createManipulatorDragPipeline=function(a){switch(this.drawingMode){case "click":return this._createManipulatorDragPipelineClick(a);case "freehand":return this._createManipulatorDragPipelineFreehand(a);case "hybrid":return this._createManipulatorDragPipelineHybrid(a)}};g._createManipulatorDragPipelineClick=function(a){return t.createManipulatorDragEventPipeline(a,(b,e,d,p)=>{const m="touch"===p&&this._snappingEnabled;if(!this.isCompleted&&m){var {snappingStep:n,cancelSnapping:c}=
R.createSnapDragEventPipelineStep({predicate:()=>m,snappingManager:this.snappingManager,snappingContext:new E.SnappingContext({editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,pointer:p,visualizer:this.snappingVisualizer}),updatingHandles:this.updatingHandles,useZ:!this._requiresScenePoint});d=d.next(l=>{m&&null!=this.snappingManager&&this.snappingManager.doneSnapping();return l}).next(c);e.next(this._screenToMapDragEventStep()).next(l=>{"start"===l.action&&(this.stagedVertex=
l.mapStart,("segment"===this.geometryType||m&&0===this.numVertices)&&this.commitStagedVertex());return l}).next(t.sceneSnappingAtLocation(this.view,this.elevationInfo)).next(...n).next(l=>{m&&(this.stagedVertex=l.mapEnd,"end"===l.action&&this.commitStagedVertex());return l}).next(l=>{"end"!==l.action||"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete();return l})}})};g._createManipulatorDragPipelineFreehand=function(a){return t.createManipulatorDragEventPipeline(a,(b,e)=>{this.isCompleted||
e.next(this._screenToMapDragEventStep()).next(d=>{"start"===d.action&&(null==this.stagedVertex&&(this.stagedVertex=d.mapStart),"segment"===this.geometryType&&this.commitStagedVertex());return d}).next(d=>{switch(d.action){case "start":case "update":this.stagedVertex=d.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case "end":this.complete()}return d})})};g._createManipulatorDragPipelineHybrid=function(a){return t.createManipulatorDragEventPipeline(a,
(b,e)=>{this.isCompleted||e.next(this._screenToMapDragEventStep()).next(d=>{"start"===d.action&&(null==this.stagedVertex&&(this.stagedVertex=d.mapStart),this.commitStagedVertex());return d}).next(d=>{switch(d.action){case "start":case "update":this.stagedVertex=d.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case "end":"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete()}return d})})};g._getEffectiveDrawSurface=function(){if(null==
this.elevationDrawSurface)return this.drawSurface;if(!this.coordinateHelper.hasZ())return this.elevationDrawSurface.defaultZ=null,this.elevationDrawSurface;let a=this.defaultZ,b=!1;null!=this.elevationInfo&&"absolute-height"===this.elevationInfo.mode&&(b=!0);null!=this.snapToSceneEnabled&&(b=this.snapToSceneEnabled);null!=this.elevationInfo&&"on-the-ground"===this.elevationInfo.mode&&(b=!1);this._drawAtFixedElevation&&(a=this.coordinateHelper.getZ(this._activeComponent.vertices[0].pos),b=!1);if(b)return this.drawSurface;
this.elevationDrawSurface.defaultZ=a;return this.elevationDrawSurface};g._mapToScreen=function(a){return this._getEffectiveDrawSurface()?.mapToScreen(a)};g._onHold=function(a){this._snappingOperation.abort();"click"===this.drawingMode&&"touch"===a.pointerType&&this._snappingEnabled&&(this.stagedVertex=a.mapPoint);a.stopPropagation()};g._onImmediateClick=function(a){if(!("mouse"===a.pointerType&&2===a.button||this._manipulator.dragging)){var b=this._activeComponent;if(null!=this._closeOnClickVertexIndex(a.screenPoint))a.stopPropagation(),
this.complete();else{var e=this._screenToMap(a.screenPoint);if(null!=e)switch(this.drawingMode){case "freehand":"point"===this.geometryType&&(null!=this.stagedVertex?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(e)),this.complete());break;case "click":case "hybrid":this._snappingOperation.abort(),null!=this.stagedVertex?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(e)),("point"===this.geometryType||
"segment"===this.geometryType&&2===b.vertices.length||"segment"===this.geometryType&&"hybrid"===this.drawingMode&&1===b.vertices.length)&&this.complete()}a.stopPropagation()}}};g._onImmediateDoubleClick=function(a){this._manipulator.dragging||"point"===this.geometryType||(this.complete(),a.stopPropagation())};g._onPointerMove=function(a){const b=J.createScreenPoint(a.x,a.y);this._stagedScreenPoint=b;this._stagedPointerType=a.pointerType;const e=this._snappingOperation,d=this._manipulator;d.dragging||
this._pointerDownStates.has(a.pointerId)||d.grabbing||!d.interactive?e.abort():(a.stopPropagation(),this._updateStagedVertexOnPointerMove(b,a.pointerType))};g._onViewpointChange=function(){const a=this._manipulator;!this._stagedScreenPoint||a.dragging||a.grabbing||!a.interactive?this._snappingOperation.abort():this._updateStagedVertexOnPointerMove(this._stagedScreenPoint,this._stagedPointerType??"mouse")};g._updateStagedVertexOnPointerMove=function(a,b){const e=this._snappingOperation;var d=this._closeOnClickVertexIndex(a);
if(null!=d)this._closeOnVertex(d),e.abort();else if(d=this._screenToMap(a),a=this._requiresScenePoint?this.drawSurface?.screenToMap(a):null,null==d)this.cursor=null,e.abort();else{this.cursor="crosshair";var p=this.snappingManager;null==p?(this.stagedVertex=d,e.abort()):(b=this._getSnappingContext(b),this.updatingHandles.addPromise(y.ignoreAbortErrors(e.snap({point:d,scenePoint:a},p,b))))}};g._closeOnVertex=function(a){this.stagedVertex=null;a={componentIndex:0,vertexIndex:a,coordinates:this.coordinateHelper.vectorToArray(this._activeComponent.vertices[a].pos)};
this.emit("cursor-update",{updated:null,vertices:[a],operation:"apply",type:"vertex-update"})};g._screenToMap=function(a){return this._getEffectiveDrawSurface()?.screenToMap(a)};g._screenToMapDragEventStep=function(){let a=null;return b=>{"start"===b.action&&(a=this._screenToMap(b.screenStart));if(null==a)return null;const e=this._screenToMap(b.screenEnd);return null!=e?{...b,mapStart:a,mapEnd:e}:null}};g._vertexWithinPointerDistance=function(a,b){const e=this._mapToScreen(this.coordinateHelper.vectorToDehydratedPoint(a));
null!=e?(a=e.x-b.x,b=e.y-b.y,b=25>=a*a+b*b):b=!1;return b};g._getSnappingContext=function(a){const b=this._drawAtFixedElevation?r.applySome(this.elevationDrawSurface,({defaultZ:e})=>e):null;return new E.SnappingContext({editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,pointer:a,visualizer:this.snappingVisualizer,selfSnappingZ:null!=b?{value:b,elevationInfo:this.elevationInfo}:null})};x._createClass(u,[{key:"_snappingEnabled",get:function(){return null!=this.snappingManager&&
this.snappingManager.options.effectiveEnabled}},{key:"_requiresScenePoint",get:function(){const a=this._getEffectiveDrawSurface();return"3d"===this.view.type&&this.drawSurface!==a}},{key:"canRedo",get:function(){return this._editGeometryOperations.canRedo}},{key:"canUndo",get:function(){return this._editGeometryOperations.canUndo}},{key:"committedVertices",get:function(){return this._activeComponent.vertices.map(a=>this.coordinateHelper.vectorToArray(a.pos))}},{key:"drawingMode",set:function(a){this._set("drawingMode",
a??A.defaultDrawingMode)}},{key:"interactive",get:function(){return this._manipulator.interactive},set:function(a){this._manipulator.interactive=a}},{key:"isCompleted",get:function(){return this._createOperationCompleted}},{key:"numCommittedVertices",get:function(){return this._activeComponent.vertices.length}},{key:"numVertices",get:function(){return null!=this.stagedVertex?this._activeComponent.vertices.length+1:this._activeComponent.vertices.length}},{key:"snappingOptions",get:function(){return null!=
this.snappingManager?this.snappingManager.options:null}},{key:"stagedVertex",get:function(){return this._snappingOperation.stagedPoint},set:function(a){this._snappingOperation.stagedPoint=I.clone(a)}},{key:"updating",get:function(){return this.updatingHandles.updating}},{key:"vertices",get:function(){const a=this.committedVertices;null!=this.stagedVertex&&a.push(this.coordinateHelper.pointToArray(this.stagedVertex));return a}},{key:"_drawAtFixedElevation",get:function(){return("segment"===this.geometryType||
"polygon"===this.geometryType)&&0<this.numCommittedVertices}}]);return u}(G.EventedMixin(H.HandleOwner));h.__decorate([k.property()],f.DrawOperation.prototype,"_snappingEnabled",null);h.__decorate([k.property()],f.DrawOperation.prototype,"defaultZ",void 0);h.__decorate([k.property()],f.DrawOperation.prototype,"isDraped",void 0);h.__decorate([k.property({value:A.defaultDrawingMode})],f.DrawOperation.prototype,"drawingMode",null);h.__decorate([k.property({constructOnly:!0})],f.DrawOperation.prototype,
"elevationDrawSurface",void 0);h.__decorate([k.property({constructOnly:!0})],f.DrawOperation.prototype,"elevationInfo",void 0);h.__decorate([k.property({constructOnly:!0,type:C})],f.DrawOperation.prototype,"labelOptions",void 0);h.__decorate([k.property({constructOnly:!0,type:D})],f.DrawOperation.prototype,"tooltipOptions",void 0);h.__decorate([k.property({constructOnly:!0})],f.DrawOperation.prototype,"geometryType",void 0);h.__decorate([k.property({constructOnly:!0})],f.DrawOperation.prototype,"hasM",
void 0);h.__decorate([k.property({constructOnly:!0})],f.DrawOperation.prototype,"hasZ",void 0);h.__decorate([k.property()],f.DrawOperation.prototype,"cursor",void 0);h.__decorate([k.property()],f.DrawOperation.prototype,"loading",void 0);h.__decorate([k.property({constructOnly:!0})],f.DrawOperation.prototype,"manipulators",void 0);h.__decorate([k.property({constructOnly:!0})],f.DrawOperation.prototype,"drawSurface",void 0);h.__decorate([k.property({constructOnly:!0})],f.DrawOperation.prototype,"segmentLabels",
void 0);h.__decorate([k.property({constructOnly:!0})],f.DrawOperation.prototype,"snappingManager",void 0);h.__decorate([k.property({constructOnly:!0})],f.DrawOperation.prototype,"snappingVisualizer",void 0);h.__decorate([k.property()],f.DrawOperation.prototype,"snapToSceneEnabled",void 0);h.__decorate([k.property()],f.DrawOperation.prototype,"_snappingOperation",void 0);h.__decorate([k.property()],f.DrawOperation.prototype,"stagedVertex",null);h.__decorate([k.property()],f.DrawOperation.prototype,
"lastVertex",void 0);h.__decorate([k.property()],f.DrawOperation.prototype,"updating",null);h.__decorate([k.property({constructOnly:!0})],f.DrawOperation.prototype,"view",void 0);f.DrawOperation=h.__decorate([K.subclass("esri.views.draw.DrawOperation")],f.DrawOperation);Object.defineProperty(f,Symbol.toStringTag,{value:"Module"})});