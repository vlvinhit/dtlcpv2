// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("../../../../chunks/_rollupPluginBabelHelpers ../../../../geometry/support/aaBoundingRect ../../../../geometry/support/centroid ../../../../geometry/support/jsonUtils ../../../../geometry/support/quantizationUtils ../../../../geometry/support/spatialReferenceUtils ../../../../layers/graphics/featureConversionUtils ../../../../layers/graphics/OptimizedGeometry".split(" "),function(A,q,B,x,h,C,r,k){function y(e){e.coords.length=0;e.lengths.length=0}const n=new k,w=new k;k=function(){function e(){this.bounds=
q.create();this.graphic=null}e.acquire=function(b=null,f,c,d,a){let g;0===e._pool.length?g=new e:(g=e._pool.pop(),this._set.delete(g));g.acquire(b,f,c,d,a);return g};e.release=function(b){b&&!this._set.has(b)&&(b.release(),this._pool.push(b),this._set.add(b))};e.getCentroidQuantized=function(b,f){if(x.isPolygon(b.geometry)){const c=b.symbol;if(null==c)return null;if(0<c?.layers.length&&c.layers.some(d=>"text"===d.type||"marker"===d.type))return b=B.polygonCentroid(b.geometry),null!==b?h.quantizePoint(f,
{},{x:b[0],y:b[1]},!1,!1):null}return null};var t=e.prototype;t.acquire=function(b=null,f,c,d,a){b&&this.set(b,f,c,d,a)};t.release=function(){this.geometry=this.symbolResource=this.graphic=null};t.set=function(b,f,c,d,a){this.graphic=b;this.geometry=c;this.symbolResource=f;this.bounds=d;a&&(this.size=a)};t.getGeometryQuantized=function(b,f,c,d){var a=this.geometry;const g=x.getJsonType(a);if(null==g)return null;switch(g){case "esriGeometryPolygon":({rings:a}=a);if(!a||0===a.length)return null;c=1===
a.length&&2===a[0].length?h.quantizeGeometry(b,{paths:[[a[0][0],a[0][1]]]}):h.quantizeGeometry(b,this.geometry);if(!c&&(c=h.quantizeGeometry(b,{x:a[0][0][0],y:a[0][0][1]}))){const {x:u,y:p}=c;return{rings:[[[u-1,p],[1,-1],[1,1],[-1,1],[-1,-1]]]}}return c;case "esriGeometryPolyline":return y(n),y(w),c=a.hasZ??!1,d=a.hasM??!1,r.convertFromPolyline(n,a),r.generalizeOptimizedGeometry(w,n,c,d,"esriGeometryPolyline",b.scale[0]),r.quantizeOptimizedGeometry(n,w,c,d,"esriGeometryPolyline",b),r.convertToPolyline(n,
a.hasZ??!1,a.hasM??!1);case "esriGeometryMultipoint":const l=.5*d*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]);c=C.getInfo(c);a=a.points;if(c){const [u,p]=c.valid,z=p-u;a=a.filter(m=>{if(m[0]+l>p||m[0]-l<u){const v=[...m];v[0]=m[0]+l>p?v[0]-z:v[0]+z;return q.containsPointWithMargin(f,m,l)||q.containsPointWithMargin(f,v,l)}return q.containsPointWithMargin(f,m,l)})}return 0===a.length?{points:a}:h.quantizeGeometry(b,{points:a})}return h.quantizeGeometry(b,
this.geometry)};A._createClass(e,[{key:"symbol",get:function(){return this.symbolResource.symbol}}]);return e}();k._pool=[];k._set=new Set;return k});