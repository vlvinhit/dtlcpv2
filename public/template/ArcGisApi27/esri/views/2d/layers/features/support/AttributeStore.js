// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("require ../../../../../chunks/_rollupPluginBabelHelpers ../../../../../core/Error ../../../../../core/has ../../../../../core/Logger ../../../../../core/mathUtils ../../../../../core/maybe ../../../../../core/promiseUtils ../../../../../core/accessorSupport/diffUtils ../../../../../core/support/WatchUpdatingTracking ../../../../../layers/support/FieldsIndex ../../../engine/webgl/definitions ../../../engine/webgl/DisplayId ../../../engine/webgl/Utils ../../../engine/webgl/util/debug ../tileRenderers/support/visualVariablesUtils ../../../../webgl/enums".split(" "),
function(F,B,w,l,G,H,x,y,I,J,K,q,m,L,C,M,r){function z(p,f){return a=>f(p(a))}const t=G.getLogger("esri.views.layers.2d.features.support.AttributeStore"),u=C.createDebugLogger(C.DEBUG_ATTR_UPDATES,t);var A=l("esri-shared-array-buffer"),D=l("esri-atomics");let N=function(){function p(a,b,c,d){this.size=0;this.texelSize=4;this.dirtyEnd=this.dirtyStart=0;const {pixelType:e,layout:g,textureOnly:k}=d;this.textureOnly=k||!1;this.pixelType=e;this._ctype=b;this.layout=g;this._resetRange();this._shared=a;
this.size=c;k||(this.data=this._initData(e,c,a,b))}var f=p.prototype;f.unsetComponentAllTexels=function(a,b){const c=this.data;for(let d=0;d<this.size*this.size;d++)c[d*this.texelSize+a]&=~b;this.dirtyStart=0;this.dirtyEnd=this.size*this.size-1};f.setComponentAllTexels=function(a,b){const c=this.data;for(let d=0;d<this.size*this.size;d++)c[d*this.texelSize+a]|=255&b;this.dirtyStart=0;this.dirtyEnd=this.size*this.size-1};f.setComponent=function(a,b,c){const d=this.data;for(const e of c)d[e*this.texelSize+
a]|=b,this.dirtyStart=Math.min(this.dirtyStart,e),this.dirtyEnd=Math.max(this.dirtyEnd,e)};f.setComponentTexel=function(a,b,c){this.data[c*this.texelSize+a]|=b;this.dirtyStart=Math.min(this.dirtyStart,c);this.dirtyEnd=Math.max(this.dirtyEnd,c)};f.unsetComponentTexel=function(a,b,c){this.data[c*this.texelSize+a]&=~b;this.dirtyStart=Math.min(this.dirtyStart,c);this.dirtyEnd=Math.max(this.dirtyEnd,c)};f.getData=function(a,b){a=m.getDisplayIdTexel(a);return this.data[a*this.texelSize+b]};f.setData=function(a,
b,c){a=m.getDisplayIdTexel(a);0===(this.layout&1<<b)?t.error("mapview-attributes-store","Tried to set a value for a texel's readonly component"):null!=this.data&&(this.data[a*this.texelSize+b]=c,this.dirtyStart=Math.min(this.dirtyStart,a),this.dirtyEnd=Math.max(this.dirtyEnd,a))};f.lock=function(){this.pixelType===r.PixelType.UNSIGNED_BYTE&&this._shared&&D&&"local"!==this._ctype&&Atomics.store(this.data,0,1)};f.unlock=function(){this.pixelType===r.PixelType.UNSIGNED_BYTE&&this._shared&&D&&"local"!==
this._ctype&&Atomics.store(this.data,0,0)};f.expand=function(a){this.size=a;this.textureOnly||(a=this._initData(this.pixelType,a,this._shared,this._ctype),a.set(this.data),this.data=a)};f.toMessage=function(){const a=this.dirtyStart,b=this.dirtyEnd;var c=this.texelSize;if(a>b)return null;this._resetRange();const d=this.pixelType,e=this.layout,g=this.data;c=!this._shared&&"local"!==this._ctype&&g.slice(a*c,(b+1)*c)||null;return{start:a,end:b,data:c,pixelType:d,layout:e}};f._initData=function(a,b,c,
d){c=c&&"local"!==d?SharedArrayBuffer:ArrayBuffer;a=L.getPixelArrayCtor(a);b=new a(new c(b*b*4*a.BYTES_PER_ELEMENT));for(a=0;a<b.length;a+=4)b[a+1]=255;return b};f._resetRange=function(){this.dirtyStart=2147483647;this.dirtyEnd=0};B._createClass(p,[{key:"buffer",get:function(){return x.applySome(this.data,a=>a.buffer)}}]);return p}();return function(){function p(a,b){this._client=a;this.config=b;this.updatingHandles=new J.WatchUpdatingTracking;this._blocks=[];this._filters=Array(q.MAX_FILTERS);this._attributeComputeInfo=
null;this._targetType=0;this._abortController=new AbortController;this._hasScaleExpr=!1;this._size=32;this._currUpdate=this._nextUpdate=null;this._idsToHighlight=new Set;a=b.supportsTextureFloat?r.PixelType.FLOAT:r.PixelType.UNSIGNED_BYTE;u(`Creating AttributeStore ${A?"with":"without"} shared memory`);this._blockDescriptors=[{pixelType:r.PixelType.UNSIGNED_BYTE,layout:1},{pixelType:r.PixelType.UNSIGNED_BYTE,layout:15,textureOnly:!0},{pixelType:r.PixelType.UNSIGNED_BYTE,layout:15,textureOnly:!0},
{pixelType:a,layout:15},{pixelType:a,layout:15},{pixelType:a,layout:15},{pixelType:a,layout:15}];this._blocks=this._blockDescriptors.map(()=>null)}var f=p.prototype;f.destroy=function(){this._abortController.abort();this.updatingHandles.destroy()};f.isUpdating=function(){const a=this.updatingHandles.updating||!!this._nextUpdate;l("esri-2d-log-updating")&&console.log(`Updating AttributeStore: ${a}\n  -> updatingHandles ${this.updatingHandles.updating} (currUpdate: ${!!this._currUpdate})\n  -> nextUpdate: ${!!this._nextUpdate}\n`);
return a};f.update=function(a,b){this.config=b;b=b.schema.processors[0].storage;const c=I.diff(this._schema,b);if(a.targets.feature||a.targets.aggregate)a.storage.data=!0;if(c&&(l("esri-2d-update-debug")&&console.debug("Applying Update - AttributeStore:",c),a.storage.data=!0,this._schema=b,this._attributeComputeInfo=null,null!=b)){switch(b.target){case "feature":this._targetType=m.DISPLAY_ID_TYPE_FEATURE;break;case "aggregate":this._targetType=m.DISPLAY_ID_TYPE_AGGREGATE}if("subtype"===b.type){this._attributeComputeInfo=
{isSubtype:!0,subtypeField:b.subtypeField,map:new Map};for(const d in b.mapping)if(a=b.mapping[d],null!=a&&null!=a.vvMapping)for(const e of a.vvMapping)this._bindAttribute(e,parseInt(d,10))}else{this._attributeComputeInfo={isSubtype:!1,map:new Map};if(null!=b.vvMapping)for(const d of b.vvMapping)this._bindAttribute(d);if(null!=b.attributeMapping)for(const d of b.attributeMapping)this._bindAttribute(d)}}};f.onTileData=function(a,b){if(null!=b.addOrUpdate)for(a=b.addOrUpdate.getCursor();a.next();)b=
a.getDisplayId(),this.setAttributeData(b,a)};f.setHighlight=async function(a,b){const c=this._getBlock(0);b=b.map(d=>m.getDisplayIdTexel(d));c.lock();c.unsetComponentAllTexels(0,1);c.setComponent(0,1,b);c.unlock();this._idsToHighlight.clear();for(const d of a)this._idsToHighlight.add(d);await this.sendUpdates()};f.updateFilters=async function(a,b,c){l("esri-2d-update-debug")&&console.debug("AttributeStore::updateFilters");const {service:d,spatialReference:e}=c;({filters:b}=b);b=b.map((g,k)=>this._updateFilter(g,
k,d,e));b=(await Promise.all(b)).some(g=>g);l("esri-2d-update-debug")&&console.debug("AttributeStore::updateFilters - finsihed");b&&(a.storage.filters=!0,l("esri-2d-update-debug")&&console.debug("Applying Update - AttributeStore:","Filters changed"))};f.setData=function(a,b,c,d){const e=m.getDisplayIdTexel(a);this._ensureSizeForTexel(e);this._getBlock(b).setData(a,c,d)};f.getData=function(a,b,c){return this._getBlock(b).getData(a,c)};f.getHighlightFlag=function(a){return this._idsToHighlight.has(a)?
q.HIGHLIGHT_FLAG:0};f.unsetAttributeData=function(a){a=m.getDisplayIdTexel(a);this._getBlock(0).setData(a,0,0)};f.setAttributeData=function(a,b){const c=m.getDisplayIdTexel(a);this._ensureSizeForTexel(c);this._getBlock(0).setData(c,0,this.getFilterFlags(b));if(this._targetType===m.getDisplayIdType(a)){a=this._attributeComputeInfo;var d=this.config.supportsTextureFloat?1:2,e=null;a&&(e=a.isSubtype?a.map.get(b.readAttribute(a.subtypeField)):a.map)&&e.size&&e.forEach((g,k)=>{const n=k*d%4;k=this._getBlock(Math.floor(k*
d/4)+q.ATTRIBUTE_DATA_VV);g=g(b);if(this.config.supportsTextureFloat)k.setData(c,n,g);else if(g===q.NAN_MAGIC_NUMBER)k.setData(c,n,255),k.setData(c,n+1,255);else{g=H.clamp(Math.round(g),-32767,32766)+32768;const h=(g&65280)>>8;k.setData(c,n,g&255);k.setData(c,n+1,h)}})}};f.sendUpdates=function(){l("esri-2d-update-debug")&&console.debug("AttributeStore::sendUpdate");if(this._nextUpdate)return this._nextUpdate.promise;if(this._currUpdate)return this._nextUpdate=y.createResolver(),this.updatingHandles.addPromise(this._nextUpdate.promise),
this._nextUpdate.promise;const a={blocks:this._blocks.map(b=>null!=b?b.toMessage():null)};return this._currUpdate=this._createResources().then(()=>{var b=()=>{this._currUpdate=null;if(this._nextUpdate){const c=this._nextUpdate;this._nextUpdate=null;this.sendUpdates().then(()=>c.resolve())}else l("esri-2d-update-debug")&&console.debug("AttributeStore::sendUpdate::No additional updates queued")};l("esri-2d-update-debug")&&console.debug("AttributeStore::sendUpdate::client.update");b=this.updatingHandles.addPromise(this._client.update(a,
this._signal).then(b).catch(b));this._client.render(this._signal);return b}).catch(b=>{if(y.isAbortError(b))return this._createResourcesPromise=null,this._createResources();t.error(new w("mapview-attribute-store","Encountered an error during client update",b))})};f._ensureSizeForTexel=function(a){for(;a>=this._size*this._size&&!this._expand(););};f._bindAttribute=function(a,b){function c(){const {normalizationField:h}=a;return h?v=>{const E=v.readAttribute(h);return E?v.readAttribute(a.field)/E:null}:
v=>v.readAttribute(a.field)}function d(){a.normalizationField&&t.warn("mapview-arcade","Ignoring normalizationField specified with an arcade expression which is not supported.");return h=>h.getComputedNumericAtIndex(a.fieldIndex)}let e;if(null!=a.fieldIndex)e=d();else if(a.field)e=c();else return;const {valueRepresentation:g}=a;g&&(e=z(e,h=>M.getVisualVariableSizeValueRepresentationRatio(h,g)));const k=h=>null===h||isNaN(h)||Infinity===h||-Infinity===h?q.NAN_MAGIC_NUMBER:h,n=this._attributeComputeInfo;
if(n.isSubtype){const h=n.map.get(b)??new Map;h.set(a.binding,z(e,k));n.map.set(b,h)}else n.map.set(a.binding,z(e,k))};f._createResources=function(){if(null!=this._createResourcesPromise)return this._createResourcesPromise;this._getBlock(q.ATTRIBUTE_DATA_ANIMATION);this._getBlock(q.ATTRIBUTE_DATA_GPGPU);u("Initializing AttributeStore");var a={shared:A&&"local"!==this._client.type,size:this._size,blocks:x.mapMany(this._blocks,b=>({textureOnly:b.textureOnly,buffer:b.buffer,pixelType:b.pixelType}))};
this._createResourcesPromise=a=this._client.initialize(a,this._signal).catch(b=>{y.isAbortError(b)?this._createResourcesPromise=null:t.error(new w("mapview-attribute-store","Encountered an error during client initialization",b))});a.then(()=>null==this._createResourcesPromise?this._createResources():void 0);return a};f._getBlock=function(a){var b=this._blocks[a];if(null!=b)return b;u(`Initializing AttributeBlock at index ${a}`);b=new N(A,this._client.type,this._size,this._blockDescriptors[a]);this._blocks[a]=
b;this._createResourcesPromise=null;return b};f._expand=function(){if(this._size<this.config.maxTextureSize){const a=this._size<<=1;u("Expanding block size to",a,this._blocks);x.forEachSome(this._blocks,b=>b.expand(a));this._createResourcesPromise=null;this._size=a;return 0}t.error(new w("mapview-limitations","Maximum number of onscreen features exceeded."));return-1};f._updateFilter=async function(a,b,c,d){const e=this._filters[b];if(!e&&!a||(null!=e&&e.hash)===JSON.stringify(a))return!1;if(null==
a){if(!e)return!1;a=1<<b+1;c=this._getBlock(0);this._filters[b]=null;c.setComponentAllTexels(0,a);this.sendUpdates();return!0}await (await this._getFilter(b,c)).update(a,d);return!0};f._getFilter=async function(a,b){var c=this._filters[a];if(null!=c)return c;({default:c}=await new Promise((d,e)=>F(["./FeatureFilter"],g=>d(Object.freeze(Object.defineProperty({__proto__:null,default:g},Symbol.toStringTag,{value:"Module"}))),e)));b=new c({geometryType:b.geometryType,hasM:!1,hasZ:!1,timeInfo:b.timeInfo,
fieldsIndex:new K(b.fields)});return this._filters[a]=b};f.isVisible=function(a){return!!(this._getBlock(0).getData(a,0)&2)};f.getFilterFlags=function(a){let b=0;var c=m.getDisplayIdFilterMask(a.getDisplayId());for(let e=0;e<this._filters.length;e++){var d=this._filters[e];d=!(c&1<<e)||null==d||d.check(a);b|=(d?1:0)<<e}c=0;this._idsToHighlight.size&&(a=a.getObjectId(),c=this.getHighlightFlag(a));return b<<1|c};B._createClass(p,[{key:"hasScaleExpr",get:function(){return this._hasScaleExpr}},{key:"_signal",
get:function(){return this._abortController.signal}},{key:"hasHighlight",get:function(){return 0<this._idsToHighlight.size}}]);return p}()});