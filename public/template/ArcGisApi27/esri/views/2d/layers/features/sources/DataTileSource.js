// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/_rollupPluginBabelHelpers ../../../../../TimeExtent ../../../../../core/Evented ../../../../../core/has ../../../../../core/promiseUtils ../../../../../core/accessorSupport/diffUtils ../../../../../core/support/WatchUpdatingTracking ../../../../../rest/support/Query ./DataTileSubscription ../support/UpdateToken".split(" "),function(m,p,q,r,n,h,k,t,u,v,w){function x(g,c){const a=new Set;g&&g.forEach(b=>a.add(b));c&&c.forEach(b=>a.add(b));return a.has("*")?["*"]:
Array.from(a)}let y=function(){function g(a){this.updatingHandles=new t.WatchUpdatingTracking;this.events=new r;this._resolver=h.createResolver();this._didEdit=!1;this._subscriptions=new Map;this._outSR=a.outSR;this._serviceInfo=a.serviceInfo;this._onTileUpdateMessage=a.onMessage}var c=g.prototype;c.destroy=function(){for(const a of this._subscriptions.values())a.abort();this.updatingHandles.destroy()};c._onMessage=async function(a){const b=this._subscriptions.get(a.id);if(b)return a={...a,remove:a.remove??
[],status:a.status??w.UpdateToken.empty()},h.ignoreAbortErrors(this._onTileUpdateMessage(a,b.options))};c.update=function(a,b){var d=b.fields.length;b.outFields=x(this._schema?.outFields,b.outFields);b.outFields=b.outFields.length>=.75*d?["*"]:b.outFields;b.outFields.sort();if(d=k.diff(this._schema,b)){n("esri-2d-update-debug")&&console.debug("Applying Update - Source:",d);var l={returnCentroid:"esriGeometryPolygon"===this._serviceInfo.geometryType,returnGeometry:!0,timeReferenceUnknownClient:"stream"!==
this._serviceInfo.type&&this._serviceInfo.timeReferenceUnknownClient,outFields:b.outFields,outSpatialReference:this._outSR,orderByFields:["orderByFields"in this._serviceInfo&&this._serviceInfo.orderByFields?this._serviceInfo.orderByFields:this._serviceInfo.objectIdField+" ASC"],where:b.definitionExpression||"1\x3d1",gdbVersion:b.gdbVersion,historicMoment:b.historicMoment,timeExtent:b.timeExtent?q.fromJSON(b.timeExtent):null},e=this._schema&&k.hasDiff(d,"outFields");this._schema&&k.hasDiffAny(d,["timeExtent",
"definitionExpression","gdbVersion","historicMoment","customParameters"])&&(a.why.mesh.push("Layer filter and/or custom parameters changed"),a.why.source.push("Layer filter and/or custom parameters changed"),a.mesh=!0,a.source=!0,a.queryFilter=!0);e&&(a.why.source.push("Layer required fields changed"),a.source=!0);k.diff(l,this._queryInfo)&&(this._queryInfo=l);this._schema=b;this._resolver.resolve()}};c.whenInitialized=function(){return this._resolver.promise};c.applyUpdate=async function(a){a.queryFilter||
a.source&&this._didEdit?(this.refresh(a.version),this._didEdit=!1):(this._subscriptions.forEach(b=>b.applyUpdate(a)),await this.resend())};c.refresh=function(a,b){for(const d of this._tiles())this.unsubscribe(d),this.subscribe(d,a)};c.subscribe=function(a,b){b=new v.DataTileSubscription(a,b);this._subscriptions.set(a.id,b);this.updatingHandles.addPromise(b.done)};c.unsubscribe=function(a){const b=this.getSubscription(a.id);null!=b&&b.abort();this._subscriptions.delete(a.id)};c.createQuery=function(a=
{}){return new u({...this._queryInfo,historicMoment:this._queryInfo.historicMoment?new Date(this._queryInfo.historicMoment):null,...a})};c.getSubscription=function(a){return this._subscriptions.has(a)?this._subscriptions.get(a):null};c.queryLastEditDate=async function(){throw Error("Service does not support query type");};c.query=async function(a,b){throw Error("Service does not support query");};c._tiles=function*(){const a=Array.from(this._subscriptions.values());for(const b of a)yield b.tile};
c.edit=async function(a,b){var d=Array.from(this._subscriptions.values());const l=d.map(({tile:e})=>e);for(const e of d)e.removeIds(b);a.length&&(d=l.map(e=>{const f=this.createTileQuery(e);f.objectIds=a;return{tile:e,query:f}}).map(async({tile:e,query:f})=>({tile:e,result:await this.query(f,{query:{tile:n("esri-tiles-debug")?e.id.replaceAll("/","."):void 0}}),query:f})),d=(await h.eachAlwaysValues(d)).map(async({tile:e,result:f})=>{(f.hasFeatures||b.length||a.length)&&(e=this._subscriptions.get(e.key.id))&&
e.edit(f,a)}),await h.eachAlways(d));this._didEdit=!0};p._createClass(g,[{key:"subscriptions",get:function(){return this._subscriptions.values()}}]);return g}();m.DataTileSource=y;Object.defineProperty(m,Symbol.toStringTag,{value:"Module"})});