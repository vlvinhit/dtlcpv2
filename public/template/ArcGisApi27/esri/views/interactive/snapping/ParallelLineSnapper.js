// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../../chunks/_rollupPluginBabelHelpers ../../../chunks/vec2 ../../../chunks/vec2f64 ../../../chunks/vec3f64 ../../../support/elevationInfoUtils ./Settings ./SnappingAlgorithm ./SnappingPoint ./snappingUtils ./candidates/ParallelLineSnappingCandidate ../support/viewUtils ../../support/geometry2dUtils".split(" "),function(z,A,B,F,G,t,C,u,l,v,H,w,x){u=function(D){function y(){return D.apply(this,arguments)||this}A._inherits(y,D);var q=y.prototype;q.snapNewVertex=function(d,a){var b=
a.editGeometryOperations.data.components[0],c=b.edges.length,e=b.vertices.length;const f=[];if(2>c)return f;const {view:g}=this,h=w.vectorToScreenPoint(d,a.spatialReference,t.absoluteHeightElevationInfo,g);e=l.anyMapPointToSnappingPoint(b.vertices[e-1].pos,g,a);const m=l.anyMapPointToSnappingPoint(b.vertices[0].pos,g,a);c=b=b.edges[c-1];do{if(this.edgeExceedsShortLineThreshold(c,a)){const n=v.editEdgeToSnappingEdge(c,g,a);this._checkEdgeForParallelLines(n,e,d,h,a,f);this._checkEdgeForParallelLines(n,
m,d,h,a,f)}c=c.leftVertex.leftEdge}while(c&&c!==b);return f};q.snapExistingVertex=function(d,a){const b=[],c=a.vertexHandle;var e=c.component;if(3>e.edges.length)return b;const {view:f}=this,g=w.vectorToScreenPoint(d,a.spatialReference,t.absoluteHeightElevationInfo,f),h=c.leftEdge,m=c.rightEdge,n=e.vertices[0],I=l.anyMapPointToSnappingPoint(n.pos,f,a),E=e.vertices[e.vertices.length-1],J=l.anyMapPointToSnappingPoint(E.pos,f,a);let k=e=e.edges[0];do{if(k!==h&&k!==m&&this.edgeExceedsShortLineThreshold(k,
a)){const r=v.editEdgeToSnappingEdge(k,f,a);h&&this._checkEdgeForParallelLines(r,l.anyMapPointToSnappingPoint(h.leftVertex.pos,f,a),d,g,a,b);m&&this._checkEdgeForParallelLines(r,l.anyMapPointToSnappingPoint(m.rightVertex.pos,f,a),d,g,a,b);c===n?this._checkEdgeForParallelLines(r,J,d,g,a,b):c===E&&this._checkEdgeForParallelLines(r,I,d,g,a,b)}k=k.rightVertex.rightEdge}while(k&&k!==e);return b};q._checkEdgeForParallelLines=function(d,a,b,c,e,f){const g=d.left,h=d.right;x.projectPointToLine(p,a,g,h);if(!(B.squaredDistance(p,
a)<C.defaults.parallelLineThreshold)){x.projectPointToLine(p,b,g,h,a);var {spatialReference:m,pointer:n}=e;b=l.asSnappingPoint(G.fromValues(p[0],p[1],b[2]));v.squaredScreenDistance(c,w.vectorToScreenPoint(b,m,t.absoluteHeightElevationInfo,this.view))<this.squaredProximityThreshold(n)&&!(this.isVertical(b,a)||this.isVertical(g,h)||this._parallelToPreviousCandidate(d,f))&&f.push(new H.ParallelLineSnappingCandidate({referenceLine:d,lineStart:a,targetPoint:b,isDraped:"on-the-ground"===e.elevationInfo?.mode}))}};
q._parallelToPreviousCandidate=function(d,a){const b=d.left,c=d.right;for(const e of a)if(x.projectPointToLine(p,c,e.constraint.start,e.constraint.end,b),B.squaredDistance(p,c)<C.defaults.parallelLineThreshold)return e.addReferenceLine(d),!0;return!1};return A._createClass(y)}(u.SnappingAlgorithm);const p=F.create();z.ParallelLineSnapper=u;Object.defineProperty(z,Symbol.toStringTag,{value:"Module"})});