// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define(["../../chunks/_rollupPluginBabelHelpers","../../core/Error","../../core/workers/workers","./PixelBlock"],function(l,e,m,f){return function(){function k(){this._workerThread=null;this._destroyed=!1}var d=k.prototype;d.initialize=async function(){const a=await m.open("RasterWorker");this._destroyed?a.close():this._workerThread=a};d.destroy=function(){this._destroyed=!0;this._workerThread&&(this._workerThread.close(),this._workerThread=null)};d.convertVectorFieldData=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection",
"no available worker connection");return(a=await this._workerThread.invoke("convertVectorFieldData",{pixelBlock:a.pixelBlock.toJSON(),type:a.dataType},b))?new f(a):null};d.computeStatisticsHistograms=function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");return this._workerThread.invoke("computeStatisticsHistograms",{pixelBlock:a.pixelBlock.toJSON()},b)};d.decode=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection",
"no available worker connection");return(a=await this._workerThread.invoke("decode",a,b))?new f(a):null};d.symbolize=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");a={extent:a.extent&&a.extent.toJSON(),pixelBlock:null!=a.pixelBlock&&a.pixelBlock.toJSON(),simpleStretchParams:a.simpleStretchParams,bandIds:a.bandIds};return(b=await this._workerThread.invoke("symbolize",a,b))?new f(b):null};d.updateSymbolizer=async function(a,
b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");const c=a?.rendererJSON?.histograms;await Promise.all(this._workerThread.broadcast("updateSymbolizer",{symbolizerJSON:a.toJSON(),histograms:c},b))};d.updateRasterFunction=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");await Promise.all(this._workerThread.broadcast("updateRasterFunction",{rasterFunctionJSON:a.toJSON()},
b))};d.process=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");return(a=await this._workerThread.invoke("process",{extent:a.extent?.toJSON(),primaryPixelSizes:a.primaryPixelSizes?.map(c=>null!=c?c.toJSON():null),primaryPixelBlocks:a.primaryPixelBlocks.map(c=>null!=c?c.toJSON():null),primaryRasterIds:a.primaryRasterIds},b))?new f(a):null};d.stretch=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection",
"no available worker connection");if(!a?.pixelBlock)return null;a={srcPixelBlock:a.pixelBlock.toJSON(),stretchParams:a.stretchParams};return(b=await this._workerThread.invoke("stretch",a,b))?new f(b):null};d.split=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(!a?.pixelBlock)return null;a={srcPixelBlock:a.pixelBlock.toJSON(),tileSize:a.tileSize,maximumPyramidLevel:a.maximumPyramidLevel};const c=await this._workerThread.invoke("split",
a,b);c&&c.forEach((h,g)=>{c.set(g,h?f.fromJSON(h):null)});return c};d.estimateStatisticsHistograms=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(!a?.pixelBlock)return null;a={srcPixelBlock:a.pixelBlock.toJSON()};return await this._workerThread.invoke("estimateStatisticsHistograms",a,b)};d.mosaicAndTransform=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");
if(!a?.srcPixelBlocks?.length)return{pixelBlock:null};a={...a,srcPixelBlocks:a.srcPixelBlocks.map(c=>null!=c?c.toJSON():null)};b=await this._workerThread.invoke("mosaicAndTransform",a,b);return{pixelBlock:b.pixelBlock?new f(b.pixelBlock):null,localNorthDirections:b.localNorthDirections}};d.createFlowMesh=async function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");const c={buffer:a.flowData.data.buffer,maskBuffer:a.flowData.mask.buffer,
width:a.flowData.width,height:a.flowData.height},{meshType:h,simulationSettings:g}=a;a=await this._workerThread.invoke("createFlowMesh",{meshType:h,flowData:c,simulationSettings:g},{...b,transferList:[c.buffer,c.maskBuffer]});return{vertexData:new Float32Array(a.vertexBuffer),indexData:new Uint32Array(a.indexBuffer)}};d.getProjectionOffsetGrid=function(a,b){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");const c=null!=a.datumTransformation?a.datumTransformation.steps.map(g=>
({wkid:g.wkid,wkt:g.wkt,isInverse:g.isInverse})):null,h=null!=a.rasterTransform?a.rasterTransform.toJSON():null;a={projectedExtent:a.projectedExtent.toJSON(),srcBufferExtent:a.srcBufferExtent.toJSON(),pixelSize:a.pixelSize,hasWrapAround:a.hasWrapAround,spacing:a.spacing,datumTransformationSteps:c,rasterTransform:h,isAdaptive:a.isAdaptive,includeGCSGrid:a.includeGCSGrid};return this._workerThread.invoke("getProjectionOffsetGrid",a,b)};return l._createClass(k)}()});