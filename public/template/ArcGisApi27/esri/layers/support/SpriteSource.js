// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("../../chunks/_rollupPluginBabelHelpers ../../request ../../core/Error ../../core/Logger ../../core/typedArrayUtil ../../core/urlUtils".split(" "),function(q,l,k,r,m,n){function p(c){var f=document.createElement("canvas");const a=f.getContext("2d");f.width=c.width;f.height=c.height;a.drawImage(c,0,0,c.width,c.height);f=a.getImageData(0,0,c.width,c.height);return{width:c.width,height:c.height,data:new Uint8Array(f.data)}}return function(){function c(a,b){this._spriteSource=a;this._maxTextureSize=
b;this.devicePixelRatio=1;this._spriteImageFormat="png";this._isRetina=!1;this._spritesData={};this.height=this.width=this.image=null;this.loadStatus="not-loaded";"url"===a.type&&a.spriteFormat&&(this._spriteImageFormat=a.spriteFormat);a.pixelRatio&&(this.devicePixelRatio=a.pixelRatio);this.baseURL=a.spriteUrl}var f=c.prototype;f.getSpriteInfo=function(a){return this._spritesData?this._spritesData[a]:null};f.load=async function(a){if(this.baseURL){this.loadStatus="loading";try{await this._loadSprites(a),
this.loadStatus="loaded"}catch{this.loadStatus="failed"}}else this.loadStatus="failed"};f._loadSprites=async function(a){this._isRetina=1.15<this.devicePixelRatio;const {width:b,height:g,data:d,json:h}=await this._getSpriteData(this._spriteSource,a);if((a=Object.keys(h))&&0!==a.length&&d){this._spritesData=h;this.width=b;this.height=g;a=Math.max(this._maxTextureSize,4096);if(b>a||g>a)throw a=`Sprite resource for style ${this.baseURL} is bigger than the maximum allowed of ${a} pixels}`,r.getLogger("esri.layers.support.SpriteSource").error(a),
new k("SpriteSource",a);for(let e=0;e<d.length;e+=4)a=d[e+3]/255,d[e]*=a,d[e+1]*=a,d[e+2]*=a;this.image=d}else this._spritesData=this.image=null,this.width=this.height=0};f._getSpriteData=async function(a,b){if("image"===a.type){if(1.15>this.devicePixelRatio){if(!a.spriteSource1x)throw new k("SpriteSource","no image data provided for low resolution sprites!");b=a.spriteSource1x.image;a=a.spriteSource1x.json}else{if(!a.spriteSource2x)throw new k("SpriteSource","no image data provided for high resolution sprites!");
b=a.spriteSource2x.image;a=a.spriteSource2x.json}return"width"in b&&"height"in b&&"data"in b&&(m.isArrayBuffer(b.data)||m.isUint8ClampedArray(b.data))?{width:b.width,height:b.height,data:new Uint8Array(b.data),json:a}:{...p(b),json:a}}a=n.urlToObject(this.baseURL);const g=a.query?"?"+n.objectToQuery(a.query):"",d=this._isRetina?"@2x":"",h=`${a.path}${d}.${this._spriteImageFormat}${g}`,[e,t]=await Promise.all([l(`${a.path}${d}.json${g}`,b),l(h,{responseType:"image",...b})]);return{...p(t.data),json:e.data}};
q._createClass(c,[{key:"spriteNames",get:function(){const a=[];for(const b in this._spritesData)a.push(b);a.sort();return a}}]);return c}()});