// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("../../../chunks/_rollupPluginBabelHelpers ../../../chunks/tslib.es6 ../../../geometry ../../../core/Error ../../../core/maybe ../../../core/urlUtils ../../../core/accessorSupport/decorators/property ../../../core/accessorSupport/ensureType ../../../core/arrayUtils ../../../core/has ../../../core/accessorSupport/decorators/subclass ../RasterInfo ../RasterStorageInfo ../TileInfo ../TilemapCache ./BaseRaster ../rasterFunctions/pixelUtils ../rasterTransforms/GCSShiftTransform ../../../rest/imageService/fetchRasterInfo ../../../geometry/SpatialReference ../../../geometry/Point ../../../geometry/Extent".split(" "),
function(D,B,u,C,F,G,E,W,X,Y,H,I,J,w,K,L,M,N,O,P,Q,R){function S(r,v){if(!r)return null;const {minScale:l,maxScale:a,minLOD:b,maxLOD:d}=v;if(null!=b&&null!=d)return w.fromJSON({...r,lods:r.lods.filter(({level:c})=>null!=c&&c>=b&&c<=d)});if(0!==l&&0!==a){const c=l?Math.round(1E4*l)/1E4:Infinity,e=a?Math.round(1E4*a)/1E4:-Infinity;return w.fromJSON({...r,lods:r.lods.filter(g=>{g=Math.round(1E4*g.scale)/1E4;return g<=c&&g>=e})})}return w.fromJSON(r)}u=function(r){function v(){var a=r.apply(this,arguments)||
this;a._levelOffset=0;a._tilemapCache=null;a._slices=null;a.datasetFormat="RasterTileServer";a.tileType=null;return a}D._inherits(v,r);var l=v.prototype;l.open=async function(a){await this.init();var b=a&&a.signal;a=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:b});a.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));this.sourceJSON=a=a.data;if(!a)throw new C("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!a.tileInfo)throw new C("imageserverraster:open",
"use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();var d="jpg jpeg png png8 png24 png32 mixed".split(" ");this.tileType=a.cacheType;null==this.tileType&&(d.includes(a.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===a.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster");this.datasetName=a.name?.slice(a.name.indexOf("/")+1)??"";b=await this._fetchRasterInfo({signal:b});if(null==b)throw new C("image-server-raster:open","cannot initialize image service");
d="Map"===this.tileType?S(a.tileInfo,a):w.fromJSON(a.tileInfo);F.assertIsSome(d);const [c,e]=this._computeMinMaxLOD(b,d),{extent:g,pixelSize:f}=b,k=.5/b.width*f.x,h=Math.max(f.x,f.y),{lods:n}=d;if("Map"!==this.tileType&&0!==a.maxScale||Math.abs(f.x-f.y)>k||!n.some(p=>Math.abs(p.resolution-h)<k))f.x=f.y=c.resolution,b.width=Math.ceil((g.xmax-g.xmin)/f.x-.1),b.height=Math.ceil((g.ymax-g.ymin)/f.y-.1);const t=c.level-e.level,[x,y]=d.size,q=[],m=[];n.forEach((p,z)=>{p.level>=e.level&&p.level<=c.level&&
q.push({x:p.resolution,y:p.resolution});z<n.length-1&&m.push(Math.round(10*p.resolution/n[z+1].resolution)/10)});q.sort((p,z)=>p.x-z.x);const T=this.computeBlockBoundary(g,x,y,d.origin,q,t),U=1<q.length?q.slice(1):null;var A;a.transposeInfo&&(A={tileSize:[a.transposeInfo.rows,a.transposeInfo.cols],packetSize:b.keyProperties?._yxs.PacketSize??0});const V=1>=m.length||3<=m.length&&m.slice(0,m.length-1).every(p=>p===m[0])?m[0]??2:Math.round(10/(e.resolution/c.resolution)**(-1/t))/10;b.storageInfo=new J({blockWidth:d.size[0],
blockHeight:d.size[1],pyramidBlockWidth:d.size[0],pyramidBlockHeight:d.size[1],pyramidResolutions:U,pyramidScalingFactor:V,compression:d.format,origin:d.origin,firstPyramidLevel:1,maximumPyramidLevel:t,tileInfo:d,transposeInfo:A,blockBoundary:T});this._fixGCSShift(b);this._set("rasterInfo",b);a.capabilities.toLowerCase().includes("tilemap")&&(A={tileInfo:b.storageInfo.tileInfo,parsedUrl:G.urlToObject(this.url),url:this.url,tileServers:[]},this._tilemapCache=new K.TilemapCache({layer:A}))};l.fetchRawTile=
async function(a,b,d,c={}){const {storageInfo:e,extent:g}=this.rasterInfo;var {transposeInfo:f}=e,k=null!=f&&!!c.transposedVariableName;if(this._slices&&!k&&null==c.sliceId)return null;({data:c}=await this.request(`${this.url}/tile/${k?0:e.maximumPyramidLevel-a+this._levelOffset}/${b}/${d}`,{query:this._slices?k?{variable:c.transposedVariableName}:{sliceId:c.sliceId||0}:null,responseType:"array-buffer",signal:c.signal}));if(!c)return null;f=k?f.tileSize:e.tileInfo.size;k=await this.decodePixelBlock(c,
{width:f[0],height:f[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnInterleaved:k,noDataValue:this.rasterInfo.noDataValue});if(null==k)return null;f=e.blockBoundary[a];if("jpg"!==e.compression||d>f.minCol&&d<f.maxCol&&b>f.minRow&&b<f.maxRow)return k;const {origin:h,blockWidth:n,blockHeight:t}=e,{x,y}=this.getPyramidPixelSize(a);var q=Math.round((g.xmin-h.x)/x)%n;a=Math.round((g.xmax-h.x)/x)%n||n;var m=Math.round((h.y-g.ymax)/y)%t;c=Math.round((h.y-g.ymin)/y)%t||t;q=d===f.minCol?
q:0;m=b===f.minRow?m:0;M.setValidBoundary(k,{x:q,y:m},{width:(d===f.maxCol?a:n)-q,height:(b===f.maxRow?c:t)-m});return k};l.getSliceIndex=function(a){if(!this._slices||null==a||0===a.length)return null;for(let b=0;b<this._slices.length;b++){const d=this._slices[b].multidimensionalDefinition;if(d.length===a.length&&!d.some(c=>{var e=a.find(f=>c.variableName===f.variableName&&f.dimensionName===c.dimensionName);if(!e)return!0;const g=Array.isArray(c.values[0])?`${c.values[0][0]}-${c.values[0][1]}`:c.values[0];
e=Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0];return g!==e}))return b}return null};l.fetchVariableStatisticsHistograms=async function(a,b){var d=this.request(this.url+"/statistics",{query:{variable:a,f:"json"},signal:b}).then(c=>c.data?.statistics);a=this.request(this.url+"/histograms",{query:{variable:a,f:"json"},signal:b}).then(c=>c.data?.histograms);d=await Promise.all([d,a]);d[0]&&d[0].forEach(c=>{c.avg=c.mean;c.stddev=c.standardDeviation});return{statistics:d[0]||
null,histograms:d[1]||null}};l.computeBestPyramidLevelForLocation=async function(a,b={}){if(!this._tilemapCache)return 0;a=this.identifyPixelLocation(a,0,b.datumTransformation);if(null===a)return null;let d=0;var {maximumPyramidLevel:c}=this.rasterInfo.storageInfo;c=c-d+this._levelOffset;const e=a.srcLocation;for(;0<=c;){try{if("available"===await this._tilemapCache.fetchAvailability(c,a.row,a.col,b))break}catch{}c--;d++;a=this.identifyPixelLocation(e,d,b.datumTransformation);if(null===a)return null}return-1===
c||null==a?null:d};l._fetchRasterInfo=async function(a){var b=this.sourceJSON;if("Map"===this.tileType){a=b.fullExtent||b.extent;var d=Math.ceil((a.xmax-a.xmin)/b.pixelSizeX-.1);const c=Math.ceil((a.ymax-a.ymin)/b.pixelSizeY-.1),e=P.fromJSON(b.spatialReference||a.spatialReference);b=new Q({x:b.pixelSizeX,y:b.pixelSizeY,spatialReference:e});return new I({width:d,height:c,bandCount:3,extent:R.fromJSON(a),spatialReference:e,pixelSize:b,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}({signal:d}=
a);a=O.fetchServiceRasterInfo(this.url,this.sourceJSON,{signal:d,query:this.ioConfig.customFetchParameters});b=b.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:d}).then(c=>c.data&&c.data.slices).catch(()=>null):null;b=await Promise.all([a,b]);this._slices=b[1];return b[0]};l._fixScaleInServiceInfo=function(){const {sourceJSON:a}=this;a.minScale&&0>a.minScale&&(a.minScale=0);a.maxScale&&0>a.maxScale&&(a.maxScale=0)};l._fixGCSShift=function(a){const {extent:b,spatialReference:d}=
a;-1<b.xmin&&181<b.xmax&&d?.wkid&&d.isGeographic&&(a.nativeExtent=a.extent,a.transform=new N,a.extent=a.transform.forwardTransform(b))};l._computeMinMaxLOD=function(a,b){const {pixelSize:d}=a,c=.5/a.width*d.x;({lods:a}=b);var e=b.lodAt(Math.max.apply(null,a.map(h=>h.level)));b=b.lodAt(Math.min.apply(null,a.map(h=>h.level)));var {tileType:g}=this;if("Map"===g)return this._levelOffset=a[0].level,[e,b];if("Raster"===g)return[a.find(h=>h.resolution===d.x)??e,b];const {minScale:f,maxScale:k}=this.sourceJSON;
g=e;0<k&&((g=a.find(h=>Math.abs(h.scale-k)<c))||(g=a.filter(h=>h.scale>k).sort((h,n)=>h.scale>n.scale?1:-1)[0]??e));e=b;0<f&&(e=a.find(h=>Math.abs(h.scale-f)<c)??b,this._levelOffset=e.level-b.level);return[g,e]};return D._createClass(v)}(L);B.__decorate([E.property({type:String,json:{write:!0}})],u.prototype,"datasetFormat",void 0);B.__decorate([E.property()],u.prototype,"tileType",void 0);return u=B.__decorate([H.subclass("esri.layers.support.rasterDatasets.ImageServerRaster")],u)});