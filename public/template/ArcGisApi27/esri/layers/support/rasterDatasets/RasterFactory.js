// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("../../../chunks/_rollupPluginBabelHelpers ../../../core/Error ./CloudRaster ./ImageAuxRaster ./ImageServerRaster ./MRFRaster ./TIFFRaster".split(" "),function(p,l,q,g,r,t,u){const b=new Map;b.set("CRF",{desc:"Cloud Raster Format",constructor:q});b.set("MRF",{desc:"Meta Raster Format",constructor:t});b.set("TIFF",{desc:"GeoTIFF",constructor:u});b.set("RasterTileServer",{desc:"Raster Tile Server",constructor:r});b.set("JPG",{desc:"JPG Raster Format",constructor:g});b.set("PNG",{desc:"PNG Raster Format",
constructor:g});b.set("GIF",{desc:"GIF Raster Format",constructor:g});b.set("BMP",{desc:"BMP Raster Format",constructor:g});return function(){function h(){}h.open=async function(c){const {url:d,ioConfig:e,sourceJSON:v}=c;let a=c.datasetFormat;null==a&&d.lastIndexOf(".")&&(a=d.slice(d.lastIndexOf(".")+1).toUpperCase());if("OVR"===a||"TIF"===a)a="TIFF";else if("JPG"===a||"JPEG"===a||"JFIF"===a)a="JPG";d.toLowerCase().includes("/imageserver")&&!d.toLowerCase().includes("/wcsserver")&&(a="RasterTileServer");
const w={bandIds:null,sampling:null},m={url:d,sourceJSON:v,datasetFormat:a,ioConfig:e??w};let k,f;if(a&&this.supportedFormats.has(a)){if("CRF"===a&&!e?.enableCRF)throw new l("rasterfactory:open",`cannot open raster: ${d}`);k=b.get(a).constructor;f=new k(m);await f.open({signal:c.signal});return f}if(a)throw new l("rasterfactory:open","not a supported format "+a);const x=Array.from(b.keys());let y=0;const n=()=>{a=x[y++];if(!a||"CRF"===a&&!e?.enableCRF)return null;k=b.get(a).constructor;f=new k(m);
return f.open({signal:c.signal}).then(()=>f).catch(()=>n())};return n()};h.register=function(c,d,e){b.has(c.toUpperCase())||b.set(c.toUpperCase(),{desc:d,constructor:e})};p._createClass(h,null,[{key:"supportedFormats",get:function(){const c=new Set;b.forEach((d,e)=>c.add(e));return c}}]);return h}()});