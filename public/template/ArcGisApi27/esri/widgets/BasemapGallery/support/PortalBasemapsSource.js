// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("../../../chunks/_rollupPluginBabelHelpers ../../../chunks/tslib.es6 ../../../Basemap ../../../core/Collection ../../../core/Error ../../../core/Handles ../../../core/Loadable ../../../core/Logger ../../../core/Promise ../../../core/promiseUtils ../../../core/reactiveUtils ../../../core/accessorSupport/decorators/property ../../../core/accessorSupport/ensureType ../../../core/arrayUtils ../../../core/has ../../../core/accessorSupport/decorators/subclass ../../../portal/Portal ./LocalBasemapsSource".split(" "),
function(k,c,b,q,r,t,u,v,w,x,l,d,B,C,D,y,m,z){const n=q.ofType(b);b=function(p){function h(a){a=p.call(this,a)||this;a._handles=new t;a._lastPortalBasemapFetchController=null;a.basemaps=new n;a.filterFunction=null;a.portal=m.getDefault();a.query=null;a.updateBasemapsCallback=null;a.viewType=null;return a}k._inherits(h,p);var e=h.prototype;e.initialize=function(){this._handles.add([l.watch(()=>[this.filterFunction,this.loadStatus,this.portal?.basemapGalleryGroupQuery,this.portal?.basemapGalleryGroupQuery3D,
this.portal?.user,this.query,this.updateBasemapsCallback],()=>this.refresh(),l.initial)])};e.destroy=function(){this._handles.destroy();this.portal=this.filterFunction=this._handles=null};e.load=function(a){this.addResolvingPromise(this.portal.load(a));return Promise.resolve(this)};e.refresh=async function(){if("loaded"===this.loadStatus){this._lastPortalBasemapFetchController&&(this._lastPortalBasemapFetchController.abort(),this._lastPortalBasemapFetchController=null);var a=this.portal,f=new AbortController;
this._lastPortalBasemapFetchController=f;this.notifyChange("state");try{const g=await a.fetchBasemaps(this._toQueryString(this.query),{signal:f.signal,include3d:"3d"===this.viewType?!0:void 0});await this._updateBasemaps(g)}catch(g){if(x.isAbortError(g))throw g;v.getLogger(this).warn(new r("basemap-source:fetch-basemaps-error","Could not fetch basemaps from portal.",{error:g}));await this._updateBasemaps()}this._lastPortalBasemapFetchController=null;this.notifyChange("state")}};e._toQueryString=function(a){return a&&
"string"!==typeof a?Object.keys(a).map(f=>`${f}:${a[f]}`).join(" AND "):a};e._updateBasemaps=async function(a=[]){a=await this._filterBasemaps(a);a=this.updateBasemapsCallback?this.updateBasemapsCallback(a):a;this.basemaps.removeAll();this.basemaps.addMany(a)};e._filterBasemaps=async function(a){if(!this.filterFunction)return a;const f=a.map(this.filterFunction),g=await Promise.all(f);return a.filter((E,A)=>g[A])};k._createClass(h,[{key:"state",get:function(){return"not-loaded"===this.loadStatus?
"not-loaded":"loading"===this.loadStatus||this._lastPortalBasemapFetchController?"loading":"ready"}}]);return h}(u.LoadableMixin(w.EsriPromiseMixin(z)));c.__decorate([d.property({readOnly:!0,type:n})],b.prototype,"basemaps",void 0);c.__decorate([d.property()],b.prototype,"filterFunction",void 0);c.__decorate([d.property({type:m})],b.prototype,"portal",void 0);c.__decorate([d.property()],b.prototype,"query",void 0);c.__decorate([d.property({readOnly:!0})],b.prototype,"state",null);c.__decorate([d.property()],
b.prototype,"updateBasemapsCallback",void 0);c.__decorate([d.property()],b.prototype,"viewType",void 0);return b=c.__decorate([y.subclass("esri.widgets.BasemapGallery.support.PortalBasemapsSource")],b)});