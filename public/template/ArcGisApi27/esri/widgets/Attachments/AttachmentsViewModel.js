// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../Graphic ../../core/Accessor ../../core/Collection ../../core/Error ../../core/reactiveUtils ../../core/accessorSupport/decorators/property ../../core/accessorSupport/decorators/cast ../../core/arrayUtils ../../core/has ../../core/accessorSupport/decorators/subclass ../../rest/query/support/AttachmentInfo ../../rest/support/AttachmentQuery ../Feature/support/featureUtils".split(" "),function(q,k,y,e,r,f,t,l,z,E,F,A,B,u,C){const v=
{editing:!1,operations:{add:!0,update:!0,delete:!0}},w=r.ofType(B);e=function(x){function n(a){var b=x.call(this,a)||this;b._getAttachmentsPromise=null;b._attachmentLayer=null;b.capabilities={...v};b.activeAttachmentInfo=null;b.activeFileInfo=null;b.attachmentInfos=new w;b.fileInfos=new r;b.graphic=null;b.mode="view";b.filesEnabled=!1;b.addHandles(t.watch(()=>b.graphic,()=>b._graphicChanged(),t.initial));return b}q._inherits(n,x);var g=n.prototype;g.destroy=function(){this.graphic=this._attachmentLayer=
null};g.castCapabilities=function(a){return{...v,...a}};g.getAttachments=async function(){const {_attachmentLayer:a,attachmentInfos:b}=this;if(!a||"function"!==typeof a.queryAttachments)throw new f("invalid-layer","getAttachments(): A valid layer is required.");const d=this._getObjectId();var c=new u({objectIds:[d],returnMetadata:!0});const h=[];this._getAttachmentsPromise=c=a.queryAttachments(c).then(m=>m[d]||h).catch(()=>h);this.notifyChange("state");c=await c;b.removeAll();c.length&&b.addMany(c);
this._getAttachmentsPromise=null;this.notifyChange("state");return c};g.addAttachment=async function(a,b=this.graphic){const {_attachmentLayer:d,attachmentInfos:c,capabilities:h}=this;if(!b)throw new f("invalid-graphic","addAttachment(): A valid graphic is required.",{graphic:b});if(!a)throw new f("invalid-attachment","addAttachment(): An attachment is required.",{attachment:a});if(!h.operations?.add)throw new f("invalid-capabilities","addAttachment(): add capabilities are required.");if(!d||"function"!==
typeof d.addAttachment)throw new f("invalid-layer","addAttachment(): A valid layer is required.");a=await d.addAttachment(b,a).then(m=>this._queryAttachment(m.objectId,b));c.add(a);return a};g.deleteAttachment=async function(a){const {_attachmentLayer:b,attachmentInfos:d,graphic:c,capabilities:h}=this;if(!a)throw new f("invalid-attachment-info","deleteAttachment(): An attachmentInfo is required.",{attachmentInfo:a});if(!h.operations?.delete)throw new f("invalid-capabilities","deleteAttachment(): delete capabilities are required.");
if(!b||"function"!==typeof b.deleteAttachments)throw new f("invalid-layer","deleteAttachment(): A valid layer is required.");if(!c)throw new f("invalid-graphic","deleteAttachment(): A graphic is required.");const m=await b.deleteAttachments(c,[a.id]).then(()=>a);d.remove(m);return m};g.updateAttachment=async function(a,b=this.activeAttachmentInfo){const {_attachmentLayer:d,attachmentInfos:c,graphic:h,capabilities:m}=this;if(!a)throw new f("invalid-attachment","updateAttachment(): An attachment is required.",
{attachment:a});if(!b)throw new f("invalid-attachment-info","updateAttachment(): An attachmentInfo is required.",{attachmentInfo:b});if(!m.operations?.update)throw new f("invalid-capabilities","updateAttachment(): Update capabilities are required.");const D=c.findIndex(p=>p===b);if(!d||"function"!==typeof d.updateAttachment)throw new f("invalid-layer","updateAttachment(): A valid layer is required.");if(!h)throw new f("invalid-graphic","updateAttachment(): A graphic is required.");a=await d.updateAttachment(h,
b.id,a).then(p=>this._queryAttachment(p.objectId));c.splice(D,1,a);return a};g.commitFiles=async function(){await Promise.all(this.fileInfos.items.map(a=>this.addAttachment(a.form)));this.fileInfos.removeAll();return this.getAttachments()};g.addFile=function(a,b){if(!a||!b)return null;a={file:a,form:b};this.fileInfos.add(a);return a};g.updateFile=function(a,b,d=this.activeFileInfo){if(!a||!b||!d)return null;const c=this.fileInfos.findIndex(h=>d===h);-1<c&&this.fileInfos.splice(c,1,{file:a,form:b});
return this.fileInfos.items[c]};g.deleteFile=function(a){const b=this.fileInfos.find(d=>d.file===a);return b?(this.fileInfos.remove(b),b):null};g._queryAttachment=async function(a,b){const {_attachmentLayer:d}=this;if(!a||!d?.queryAttachments)throw new f("invalid-attachment-id","Could not query attachment.");const c=this._getObjectId(b);a=new u({objectIds:[c],attachmentsWhere:`AttachmentId=${a}`,returnMetadata:!0});return d.queryAttachments(a).then(h=>h[c][0])};g._getObjectId=function(a=this.graphic){return a?.getObjectId()??
null};g._graphicChanged=function(){this.graphic&&(this._setAttachmentLayer(),this.getAttachments().catch(()=>{}))};g._setAttachmentLayer=function(){var {graphic:a}=this;this._attachmentLayer=(a=C.getSourceLayer(a))?"scene"===a.type&&null!=a.associatedLayer?a.associatedLayer:a:null};q._createClass(n,[{key:"state",get:function(){return this._getAttachmentsPromise?"loading":this.graphic?"ready":"disabled"}},{key:"supportsResizeAttachments",get:function(){var {graphic:a}=this;if(!a)return!1;a=a.layer||
a.sourceLayer;return a?.loaded&&"capabilities"in a&&a.capabilities&&"operations"in a.capabilities&&"supportsResizeAttachments"in a.capabilities.operations&&a.capabilities.operations.supportsResizeAttachments||!1}}]);return n}(e);k.__decorate([l.property()],e.prototype,"capabilities",void 0);k.__decorate([z.cast("capabilities")],e.prototype,"castCapabilities",null);k.__decorate([l.property()],e.prototype,"activeAttachmentInfo",void 0);k.__decorate([l.property()],e.prototype,"activeFileInfo",void 0);
k.__decorate([l.property({readOnly:!0,type:w})],e.prototype,"attachmentInfos",void 0);k.__decorate([l.property()],e.prototype,"fileInfos",void 0);k.__decorate([l.property({type:y})],e.prototype,"graphic",void 0);k.__decorate([l.property()],e.prototype,"mode",void 0);k.__decorate([l.property({readOnly:!0})],e.prototype,"state",null);k.__decorate([l.property()],e.prototype,"filesEnabled",void 0);k.__decorate([l.property({readOnly:!0})],e.prototype,"supportsResizeAttachments",null);return e=k.__decorate([A.subclass("esri.widgets.Attachments.AttachmentsViewModel")],
e)});