// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../../geometry ../../../Ground ../../../core/Logger ../../../core/promiseUtils ../../../core/unitUtils ../../Mesh ../../projection ../Indices ../MeshComponent ../MeshVertexAttributes ../../Point".split(" "),function(w,R,A,B,C,D,E,F,G,H,I,J){function x(a,b,c){var f=D.getMetersPerUnitForSR(b.spatialReference),d=(c?.demResolution??a.demResolution.min)/f;f=Math.round(b.width/d);d=Math.round(b.height/d);const k=f+1,t=d+1,m=new Float64Array(k*t*3),u=new Float32Array(k*t*2);let q=0,y=
0;const g=new Uint32Array(f*d*6);let h=0,l=0;const K=!a.spatialReference.equals(b.spatialReference);r.spatialReference=b.spatialReference;const {xmin:L,ymin:M,height:N,width:O}=b;for(let n=0;n<t;n++){const v=M+n/d*N;for(let p=0;p<k;p++){var e=L+p/f*O;m[q++]=e;m[q++]=v;K?(r.x=e,r.y=v,e=F.project(r,a.spatialReference),m[q++]=a.elevationAt(e.x,e.y)??0):m[q++]=a.elevationAt(e,v)??0;e=p/f;const P=n/d;u[y++]=e;u[y++]=P;n!==d&&p!==f&&(g[l++]=h+1,g[l++]=h+k+1,g[l++]=h+k,g[l++]=h,g[l++]=h+1,g[l++]=h+k);h++}}return new E({vertexAttributes:new I.MeshVertexAttributes({position:m,
uv:u}),components:[new H({faces:G.compactIndices(g),shading:"smooth",material:c?.material??null})],spatialReference:b.spatialReference})}async function Q(a){if(z(a))return a.load();await a.load();await C.eachAlways(a.layers.map(b=>b.load()));return a}function z(a){return"type"in a&&("elevation"===a.type||"base-elevation"===a.type)}const r=new J;w.create=async function(a,b,c){return z(a)||a instanceof A?(a=await (await Q(a)).createElevationSampler(b,{demResolution:c?.demResolution??"finest-contiguous"}),
x(a,b,{material:c?.material})):"string"===typeof c?.demResolution?(B.getLogger("esri.geometry.support.meshUtils.elevation").error("create()","demResolution must be a number when used directly with a sampler"),null):x(a,b,{material:c?.material,demResolution:c?.demResolution})};Object.defineProperty(w,Symbol.toStringTag,{value:"Module"})});