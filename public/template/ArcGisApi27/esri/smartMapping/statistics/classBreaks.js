// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define(["../../core/Error","./support/utils","../support/binningUtils","../support/utils","../support/adapters/support/layerUtils"],function(c,f,t,n,e){async function u(a){if(!a||!a.layer||!a.field&&!a.valueExpression)throw new c("class-breaks:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");if(a.valueExpression&&!a.view)throw new c("class-breaks:missing-parameters","View is required when 'valueExpression' is specified");a.forBinning&&t.verifyBinningParams(a,
"class-breaks");const {layer:g,...h}=a;var b=a.forBinning?e.binningCapableLayerTypes:e.featureCapableLayerTypes;a=e.createLayerAdapter(g,b,a.forBinning);if(!a)throw new c("class-breaks:invalid-parameters","'layer' must be one of these types: "+e.getLayerTypeLabels(b).join(", "));b={layerAdapter:a,...h};b.normalizationType=n.getNormalizationType(b);b.numClasses=b.numClasses||5;await a.load(null!=b.signal?{signal:b.signal}:null);var d=b.field;const k=b.minValue,l=b.maxValue,v=null!=k||null!=l,p=b.classificationMethod,
q="percent-of-total"===b.normalizationType,r=!1!==b.analyzeData;d=d?a.getField(d):null;var m=await n.getFieldsList({field:b.field,normalizationField:b.normalizationField,valueExpression:b.valueExpression});if(m=f.verifyBasicFieldValidity(a,m,"class-breaks:invalid-parameters"))throw m;if(d&&(a=f.verifyNumericField(a,d,"class-breaks:invalid-parameters")))throw a;if(b.valueExpression&&b.normalizationType)throw new c("class-breaks:invalid-parameters","Normalization is not allowed when 'valueExpression' is specified");
if(v)if(r){if(q&&null==b.normalizationTotal)throw new c("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'minValue', 'maxValue' are specified");}else{if(null==k||null==l)throw new c("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");if(k>=l)throw new c("class-breaks:invalid-parameters","'minValue' should be less than 'maxValue'");if(p&&"equal-interval"!==p)throw new c("class-breaks:invalid-parameters",
"'classificationMethod' other than 'equal-interval' is not allowed when 'analyzeData' is false");if(q&&null==b.normalizationTotal)throw new c("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'analyzeData' is false");}else if(!r)throw new c("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");if(a=f.verifyFilterValidty(b.filter,"class-breaks:invalid-parameters"))throw a;return b}
return async function(a){const {layerAdapter:g,...h}=await u(a);return g.classBreaks(h)}});