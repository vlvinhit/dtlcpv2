"use strict";(self.webpackChunkRemoteClient=self.webpackChunkRemoteClient||[]).push([[9793],{9793:(e,t,o)=>{o.r(t),o.d(t,{executeRelationshipQuery:()=>l,executeRelationshipQueryForCount:()=>f});var r=o(69033),n=o(64604),a=o(69763),s=o(68140),c=o(8824),u=o(81618);function d(e,t){const o=e.toJSON();return o.objectIds&&(o.objectIds=o.objectIds.join(",")),o.orderByFields&&(o.orderByFields=o.orderByFields.join(",")),o.outFields&&!t?.returnCountOnly?o.outFields.includes("*")?o.outFields="*":o.outFields=o.outFields.join(","):delete o.outFields,o.outSR&&(o.outSR=(0,a.Y)(o.outSR)),o.dynamicDataSource&&(o.layer=JSON.stringify({source:o.dynamicDataSource}),delete o.dynamicDataSource),o}async function i(e,t,o={},r){const a=(0,s.m)({...e.query,f:"json",...r,...d(t,r)});return(0,n.A)(e.path+"/queryRelatedRecords",{...o,query:{...o.query,...a}})}async function l(e,t,o){return t=u.default.from(t),async function(e,t,o){const r=await i(e,t,o),n=r.data,a=n.geometryType,s=n.spatialReference,c={};for(const e of n.relatedRecordGroups){const t={fields:void 0,objectIdFieldName:void 0,geometryType:a,spatialReference:s,hasZ:!!n.hasZ,hasM:!!n.hasM,features:e.relatedRecords};if(null!=e.objectId)c[e.objectId]=t;else for(const o of Object.keys(e))"relatedRecords"!==o&&(c[e[o]]=t)}return{...r,data:c}}((0,r.p)(e),t,o).then((e=>{const t=e.data,o={};return Object.keys(t).forEach((e=>o[e]=c.A.fromJSON(t[e]))),o}))}async function f(e,t,o){return t=u.default.from(t),async function(e,t,o){const r=await i(e,t,o,{returnCountOnly:!0}),n=r.data,a={};for(const e of n.relatedRecordGroups)null!=e.objectId&&(a[e.objectId]=e.count);return{...r,data:a}}((0,r.p)(e),t,{...o}).then((e=>e.data))}o(90740),o(32773),o(29512),o(99063),o(6407),o(20266),o(99924),o(32816),o(41390),o(69421),o(40499),o(93181),o(13671),o(91047),o(36544),o(29298),o(58498),o(45371),o(80959),o(93804),o(18683),o(77037),o(44600),o(2160),o(49877),o(7969),o(56273),o(64752),o(48844),o(29208),o(36533),o(84200),o(97827),o(91695),o(18169),o(48402),o(16699),o(26809),o(2589),o(18527),o(67504),o(3952),o(339),o(79281),o(94345),o(92517),o(13978),o(48689),o(53564),o(71868),o(64102),o(27281),o(72393),o(52731),o(17745),o(81272),o(44945),o(30011),o(55270),o(50214),o(59192),o(78016),o(54483),o(95779),o(13262),o(346),o(51961),o(62399),o(64995),o(33150),o(58173),o(66110),o(67520),o(27532),o(88663),o(48103),o(65085),o(33611),o(84857),o(60373),o(98187),o(35902),o(13226),o(16794),o(52357),o(11090),o(49319),o(93546),o(29570),o(34592),o(79825),o(95101),o(67578),o(14896),o(95611),o(98089),o(91366),o(80473),o(43435),o(73435),o(4048),o(85232),o(93471),o(53252),o(34039),o(70061),o(3495),o(97906),o(64524),o(65023),o(31424),o(74676),o(53610),o(29447),o(78273),o(49475),o(32368),o(7391),o(22529),o(43534),o(38094),o(67723),o(47239),o(59858),o(63728),o(1178),o(7182),o(47788),o(19297),o(82408),o(73509),o(28276),o(69277),o(70580),o(75191),o(24319),o(62092),o(4157),o(62401),o(89322),o(20138),o(53370),o(46946),o(3816),o(71992),o(80167),o(4478),o(91808),o(7161),o(55586),o(35121),o(92229),o(18344),o(64884),o(23351),o(51222),o(42870),o(67321),o(73067),o(54512),o(53103),o(19648),o(42948),o(44864),o(95637),o(59930),o(45862),o(72762),o(71613),o(17872),o(81284)}}]);