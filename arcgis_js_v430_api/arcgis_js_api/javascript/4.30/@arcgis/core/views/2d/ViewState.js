/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import"../../geometry.js";import s from"../../Viewpoint.js";import{JSONSupport as i}from"../../core/JSONSupport.js";import{property as e}from"../../core/accessorSupport/decorators/property.js";import"../../core/lang.js";import"../../chunks/Logger.js";import{subclass as o}from"../../core/accessorSupport/decorators/subclass.js";import{t as r}from"../../chunks/common.js";import{f as n,r as a,t as p,i as m}from"../../chunks/mat2d.js";import{c}from"../../chunks/mat2df32.js";import{c as h}from"../../chunks/mat2df64.js";import{s as l,c as u,d as j,r as f,m as d}from"../../chunks/mat3.js";import{c as k}from"../../chunks/mat3f32.js";import{m as y,t as v}from"../../chunks/vec2.js";import{f as w}from"../../chunks/vec2f32.js";import{c as g}from"../../chunks/vec2f64.js";import{getClosestDenormalizedXToReference as R}from"../../geometry/support/normalizeUtils.js";import{c as x,g as _,a as z,b as M,d as S,e as U,f as b,h as C}from"../../chunks/viewpointUtils.js";import T from"../../geometry/Extent.js";import N from"../../geometry/Point.js";import"../../chunks/ensureType.js";import"../../geometry/Geometry.js";import"../../chunks/reader.js";import"../../geometry/SpatialReference.js";import"../../chunks/unitUtils.js";import"../../chunks/jsonMap.js";import"../../config.js";import"../../chunks/assets.js";import"../../request.js";import"../../kernel.js";import"../../core/urlUtils.js";import"../../core/Error.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/maybe.js";import"../../chunks/metadata.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/ObservableBase.js";import"../../chunks/tracking.js";import"../../core/scheduling.js";import"../../core/promiseUtils.js";import"../../chunks/writer.js";import"../../geometry/Multipoint.js";import"../../chunks/zmUtils.js";import"../../geometry/support/webMercatorUtils.js";import"../../core/accessorSupport/decorators/cast.js";import"../../geometry/Polygon.js";import"../../chunks/coordsUtils.js";import"../../chunks/Axis.js";import"../../chunks/extentUtils.js";import"../../chunks/aaBoundingRect.js";import"../../chunks/mathUtils.js";import"../../chunks/vec3.js";import"../../chunks/vec3f64.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import"../../geometry/support/jsonUtils.js";import"../../Camera.js";import"../../CameraLayout.js";import"../../core/Clonable.js";import"../../chunks/Cyclical.js";import"../../chunks/normalizeUtilsCommon.js";import"../../chunks/simplify.js";import"../../chunks/utils8.js";import"../../chunks/utils9.js";import"../../core/Collection.js";import"../../core/Evented.js";import"../../chunks/shared.js";import"../../chunks/SimpleObservable.js";import"../../geometry/projection.js";import"../../chunks/projectBuffer.js";import"../../chunks/geodesicConstants.js";import"../../geometry/support/GeographicTransformation.js";import"../../geometry/support/GeographicTransformationStep.js";import"../../chunks/zscale.js";function A(t){return function(t){return t instanceof Float32Array&&t.length>=2}(t)||function(t){return Array.isArray(t)&&t.length>=2}(t)}var G;const D=[0,0];let O=G=class extends i{constructor(t){super(t),this._viewpoint2D={center:g(),rotation:0,scale:0,spatialReference:void 0},this.center=[0,0],this.extent=new T,this.id=0,this.inverseTransform=h(),this.resolution=0,this.rotation=0,this.scale=0,this.transform=h(),this.transformNoRotation=h(),this.displayMat3=k(),this.displayViewMat3=k(),this.viewMat3=k(),this.viewMat2d=c(),this.worldScreenWidth=0,this.size=[0,0]}set pixelRatio(t){this._set("pixelRatio",t),this._update()}set size(t){this._set("size",t),this._update()}set viewpoint(t){if(t){const s=this._viewpoint2D,i=t.targetGeometry;s.center[0]=i.x,s.center[1]=i.y,s.rotation=t.rotation,s.scale=t.scale,s.spatialReference=i.spatialReference}this._update()}copy(t){const s=this.size,i=this.viewpoint;return i&&s?(this.viewpoint=x(i,t.viewpoint),this._set("size",y(s,t.size))):(this.viewpoint=t.viewpoint.clone(),this._set("size",[t.size[0],t.size[1]])),this._set("pixelRatio",t.pixelRatio),this}clone(){return new G({size:this.size,viewpoint:this.viewpoint.clone(),pixelRatio:this.pixelRatio})}toMap(t,s,i){return A(s)?v(t,s,this.inverseTransform):(D[0]=s,D[1]=i,v(t,D,this.inverseTransform))}toScreen(t,s,i){return A(s)?v(t,s,this.transform):(D[0]=s,D[1]=i,v(t,D,this.transform))}toScreenNoRotation(t,s,i){return A(s)?v(t,s,this.transformNoRotation):(D[0]=s,D[1]=i,v(t,D,this.transformNoRotation))}wrapMapCoordinate(t,s){y(t,s);const[i]=s,[e]=this.center,{extent:o,spatialReference:r}=this;let{xmin:n,xmax:a}=o;if(r.isWrappable){const t=_(r)/2;n=Math.max(n,e-t),a=Math.min(a,e+t)}return(i<n||i>a)&&(t[0]=R(i,e,r)),t}getScreenTransform(t,s){const{center:i}=this._viewpoint2D,e=this._get("pixelRatio")||1,o=this._get("size");return z(t,i,o,s,0,e),t}_update(){const{center:t,spatialReference:i,scale:e,rotation:o}=this._viewpoint2D,c=this._get("pixelRatio")||1,h=this._get("size"),k=new s({targetGeometry:new N(t[0],t[1],i),scale:e,rotation:o});if(this._set("viewpoint",k),!h||!i||!e)return;this.resolution=M(k),this.rotation=o,this.scale=e,this.spatialReference=i,y(this.center,t);const v=0!==h[0]?2/h[0]:0,g=0!==h[1]?-2/h[1]:0;l(this.displayMat3,v,0,0,0,g,0,-1,1,1);const R=u(this.viewMat3),x=w(h[0]/2,h[1]/2),_=w(-h[0]/2,-h[1]/2),z=r(o);j(R,R,x),f(R,R,z),j(R,R,_),d(this.displayViewMat3,this.displayMat3,R);const T=n(this.viewMat2d,x);return a(T,T,z),p(T,T,_),S(this.extent,k,h),U(this.transform,k,h,c),m(this.inverseTransform,this.transform),b(this.transformNoRotation,k,h,c),this.worldScreenWidth=C(this.spatialReference,this.resolution),this._set("id",this.id+1),this}};t([e({readOnly:!0})],O.prototype,"id",void 0),t([e({value:1,json:{write:!0}})],O.prototype,"pixelRatio",null),t([e({json:{write:!0}})],O.prototype,"size",null),t([e()],O.prototype,"spatialReference",void 0),t([e({type:s,json:{write:!0}})],O.prototype,"viewpoint",null),O=G=t([o("esri.views.2d.ViewState")],O);const V=O;export{V as default};
