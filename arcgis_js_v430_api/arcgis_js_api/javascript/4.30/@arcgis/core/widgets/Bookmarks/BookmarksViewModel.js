/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import e from"../../Viewpoint.js";import o from"../../core/Collection.js";import i from"../../core/Error.js";import r from"../../core/Evented.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import{cast as a}from"../../core/accessorSupport/decorators/cast.js";import"../../core/lang.js";import{subclass as n}from"../../core/accessorSupport/decorators/subclass.js";import{S as p}from"../../chunks/SlideThumbnail.js";import m from"../../webmap/Bookmark.js";import{GoToMixin as c}from"../support/GoTo.js";import"../../Camera.js";import"../../CameraLayout.js";import"../../core/Clonable.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/Logger.js";import"../../config.js";import"../../chunks/maybe.js";import"../../chunks/metadata.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/ObservableBase.js";import"../../chunks/tracking.js";import"../../core/scheduling.js";import"../../core/promiseUtils.js";import"../../chunks/ensureType.js";import"../../chunks/Cyclical.js";import"../../chunks/mathUtils.js";import"../../chunks/vec3.js";import"../../chunks/vec3f64.js";import"../../chunks/common.js";import"../../core/JSONSupport.js";import"../../chunks/reader.js";import"../../chunks/writer.js";import"../../geometry/Point.js";import"../../geometry/Geometry.js";import"../../geometry/SpatialReference.js";import"../../chunks/unitUtils.js";import"../../chunks/jsonMap.js";import"../../chunks/assets.js";import"../../request.js";import"../../kernel.js";import"../../core/urlUtils.js";import"../../geometry/support/webMercatorUtils.js";import"../../geometry.js";import"../../geometry/Extent.js";import"../../geometry/Multipoint.js";import"../../chunks/zmUtils.js";import"../../geometry/Polygon.js";import"../../chunks/coordsUtils.js";import"../../chunks/Axis.js";import"../../chunks/extentUtils.js";import"../../chunks/aaBoundingRect.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import"../../geometry/support/jsonUtils.js";import"../../chunks/shared.js";import"../../chunks/SimpleObservable.js";import"../../core/Identifiable.js";import"../../chunks/timeProperties.js";import"../../TimeExtent.js";import"../../chunks/timeUtils.js";import"../../chunks/date.js";import"../../chunks/locale.js";import"../../chunks/timeZoneUtils.js";import"../../chunks/datetime.js";const l=o.ofType(m),u={width:128,height:128,format:"png"},k={takeScreenshot:!0,captureViewpoint:!0,captureRotation:!0,captureScale:!0,captureTimeExtent:!0},h={time:!0};let j=class extends(c(r.EventedAccessor)){constructor(t){super(t),this.capabilities={...h},this.activeBookmark=null,this.view=null}destroy(){this.view=null,this._set("activeBookmark",null)}castCapabilities(t){return{...h,...t}}get bookmarks(){return this.view?.map?.bookmarks??new l}set bookmarks(t){this._overrideIfSome("bookmarks",t)}set defaultCreateOptions(t){this._set("defaultCreateOptions",{...k,...t})}get defaultCreateOptions(){return k}set defaultEditOptions(t){this._set("defaultEditOptions",{...k,...t})}get defaultEditOptions(){return k}get state(){const{view:t}=this;return t&&!t.ready?"loading":"ready"}async createBookmark(t){const{view:e,defaultCreateOptions:o,capabilities:r}=this;if(!e)throw new i("create-bookmark:invalid-view","Cannot create a bookmark without a view.");const{takeScreenshot:s,screenshotSettings:a,captureViewpoint:n,captureRotation:p,captureScale:c,captureTimeExtent:l}={...o,...t},u=s?await this._createThumbnail(a):void 0,k=r.time&&l&&null!=e.timeExtent?e.timeExtent.clone():void 0;return new m({...u&&{thumbnail:u},...l&&{timeExtent:k},...n&&{viewpoint:this._createViewpoint({view:e,captureScale:c,captureRotation:p})}})}async editBookmark(t,e){if(!t)return t;const{view:o,defaultEditOptions:r}=this;if(!o)throw new i("edit-bookmark:invalid-view","Cannot edit a bookmark without a view.");const{takeScreenshot:s,screenshotSettings:a,captureViewpoint:n,captureRotation:p,captureScale:m,captureTimeExtent:c}={...r,...e},l=s?await this._createThumbnail(a):void 0;return l&&(t.thumbnail=l),n&&(t.viewpoint=this._createViewpoint({view:o,captureScale:m,captureRotation:p})),c&&null!=o.timeExtent&&(t.timeExtent=o.timeExtent.clone()),this.emit("bookmark-edit",{bookmark:t}),t}goTo(t){const{capabilities:e,view:o}=this;if(!o)throw new i("go-to:invalid-view","Cannot go to a bookmark without a view");const r=t?.viewpoint;if(!r)throw new i("go-to:invalid-bookmark","Cannot go to a bookmark that does not contain a 'viewpoint'.",{bookmark:t});this._set("activeBookmark",t);const s={target:r},a=this.callGoTo(s),n=t?.timeExtent;return e.time&&n&&(o.timeExtent=n),this.emit("bookmark-select",{bookmark:t}),a.catch((()=>{})).then((()=>this._set("activeBookmark",null))),a}async _createThumbnail(t){const{view:e}=this;if(!e)throw new i("bookmark:invalid-view","Cannot create slide thumbnail without a view");const o=await e.takeScreenshot({...u,...t});return new p({url:o.dataUrl})}_createViewpoint({view:t,captureRotation:o,captureScale:i}){const r=t.viewpoint?.clone();return new e({targetGeometry:t.extent?.clone(),rotation:(o?r?.rotation:null)??0,scale:(i?r?.scale:null)??0})}};t([s()],j.prototype,"capabilities",void 0),t([a("capabilities")],j.prototype,"castCapabilities",null),t([s({readOnly:!0})],j.prototype,"activeBookmark",void 0),t([s({type:l})],j.prototype,"bookmarks",null),t([s()],j.prototype,"defaultCreateOptions",null),t([s()],j.prototype,"defaultEditOptions",null),t([s({readOnly:!0})],j.prototype,"state",null),t([s()],j.prototype,"view",void 0),j=t([n("esri.widgets.Bookmarks.BookmarksViewModel")],j);const d=j;export{d as default};
