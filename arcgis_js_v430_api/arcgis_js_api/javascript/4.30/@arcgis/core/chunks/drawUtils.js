/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{r as t}from"./mathUtils.js";import{c as n}from"./aaBoundingRect.js";import{d as e}from"./extentUtils.js";import{e as s}from"./coordsUtils.js";function o(t,n,e,o){if("point"===t.type)return t.x+=n,t.y+=e,t.hasZ&&null!=o&&(t.z+=o),t;if("multipoint"===t.type){const s=t.points;for(let t=0;t<s.length;t++)s[t]=x(s[t],n,e,o);return t}if("extent"===t.type)return t.xmin+=n,t.xmax+=n,t.ymin+=e,t.ymax+=e,t;const i=s(t),r="polyline"===t.type?t.paths:t.rings;for(let t=0;t<i.length;t++){const s=i[t];for(let t=0;t<s.length;t++)s[t]=x(s[t],n,e,o)}return"paths"in t?t.paths=r:t.rings=r,t}function i(t,n,e,i,r){const a=t.clone(),m=i.resolution;if("point"===a.type){if(r)o(a,n*m,-e*m);else{const t=i.state.transform,s=i.state.inverseTransform,o=t[0]*a.x+t[2]*a.y+t[4],r=t[1]*a.x+t[3]*a.y+t[5];a.x=s[0]*(o+n)+s[2]*(r+e)+s[4],a.y=s[1]*(o+n)+s[3]*(r+e)+s[5]}return a}if("multipoint"===a.type){if(r)o(a,n*m,-e*m);else{const t=a.points,s=i.state.transform,o=i.state.inverseTransform;for(let i=0;i<t.length;i++){const r=t[i],a=s[0]*r[0]+s[2]*r[1]+s[4],m=s[1]*r[0]+s[3]*r[1]+s[5],x=o[0]*(a+n)+o[2]*(m+e)+o[4],f=o[1]*(a+n)+o[3]*(m+e)+o[5];t[i]=l(r,x,f,void 0)}}return a}if("extent"===a.type){if(r)o(a,n*m,-e*m);else{const t=i.state.transform,s=i.state.inverseTransform,o=t[0]*a.xmin+t[2]*a.ymin+t[4],r=t[1]*a.xmin+t[3]*a.ymin+t[5],m=t[0]*a.xmax+t[2]*a.ymax+t[4],x=t[1]*a.xmax+t[3]*a.ymax+t[5];a.xmin=s[0]*(o+n)+s[2]*(r+e)+s[4],a.ymin=s[1]*(o+n)+s[3]*(r+e)+s[5],a.xmax=s[0]*(m+n)+s[2]*(x+e)+s[4],a.ymax=s[1]*(m+n)+s[3]*(x+e)+s[5]}return a}if(r)o(a,n*m,-e*m);else{const t=s(a),o="polyline"===a.type?a.paths:a.rings,r=i.state.transform,m=i.state.inverseTransform;for(let s=0;s<t.length;s++){const o=t[s];for(let t=0;t<o.length;t++){const s=o[t],i=r[0]*s[0]+r[2]*s[1]+r[4],a=r[1]*s[0]+r[3]*s[1]+r[5],x=m[0]*(i+n)+m[2]*(a+e)+m[4],f=m[1]*(i+n)+m[3]*(a+e)+m[5];o[t]=l(s,x,f,void 0)}}"paths"in a?a.paths=o:a.rings=o}return a}function r(t,o,i,r){if("point"===t.type){const{x:n,y:e}=t,s=r?r[0]:n,a=r?r[1]:e,m=t.clone(),x=(n-s)*o+s,l=(e-a)*i+a;return m.x=x,m.y=l,m}if("multipoint"===t.type){const a=s(t),m=n(),[x,f,y,c]=e(m,[a]),p=r?r[0]:(x+y)/2,u=r?r[1]:(c+f)/2,h=t.clone(),g=h.points;for(let t=0;t<g.length;t++){const n=g[t],[e,s]=n,r=(e-p)*o+p,a=(s-u)*i+u;g[t]=l(n,r,a,void 0)}return h}if("extent"===t.type){const{xmin:n,xmax:e,ymin:s,ymax:a}=t,m=r?r[0]:(n+e)/2,x=r?r[1]:(a+s)/2,l=t.clone();if(l.xmin=(n-m)*o+m,l.ymax=(a-x)*i+x,l.xmax=(e-m)*o+m,l.ymin=(s-x)*i+x,l.xmin>l.xmax){const t=l.xmin,n=l.xmax;l.xmin=n,l.xmax=t}if(l.ymin>l.ymax){const t=l.ymin,n=l.ymax;l.ymin=n,l.ymax=t}return l}const a=s(t),m=n(),[x,f,y,c]=e(m,a),p=r?r[0]:(x+y)/2,u=r?r[1]:(c+f)/2,h=t.clone(),g="polyline"===h.type?h.paths:h.rings;for(let t=0;t<a.length;t++){const n=a[t];for(let e=0;e<n.length;e++){const s=n[e],[r,a]=s,m=(r-p)*o+p,x=(a-u)*i+u;g[t][e]=l(s,m,x,void 0)}}return"paths"in h?h.paths=g:h.rings=g,h}function a(t,n,e,s,o,i){const r=Math.sqrt((e-t)*(e-t)+(s-n)*(s-n));return Math.sqrt((o-t)*(o-t)+(i-n)*(i-n))/r}function m(n,e,s,o=!1){const i=Math.atan2(e.y-s.y,e.x-s.x)-Math.atan2(n.y-s.y,n.x-s.x),r=Math.atan2(Math.sin(i),Math.cos(i));return o?r:t(r)}function x(t,n,e,s){return l(t,t[0]+n,t[1]+e,null!=t[2]&&null!=s?t[2]+s:void 0)}function l(t,n,e,s){const o=[n,e];return t.length>2&&o.push(null!=s?s:t[2]),t.length>3&&o.push(t[3]),o}export{a,i as c,m as g,r as s};
