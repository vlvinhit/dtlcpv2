/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import t from"../core/Error.js";import{h as e}from"../core/lang.js";import{L as i}from"./Logger.js";import{A as s,f as r,a,b as n,v as u,c as h,e as o,h as d}from"./definitions.js";import{g as l}from"./UpdateTracking2D.js";import{g as c,a as p}from"./dataViewUtils.js";import{T as _,c as g}from"./enums.js";import{F as x}from"./Program.js";import{a as f,T as b}from"./Texture.js";import{T}from"./TileContainer.js";class y{constructor(t,e,i){this._texture=null,this._lastTexture=null,this._fbos={},this.texelSize=4;const{buffer:s,pixelType:r,textureOnly:a}=t,n=c(r);this.blockIndex=i,this.pixelType=r,this.size=e,this.textureOnly=a,a||(this.data=new n(s)),this._resetRange()}destroy(){this._texture?.dispose();for(const t in this._fbos){const e=this._fbos[t];e&&("0"===t&&e.detachColorTexture(),e.dispose()),this._fbos[t]=null}this._texture=null}get _textureDesc(){const t=new f;return t.wrapMode=_.CLAMP_TO_EDGE,t.samplingMode=g.NEAREST,t.dataType=this.pixelType,t.width=this.size,t.height=this.size,t}setData(t,e,i){const s=l(t),r=this.data,a=s*this.texelSize+e;!r||a>=r.length||(r[a]=i,this.dirtyStart=Math.min(this.dirtyStart,s),this.dirtyEnd=Math.max(this.dirtyEnd,s))}getData(t,e){if(null==this.data)return null;const i=l(t)*this.texelSize+e;return!this.data||i>=this.data.length?null:this.data[i]}getTexture(t){return this._texture??this._initTexture(t)}getFBO(t,e=0){if(!this._fbos[e]){const i=0===e?this.getTexture(t):this._textureDesc;this._fbos[e]=new x(t,i)}return this._fbos[e]}get hasDirty(){const t=this.dirtyStart;return this.dirtyEnd>=t}updateTexture(s,r){try{const a=this.dirtyStart,n=this.dirtyEnd;if(!this.hasDirty)return;e("esri-2d-update-debug")&&console.debug(`Version[${r}] AttributeStoreView.updateTexture`,{start:a,end:n,firstBytes:new Uint8Array(this.data.buffer.slice(0,16)),block:this}),this._resetRange();const u=this.data.buffer,h=this.getTexture(s),o=4,d=(a-a%this.size)/this.size,l=(n-n%this.size)/this.size,p=d,_=this.size,g=l,x=d*this.size*o,f=(_+g*this.size)*o-x,b=c(this.pixelType),T=new b(u,x*b.BYTES_PER_ELEMENT,f),y=this.size,m=g-p+1;if(m>this.size)return void i.getLogger("esri.views.2d.engine.webgl.AttributeStoreView").error(new t("mapview-webgl","Out-of-bounds index when updating AttributeData"));h.updateData(0,0,p,y,m,T)}catch(t){}}update(t){const{data:e,start:i,end:s}=t;if(null!=e&&null!=this.data){const s=this.data,r=i*this.texelSize;for(let i=0;i<e.length;i++){const a=1<<i%this.texelSize;t.layout&a&&(s[r+i]=e[i])}}this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,s)}resize(t,e){const i=this.size;if(this.size=e,this.textureOnly)return void(i!==this.size&&(this._lastTexture=this._texture,this._texture=null));const s=c(this.pixelType);this.destroy(),this.data=new s(t.buffer)}_resetRange(){this.dirtyStart=2147483647,this.dirtyEnd=0}_initTexture(t){const e=new b(t,this._textureDesc,this.data??void 0);if(null!=this._lastTexture&&this._fbos[0]){const i=this._lastTexture.descriptor.width,s=this._lastTexture.descriptor.height,r=this._lastTexture.descriptor.dataType,a=this._lastTexture.descriptor.pixelFormat,n=this.getFBO(t),u=p(r),h=new(c(r))(new ArrayBuffer(i*s*u*this.texelSize)),o=t.getBoundFramebufferObject(),{x:d,y:l,width:_,height:g}=t.getViewport();t.bindFramebuffer(n),n.readPixels(0,0,i,s,a,r,h),e.updateData(0,0,0,2*i,s/2,h),t.setViewport(d,l,_,g),t.bindFramebuffer(o)}return this.destroy(),this._texture=e,this._texture}}class m{constructor(){this.size=0,this._pendingAttributeUpdates=[],this._version=0,this._epoch=0,this._locked=!1}_initialize(t){if(!t)throw new Error("InternalError: initArgs must be defined");const i=t.blockDescriptors;if(this.size=t.blockSize,e("esri-2d-update-debug")&&console.debug("AttributeStoreView.initialize",{message:t}),null==this._data)this._data=i.map(((t,e)=>null!=t?new y(t,this.size,e):null));else for(let t=0;t<this._data.length;t++){const e=this._data[t],s=i[t];null!=s&&(null==e?this._data[t]=new y(s,this.size,t):e.resize(s,this.size))}}destroy(){for(const t of this._data??[])t?.destroy();this._defaultTexture?.dispose(),this._defaultTexture=null,this._pendingAttributeUpdates=[]}isEmpty(){return null==this._data}getBlock(t){return null==this._data?null:this._data[t]}setLabelMinZoom(t,e){this.setData(t,0,1,e)}getLabelMinZoom(t){return this.getData(t,0,1,255)}getFilterFlags(t){return this.getData(t,0,0,0)}getVVSize(t){return this.getData(t,s.VV,0,0)}getData(t,e,i,s){if(!this._data)return 0;const r=this._data[e];if(null==r)return 0;const a=r.getData(t,i);return null!=a?a:s}setData(t,e,i,s){this._data[e].setData(t,i,s)}lockTextureUploads(){this._locked=!0}unlockTextureUploads(){this._locked=!1,this.update()}requestUpdate(t){this._version=t.version,this._pendingAttributeUpdates.push(t),e("esri-2d-update-debug")&&console.debug(`Version[${this._version}] AttributeStoreView.requestUpdate`,{message:t})}get currentEpoch(){return this._epoch}update(){if(this._locked)return;const t=this._pendingAttributeUpdates;this._pendingAttributeUpdates=[];for(const i of t){const{blockData:t,initArgs:s,sendUpdateEpoch:r,version:a}=i;e("esri-2d-update-debug")&&console.debug(`Version[${this._version}] Epoch[${r}] AttributeStoreView.applyUpdate`),this._version=a,this._epoch=r,null!=s&&this._initialize(s);const n=this._data;for(let i=0;i<t.length;i++){const s=t[i],r=n[i];null!=r&&null!=s&&(e("esri-2d-update-debug")&&console.debug(`Version[${this._version}] CpuBlock[${i}] AttributeStoreView.update`,{block:s}),r.update(s))}}}getUniforms(t){return{filterFlags:{texture:this._getTexture(t,s.FilterFlags),unit:r},animation:{texture:this._getTexture(t,s.Animation),unit:a},gpgpu:{texture:this._getTexture(t,s.GPGPU),unit:n},visualVariableData:{texture:this._getTexture(t,s.VV),unit:u},dataDriven0:{texture:this._getTexture(t,s.DD0),unit:h},dataDriven1:{texture:this._getTexture(t,s.DD1),unit:o},dataDriven2:{texture:this._getTexture(t,s.DD2),unit:d},size:this.size}}_getTexture(t,e){const i=this._data?.[e];return i?(i.updateTexture(t,this._version),i.getTexture(t)):this._getDefaultTexture(t)}_getDefaultTexture(t){if(null==this._defaultTexture){const e=new f;e.wrapMode=_.CLAMP_TO_EDGE,e.samplingMode=g.NEAREST,e.width=1,e.height=1,this._defaultTexture=new b(t,e,new Uint8Array(4))}return this._defaultTexture}}class w extends T{constructor(t){super(t),this._statisticsByLevel=new Map,this.attributeView=new m}destroy(){this.children.forEach((t=>t.destroy())),this.removeAllChildren(),this.attributeView.destroy()}doRender(t){t.context.capabilities.enable("textureFloatLinear"),super.doRender(t)}createRenderParams(t){const e=super.createRenderParams(t);return e.attributeView=this.attributeView,e.instanceStore=this._instanceStore,e.statisticsByLevel=this._statisticsByLevel,e}}function z(t){return t}class D{constructor(t,e,i){this._instanceId=t,this.techniqueRef=e,this._input=i}get instanceId(){return this._instanceId}createMeshInfo(t){return{id:this._instanceId,techniqueType:this.techniqueRef.type,inputParams:t,optionalAttributes:this._input.optionalAttributes}}getInput(){return this._input}setInput(t){this._input=t}}export{w as A,D as F,z as c};
