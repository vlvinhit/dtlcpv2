/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import t from"../request.js";import s from"../core/Error.js";import{JSONSupportMixin as r}from"../core/JSONSupport.js";import i from"../core/Loadable.js";import{removeTrailingSlash as n,Url as o}from"../core/urlUtils.js";import{property as a}from"../core/accessorSupport/decorators/property.js";import"../core/lang.js";import"../chunks/Logger.js";import{r as u}from"../chunks/reader.js";import{subclass as c}from"../core/accessorSupport/decorators/subclass.js";import{w as l}from"../chunks/writer.js";import{g as d,h as m,o as h,j as f,c as p,k as g}from"../chunks/EditBusLayer.js";import{p as w}from"../chunks/utils8.js";import{createVersionAdapters as V}from"./versionAdapters/utils.js";import"../config.js";import"../kernel.js";import"../core/Accessor.js";import"../core/Handles.js";import"../chunks/maybe.js";import"../chunks/metadata.js";import"../chunks/utils.js";import"../chunks/handleUtils.js";import"../chunks/ObservableBase.js";import"../chunks/tracking.js";import"../core/scheduling.js";import"../core/promiseUtils.js";import"../chunks/ensureType.js";import"../core/Promise.js";import"../core/Evented.js";import"../chunks/uuid.js";import"../layers/catalog/catalogUtils.js";import"../core/reactiveUtils.js";import"../chunks/asyncUtils.js";import"../core/Collection.js";import"../chunks/shared.js";import"../chunks/SimpleObservable.js";class y{constructor(e){this.moments=[],this.forwardMoments=[],this.moments.push(e)}push(e){return this.forwardMoments.length,this.moments.push(e)}pop(){if(!(this.forwardMoments.length>0))return this.moments.pop()}undo(){if(!this.canUndo())return;const e=this.moments.pop();return this.forwardMoments.push(e),e}peek(){return this.moments.at(-1)}canUndo(){return this.moments.length>1}canRedo(){return this.hasForwardEdits()}redo(){if(!this.canRedo())return;const e=this.forwardMoments.pop();return this.moments.push(e),e}size(){return this.moments.length+this.forwardMoments.length}hasForwardEdits(){return this.forwardMoments.length>0}clearForwardEdits(){this.forwardMoments=[]}}let k=class extends(r(i)){constructor(e){super(e),this.url=null,this.sourceJSON=null,this.name=null,this.defaultVersionIdentifier=null,this.capabilities=null,this._isDefault=e=>!e||e===this.defaultVersionIdentifier.name,this._dateEquals=(e,t)=>!e&&!t||!(!e||!t)&&e.toISOString()===t.toISOString(),this._applyEditsHandler=e=>{const{serviceUrl:t,gdbVersion:s,result:r}=e;t===this._featureServiceUrl&&r.then((e=>{const t=e.historicMoment;t&&this._addMomentToVersionItem(s,t)}))}}initialize(){this.url=n(this.url),this._featureServiceUrl=this.url.replace(/\/VersionManagementServer/i,"/FeatureServer"),d.has(this.url)||d.set(this.url,new Map);const e=(m.get(this.url)??0)+1;m.set(this.url,e),this.when().then((()=>this.addHandles(h(this._applyEditsHandler))),(()=>{}))}destroy(){const e=(m.get(this.url)??1)-1;m.set(this.url,e),0===e&&d.delete(this.url),f.delete(this._featureServiceUrl)}read(e,t){this.sourceJSON=e,super.read(e,t)}readDefaultVersionIdentifier(e,t){return{name:t.defaultVersionName,guid:t.defaultVersionGuid}}writeDefaultVersionIdentifier(e,t){t.defaultVersionName=e.name,t.defaultVersionGuid=e.guid}load(e){return this.addResolvingPromise(this._fetchService(this.url,e)),Promise.resolve(this)}async createVersion(e){const[{createVersion:t},{default:s}]=await Promise.all([import("../chunks/createVersion.js"),import("../chunks/CreateVersionParameters.js")]),r=s.from(e);return t(this.url,r)}async deleteVersion(e){const[{deleteVersion:t},{default:s}]=await Promise.all([import("../chunks/deleteVersion.js"),import("../chunks/DeleteVersionParameters.js")]);let r;e.guid&&d.get(this.url)?.has(e.guid)&&(r=p??void 0);const i=new s({versionName:e.name,sessionId:r});return t(this.url,i)}async getVersionInfoExtended(e){const{getVersion:t}=await import("../chunks/getVersion.js");return t(this.url,e.guid)}async getVersionInfos(e={}){const[{getVersionInfos:t},{default:s}]=await Promise.all([import("../chunks/getVersionInfos.js"),import("../chunks/GetVersionInfosParameters.js")]),r=s.from(e);return t(this.url,r)}async reconcile(e,t={}){const[{reconcile:s},{default:r}]=await Promise.all([import("../chunks/reconcile.js"),import("../chunks/ReconcileParameters.js")]),i=r.from(t);return i.sessionId=p,s(this.url,e.guid,i)}async post(e){const[{post:t},{default:s}]=await Promise.all([import("../chunks/post.js"),import("../chunks/PostParameters.js")]),r=s.from({sessionId:p});return t(this.url,e.guid,r)}async alterVersion(e,t){const[{alterVersion:s},{default:r}]=await Promise.all([import("../chunks/alterVersion.js"),import("../chunks/AlterVersionParameters.js")]),i=r.from(t);return s(this.url,e.guid,i)}async startReading(e){return(await this.startReadingWithResult(e)).success}async startReadingWithResult(e){const{startReading:t}=await import("../chunks/startReading.js"),s=await t(this.url,e.guid,p);if(s.success){const t=await this.getVersionInfoExtended(e),s=new Date(t.modifiedDate),r={name:t.versionIdentifier.name,moment:s,lockType:"read"};this._addOrUpdateItem(e.guid,r),g(this._featureServiceUrl,null,e.name,s)}return s}async stopReading(e){return(await this.stopReadingWithResult(e)).success}async stopReadingWithResult(e){const{stopReading:t}=await import("../chunks/stopReading.js"),s=await t(this.url,e.guid,p);return s.success&&(d.get(this.url)?.delete(e.guid),g(this._featureServiceUrl,null,e.name,null)),s}async startEditing(e){return(await this.startEditingWithResult(e)).success}async startEditingWithResult(e){const{startEditing:t}=await import("../chunks/startEditing.js"),s=await t(this.url,e.guid,p);if(s.success){const t=await this.getVersionInfoExtended(e),s=new Date(t.modifiedDate),r=new y(s),i={name:e.name,moment:s,lockType:"edit",stack:r};this._addOrUpdateItem(e.guid,i),g(this._featureServiceUrl,null,e.name,s)}return s}async stopEditing(e,t){return(await this.stopEditingWithResult(e,t)).success}async stopEditingWithResult(e,t){if(t){const t=d.get(this.url)?.get(e.guid);if(t?.stack?.canRedo()){const[{deleteForwardEdits:s},{default:r}]=await Promise.all([import("../chunks/deleteForwardEdits.js"),import("../chunks/DeleteForwardEditsParameters.js")]),i=await s(this.url,e.guid,new r({sessionId:p,moment:t.moment}));if(!i.success)return i}}const{stopEditing:s}=await import("../chunks/stopEditing.js"),r=await s(this.url,e.guid,p,t);if(r.success){const t=await this.getVersionInfoExtended(e),s=new Date(t.modifiedDate);this._addOrUpdateItem(e.guid,{name:e.name,moment:s,lockType:"read",editMomentStack:void 0}),g(this._featureServiceUrl,null,e.name,s)}return r}getLockType(e){const t=d.get(this.url)?.get(e.guid)?.lockType;return t??"none"}async changeVersion(e,t,r){if(r&&"name"in r&&!await this.getVersionInfoExtended(r))throw new s("version-management-service:invalid-version","version does not exist");if("networkServiceUrl"in e){if(this._featureServiceUrl.toLowerCase()===e.featureServiceUrl.toLowerCase())return this._changeVersionInternal(e,t,r)}else{let s;"layers"in e?(s=e.allTables.concat(e.allLayers),e.utilityNetworks&&e.utilityNetworks.forEach((e=>{this._featureServiceUrl.toLowerCase()===e.featureServiceUrl.toLowerCase()&&this._changeVersionInternal(e,t,r)}))):s=e;for(const e of s)if("feature"===e.type||"subtype-group"===e.type){const s=/^(.*\/FeatureServer)\/\d+$/,i=e.url.replace(s,"$1");if(this._featureServiceUrl.toLowerCase()===i.toLowerCase()&&!this._changeVersionInternal(e,t,r))return!1}else if("group"===e.type){const s=e.allTables.concat(e.allLayers);for(const e of s)if("feature"===e.type||"subtype-group"===e.type){const s=/^(.*\/FeatureServer)\/\d+$/,i=e.url.replace(s,"$1");if(this._featureServiceUrl.toLowerCase()===i.toLowerCase()&&!this._changeVersionInternal(e,t,r))return!1}}}return!0}async changeVersionWithResult(e,t,s){let r;if("layers"in e){const t=V(e.allTables.concat(e.allLayers).filter((e=>"group"!==e.type)).toArray());e.utilityNetworks&&e.utilityNetworks.forEach((e=>{const s=V([e]);t.push(...s)})),r=t}else r=e;if(s&&"name"in s&&!await this.getVersionInfoExtended(s)){const e=new Map;for(const t of r)e.set(t,{success:!1});return e}if(t&&"name"in t&&"none"!==this.getLockType(t)){const e=new Map;for(const t of r)e.set(t,{success:!1});return e}const i=new Map;for(const e of r)if(e)if(e.featureServiceUrl.toLowerCase()===this._featureServiceUrl.toLowerCase()){const r=this._changeVersionInternalWithResult(e,t,s);i.set(e,r)}else i.set(e,{success:!1});return i}async getVersionIdentifierFromName(e){try{const t=await this.getVersionInfos({includeHidden:!0});return t.find((t=>t.versionIdentifier.name===e))?.versionIdentifier||null}catch{return null}}async getVersionIdentifierFromGuid(e){const{getVersion:t}=await import("../chunks/getVersion.js");try{return(await t(this.url,e)).versionIdentifier}catch{return null}}canUndo(e){const t=d.get(this.url)?.get(e.guid);return!!t?.stack?.canUndo()}canRedo(e){const t=d.get(this.url)?.get(e.guid);return!!t?.stack?.canRedo()}undo(e){const t=d.get(this.url)?.get(e.guid),s=t?.stack?.undo()||void 0;if(t&&s){const s=t.stack.peek();g(this._featureServiceUrl,null,e.name,s),d.get(this.url)?.set(e.guid,{...t,moment:s})}}redo(e){const t=d.get(this.url)?.get(e.guid),s=t?.stack?.redo()||void 0;t&&s&&(g(this._featureServiceUrl,null,e.name,s),d.get(this.url)?.set(e.guid,{...t,moment:s}))}_setUpData(e,t){let r=null,i=null,n=null,o=null;const a=e=>{const t=d?.get(this.url)?.get(e.guid);n=e.name,o=t?.moment??null};if(e&&"name"in e){if("none"!==this.getLockType(e))throw new s("version-management-service:version-locked","version is locked");r=e.name,i=null,t&&"name"in t?a(t):(n=this.defaultVersionIdentifier.name,o=t)}else r=this.defaultVersionIdentifier.name,i=e,t&&"name"in t?a(t):(n=this.defaultVersionIdentifier.name,o=t);return{fromVersionName:r,fromMoment:i,toVersionName:n,toMoment:o}}_changeVersionInternal(e,t,s){try{const{fromVersionName:r,fromMoment:i,toVersionName:n,toMoment:o}=this._setUpData(t,s);(this._isDefault(r)&&this._isDefault(e.gdbVersion)&&this._dateEquals(e.historicMoment,i)||r===e.gdbVersion&&this._dateEquals(e.historicMoment,i))&&(e.gdbVersion=n,e.historicMoment=o)}catch(e){return!1}return!0}_changeVersionInternalWithResult(e,t,s){try{const{fromVersionName:r,fromMoment:i,toVersionName:n,toMoment:o}=this._setUpData(t,s);return this._isDefault(r)&&this._isDefault(e.gdbVersion)&&this._dateEquals(e.historicMoment,i)||r===e.gdbVersion&&this._dateEquals(e.historicMoment,i)?(e.gdbVersion=n,e.historicMoment=o,{success:!0}):{success:!1}}catch(e){return{success:!1}}}_addMomentToVersionItem(e,t){const s=d.get(this.url);if(s)for(const[r,i]of s)i.name===e&&this._addToStack(r,t)}_addToStack(e,t){const s=d.get(this.url),r=s?.get(e);return!!r?.stack&&(function(e,t){return!e||e.getTime()<t.getTime()}(r.stack.peek(),t)&&r.stack.push(t),s.set(e,{...r,moment:t}),!0)}_addOrUpdateItem(e,t){const s=d.get(this.url),r=s?.get(e);return r?(s.set(e,{...r,...t}),!0):!(!t.name||!t.lockType||(s?.set(e,{...t,lockType:t.lockType}),0))}async _fetchService(e,s){if(this.sourceJSON){this.read(this.sourceJSON,{origin:"service",url:w(e)});const t=new o(this.url).host;return void f.set(t,this.defaultVersionIdentifier.name)}const r=await t(e,{responseType:"json",query:{f:"json"},...s});this.read(r.data)}};e([a()],k.prototype,"url",void 0),e([a()],k.prototype,"sourceJSON",void 0),e([a({type:String,json:{write:!0}})],k.prototype,"name",void 0),e([a({json:{write:{target:{defaultVersionName:{type:String},defaultVersionGuid:{type:String}}},read:{source:["defaultVersionName","defaultVersionGuid"]}}})],k.prototype,"defaultVersionIdentifier",void 0),e([u("defaultVersionIdentifier",["defaultVersionName","defaultVersionGuid"])],k.prototype,"readDefaultVersionIdentifier",null),e([l("defaultVersionIdentifier",{defaultVersionName:{type:String},defaultVersionGuid:{type:String}})],k.prototype,"writeDefaultVersionIdentifier",null),e([a({json:{write:!0}})],k.prototype,"capabilities",void 0),k=e([c("esri.versionManagement.VersionManagementService")],k);const j=k;export{j as default};
