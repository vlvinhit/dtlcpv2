// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("../../../../core/has ../../../../core/maybe ../../../../core/object ../../../../core/promiseUtils ../../../../core/accessorSupport/diffUtils ../../../../core/workers/utils ../../../../geometry/SpatialReference ../../engine/webgl/mesh/MultiTileMeshData ../../engine/webgl/mesh/factories/FeatureMeshFactory ../../engine/webgl/mesh/factories/ResourceProxy ../../engine/webgl/shaderGraph/techniques/mesh/MeshWriterRegistry ../../engine/webgl/util/MatcherContext ./ProcessorTileMessageQueue ./processor/BinningStrategy ./processor/ClusterStrategy ./processor/FeatureUpdateStrategy ./support/AttributeStore ./support/ComputedAttributeStorage".split(" "),
function(g,r,h,k,t,u,v,w,x,y,z,A,B,C,D,E,F,G){class H{constructor(a,b){this._connection=a;this._source=b;this._version=1;this._registry=new z.MeshWriterRegistry;this._proxy=new y.ResourceProxy({fetch:(c,d)=>this._connection.layerView.fetch(c,d),fetchDictionary:(c,d)=>this._connection.layerView.fetchDictionary(c,d)});this._attributeStore=new F.AttributeStore({isLocal:!1,update:c=>u.ignoreConnectionErrors(this._connection.container.updateAttributeView(c))})}destroy(){this._proxy.destroy();this._strategy?.destroy();
this._attributeStore.destroy()}get aggregateQueryEngine(){return this._strategy?.aggregateQueryEngine}getDisplayFeatures(a){return this._strategy?this._strategy.getDisplayFeatures(a):{features:[],aggregates:[]}}getFeatureObjectIdsForAggregate(a){return this._strategy?this._strategy.getFeatureObjectIdsForAggregate(a):[]}onSubscribe(a){this._strategy?.onSubscribe(a)}onUnsubscribe(a){this._strategy?.onUnsubscribe(a)}async update(a,b,c,d,e){a=a.processor;var f=h.notDeepEqual(this._schema?.storage,a.storage);
const m=h.notDeepEqual(this._schema?.mesh.properties,a.mesh.properties),n=h.notDeepEqual(this._schema?.mesh.factory,a.mesh.factory),p=h.notDeepEqual(this._schema?.mesh.strategy,a.mesh.strategy),q=m||n||p;if(f||q||d){g("esri-2d-update-debug")&&console.debug(`Version[${this._version}] SymbolProcessor.update`,{changes:t.diff(this._schema,a),schema:a});this._schema=a;f=v.fromJSON(this._source.service.outSpatialReference);var l=new G.ComputedAttributeStorage({fields:this._source.metadata.fieldsIndex,spatialReference:f});
await this._attributeStore.update(a.storage,l,this._source.metadata,f,b);this._strategy?.invalidateAttributeData();if(d||q){(p||m)&&await this._updateStrategy(a.mesh.strategy,f,e,a.mesh.properties.timeZone);this._updateSortKey(l,"sortKey"in a.mesh.properties?a.mesh.properties.sortKey:null);c=new A.MatcherContext(l,this._proxy,c,this._registry);if(n||"dictionary"===a.mesh.factory.symbology.type)this._factory=await x.FeatureMeshFactory.create(c,a.mesh.factory);this._invalidate();this._version=b;return this._connection.container.updateRenderState(this._version)}}}async applyLocalEdit(a){if(this._strategy){a=
this._strategy.applyLocalEdit(a);for await(const b of a)try{await this._process(b)}catch(c){}}}async updateChunks(){await this._doUpdateChunks();this._strategy?.afterUpdateChunks()}async removeChunks(a){this._strategy?.removeChunks(a);this._attributeStore.incrementDisplayIdGeneration()}updateHighlight({highlights:a}){if(this._strategy){var b=this._strategy.displayMap(a,({objectId:c})=>c,(c,{highlightFlags:d},e)=>({objectId:e,displayId:c,highlightFlags:d}));this._attributeStore.setHighlight(b,a)}else this._attributeStore.setHighlight(a.map(({objectId:c,
highlightFlags:d})=>({objectId:c,highlightFlags:d,displayId:-1})),a)}async _doUpdateChunks(){if(this._strategy){var a=this._strategy.updateChunks(),b=[],c=new Map;for await(const d of a)a=c.get(d.id),null==a&&(a=new B.ProcessorTileMessageQueue({concurrency:16,process:e=>this._process(e)}),c.set(d.id,a)),a=a.push(d).catch(e=>k.throwIfNotAbortError(e)),b.push(a);try{await Promise.all(b)}catch(d){}g("esri-2d-update-debug")&&console.log("SendUpdates");this._attributeStore.sendUpdates();g("esri-2d-update-debug")&&
console.log("SendUpdates.await")}}async _updateStrategy(a,b,c,d){this._strategy?.destroy();switch(a.type){case "feature":this._strategy=new E.FeatureUpdateStrategy(this._source,this._attributeStore,d);break;case "binning":this._strategy=await C.BinningStrategy.create(a,b,this._source,this._attributeStore,d);break;case "cluster":this._strategy=await D.ClusterStrategy.create(this._connection,a,b,this._source,this._attributeStore,d)}for(const e of c)this._strategy.onSubscribe(e)}async _updateSortKey(a,
b){this._sortInfo=r.destroyMaybe(this._sortInfo?.computed);null!=b&&(a=b.byRenderer?null:await a.createComputedField(b),this._sortInfo={...b,computed:a})}_invalidate(){this._strategy&&this._strategy.invalidate()}async _process(a){const b=a.subscription;g("esri-2d-update-debug")&&console.debug(`Version[${this._version}] Tile[${b.tile.key.id}, end=${a.end}] Processor._process`);await this._fetchResources(a);k.throwIfAborted(b.signal);var c=await this._write(a,b.tile.createArcadeEvaluationOptions(this._schema?.mesh.properties.timeZone));
const {message:d,transferList:e}=c.serialize(b.tile.tileInfoView.tileInfo.isWrappable);c={objectIdMap:null,inner:a.createMessage(d,this._version,this._attributeStore.epoch)};if(this._schema?.mesh.properties.returnMeshObjectId){c.objectIdMap={};const f=a.reader?.getCursor();if(f)for(;f.next();)c.objectIdMap[f.getDisplayId()]=f.getObjectId()}k.throwIfAborted(b.signal);await this._connection.container.onMessage(c,{signal:b.signal,transferList:e});this._attributeStore.sendUpdates();g("esri-2d-update-debug")&&
console.debug(`Version[${this._version}] Tile[${b.tile.key.id}, end=${a.end}] Processor._process.await`)}async _fetchResources(a){await this._fetchMatcherResources(a);await this._fetchWriterResources(a)}async _fetchMatcherResources(a){if(a.reader)return this._factory.enqueueMatcherRequests(this._proxy,a.reader)}async _fetchWriterResources(a){if(a.reader){var b=a.reader.getCursor();for(a=a.subscription.tile.createArcadeEvaluationOptions(this._schema.mesh.properties.timeZone);b.next();)this._factory.enqueueWriterRequests(this._proxy,
b,a);await this._proxy.fetchEnqueuedResources()}}async _write(a,b){const c=a.subscription.tile;a=a.reader?.getCursor();var d=a?.getSize()??0;d=new w.MultiTileMeshData(c.key,this._strategy.enablePixelBuffering,c.tileInfoView.tileInfo.isWrappable,d);if(!a)return d;const e=c.createArcadeEvaluationOptions(this._schema.mesh.properties.timeZone);for(;a.next();){const f=this._getSortKeyValue(a,b);d.entityStart(a.getDisplayId(),f);this._factory.write(d,this._proxy,a,e,c.level);d.entityEnd()}return d}_getSortKeyValue(a,
b){if(!this._sortInfo)return 0;const {computed:c,order:d,byRenderer:e}=this._sortInfo;a=e?this._factory.getSortKey(a,b):c?.read(a,b);return null==a||isNaN(a)?0:a*("asc"===d?-1:1)}}return H});