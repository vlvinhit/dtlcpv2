// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("exports ./DictionaryMatcher ./IntervalMatcher ./LabelMatcher ./MapMatcher ./Matcher".split(" "),function(d,m,n,p,q,g){async function e(b,a){switch(a.type){case "simple":case "heatmap":case "dot-density":case "pie-chart":return g.FeatureMatcher.from(b,a);case "interval":return n.IntervalMatcher.fromIntervalSchema(b,a);case "dictionary":return m.DictionaryMatcher.fromDictionaryRenderer(b,a);case "label":return p.LabelMatcher.fromLabelSchema(b,a);case "map":return q.MapMatcher.fromMatcherSchema(b,
a);case "subtype":return h.fromSubtypes(b,a);case "cluster":return k.fromClusterSchema(b,a);default:throw Error("Impl");}}class h extends g.FeatureMatcher{constructor(b,a){super();this._subMatchers=b;this._subtypeField=a}static async fromSubtypes(b,a){const c=new Map,f=[];for(const l in a.renderers){const r=parseInt(l,10),u=e(b,a.renderers[l]).then(t=>c.set(r,t));f.push(u)}await Promise.all(f);return new h(c,a.subtypeField)}match(b,a){var c=b.readAttribute(this._subtypeField);return(c=this._subMatchers.get(c))?
c.match(b,a):null}}class k extends g.FeatureMatcher{static async fromClusterSchema(b,a){const [c,f]=await Promise.all([e(b,a.feature),e(b,a.cluster)]);return new k(c,f)}constructor(b,a){super();this._featureMatcher=b;this._clusterMatcher=a}match(b,a){return 1===b.readAttribute("cluster_count")?this._featureMatcher.match(b,a):this._clusterMatcher.match(b,a)}}d.ClusterMatcher=k;d.SubtypeMatcher=h;d.createMatcher=e;Object.defineProperty(d,Symbol.toStringTag,{value:"Module"})});