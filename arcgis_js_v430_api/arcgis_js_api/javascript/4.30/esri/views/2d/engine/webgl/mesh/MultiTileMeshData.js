// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("exports ../../../tiling/TileInfoView ../../../tiling/TileKey ../../../tiling/TileQueue ../../../tiling/TileStrategy ../definitions ./MeshData ../../../layers/features/support/tileUtils".split(" "),function(l,r,n,t,u,e,m,p){function h(a){switch(a){case 1:case 8:case 32:return-1;case 2:case 64:return 0;case 4:case 16:case 128:return 1}}function k(a){switch(a){case 1:case 2:case 4:return-1;case 8:case 16:return 0;case 32:case 64:case 128:return 1}}class q{constructor(a,b,c,d=0){this.tileKey=
a;this._bufferingEnabled=b;this._sizeHint=d;this._meshes={self:new m.MeshData(this.id,this._sizeHint),neighbors:[]};this._currentEntityOverlaps=this._currentRecordOverlaps=0;this._copyBufferedDataIntoSelf=c&&this._bufferingEnabled&&0===a.level}get id(){return this.tileKey.id}vertexCount(){return this._meshes.self.vertexCount()}indexCount(){return this._meshes.self.indexCount()}indexEnsureSize(a){this._meshes.self.indexEnsureSize(a)}entityStart(a,b=a){this._currentEntityOverlaps=0;this._meshes.self.entityStart(a,
b)}entityRecordCount(){return this._meshes.self.entityRecordCount()}entityEnd(){this._meshes.self.entityEnd();if(this._bufferingEnabled&&!this._copyBufferedDataIntoSelf)for(let a=0;8>a;a++)this._currentEntityOverlaps&1<<a&&this._meshes.neighbors[a].entityEnd()}recordStart(a,b,c){this._currentRecordOverlaps=0;this._meshes.self.recordStart(a,b,c)}recordEnd(a){return(a=this._meshes.self.recordEnd(this._currentRecordOverlaps))&&0!==this._currentRecordOverlaps?(this._copyIntoNeighbors(),this._currentEntityOverlaps|=
this._currentRecordOverlaps,!0):a}recordBounds(a,b,c,d){this._bufferingEnabled&&this._addOverlap(a,b,c,d)}recordCount(){return this._meshes.self.recordCount()}metricStart(a){this._meshes.self.metricStart(a)}metricBoxWrite(a){this._meshes.self.metricBoxWrite(a)}metricEnd(){this._meshes.self.metricEnd()}vertexWrite(a){this._meshes.self.vertexWrite(a)}vertexWriteF32(a){this._meshes.self.vertexWriteF32(a)}vertexWriteRegion(a){this._meshes.self.vertexWriteRegion(a)}indexWrite(a){this._meshes.self.indexWrite(a)}serialize(a){const b=
{message:[],transferList:[]},c=this._meshes.self.serialize();b.message.push({tileId:this.tileKey.id,...c.message});b.transferList.push(...c.transferList);this._meshes.neighbors.forEach((d,f)=>{d=d.serialize();var g=1<<f;f=h(g);g=k(g);f=p.getPow2NeighborKey(new n(this.tileKey),f,g,a);b.message.push({tileId:f.id,...d.message});b.transferList.push(...d.transferList)});return b}_addOverlap(a,b,c,d){c=Math.min(e.tileSize/2,c);d=Math.min(e.tileSize/2,d);this._currentRecordOverlaps|=255^((a<0+c?148:a>=e.tileSize-
c?41:189)|(b<0+d?224:b>=e.tileSize-d?7:231))}_copyIntoNeighbors(){for(let c=0;8>c;c++){var a=1<<c;if(this._currentRecordOverlaps&a){if(this._copyBufferedDataIntoSelf){var b=-h(a)*e.tileSize;a=-k(a)*e.tileSize;if(0!==a)continue;this._meshes.self.copyLast(b,a);continue}this._meshes.neighbors[c]||(this._meshes.neighbors[c]=new m.MeshData(a,Math.floor(this._sizeHint/16)));b=this._meshes.neighbors[c];const d=-h(a)*e.tileSize;a=-k(a)*e.tileSize;b.copyLastFrom(this._meshes.self,d,a)}}}}l.MultiTileMeshData=
q;Object.defineProperty(l,Symbol.toStringTag,{value:"Module"})});