// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("exports ../../../../../../../core/mathUtils ../../../../../../../core/screenUtils ../../../../../../../geometry/GeometryCursor ../../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper ../../../alignmentUtils ../../../definitions ../../../mesh/templates/shapingUtils ../fill/meshWriterUtils ../mesh/loadGeometryEngine ../mesh/MeshWriter ../shaders/constants ./TextParams ../../../../../../webgl/enums".split(" "),function(w,z,h,G,H,A,v,I,k,J,K,B,L,l){const r=[4,4];var p=[16,4];const M=
{topLeft:p,topRight:p,bottomLeft:p,bottomRight:p};p=[4,2];const m=[4,6],C={topLeft:p,topRight:p,bottomLeft:m,bottomRight:m},D={topLeft:p,topRight:m,bottomLeft:p,bottomRight:m},N={topLeft:m,topRight:m,bottomLeft:r,bottomRight:r},O={topLeft:r,topRight:r,bottomLeft:m,bottomRight:m},P={topLeft:m,topRight:r,bottomLeft:m,bottomRight:r},Q={topLeft:r,topRight:m,bottomLeft:r,bottomRight:m},E={createComputedParams:a=>a,optionalAttributes:{zoomRange:{type:l.DataType.UNSIGNED_SHORT,count:2,packPrecisionFactor:v.minMaxZoomPrecisionFactor,
packTessellation:({minZoom:a,maxZoom:b})=>[a||0,b||28]},clipAngle:{type:l.DataType.UNSIGNED_BYTE,count:1,packTessellation:({clipAngle:a})=>Math.round(254/360*(a||0))},referenceSymbol:{type:l.DataType.BYTE,count:4,packPrecisionFactor:1,packTessellation:(a,b)=>{if(!a.referenceBounds)return[0,0,0,0];const c=A.getXDirection(b.horizontalAlignment);b=A.getYDirection(b.verticalAlignment);const {offsetX:e,offsetY:d,size:f}=a.referenceBounds;return[h.pt2px(e),-h.pt2px(d),h.pt2px(f),c+1<<2|b+1]}}},attributes:{pos:{type:l.DataType.SHORT,
count:2,pack:"position",packPrecisionFactor:10},id:{type:l.DataType.UNSIGNED_BYTE,count:3,pack:"id"},bitset:{type:l.DataType.UNSIGNED_BYTE,count:1,packTessellation:({isBackground:a,mapAligned:b})=>k.packBitset([[B.bitsetTextIsBackground,a],[B.bitsetTextIsMapAligned,!!b]])},offset:{type:l.DataType.SHORT,count:2,packPrecisionFactor:8,packAlternating:{count:4,packTessellation:({offsets:a})=>{const {bottomLeft:b,bottomRight:c,topLeft:e,topRight:d}=a;return[e,d,b,c]}}},textureUV:{type:l.DataType.SHORT,
count:2,packPrecisionFactor:4,packAlternating:{count:4,packTessellation:({texcoords:a})=>{const {bottomLeft:b,bottomRight:c,topLeft:e,topRight:d}=a;return[e,d,b,c]}}},color:{type:l.DataType.UNSIGNED_BYTE,count:4,normalized:!0,packTessellation:({color:a})=>a},fontSize:{type:l.DataType.UNSIGNED_SHORT,count:1,packPrecisionFactor:4,packTessellation:({fontSize:a})=>h.pt2px(a)},referenceSize:{type:l.DataType.UNSIGNED_BYTE,count:1,packPrecisionFactor:4,packTessellation:({fontSize:a},{referenceSize:b})=>
h.pt2px(b??a)},haloColor:{type:l.DataType.UNSIGNED_BYTE,count:4,normalized:!0,pack:({haloColor:a})=>k.processColorInput(a)},haloFontSize:{type:l.DataType.UNSIGNED_SHORT,count:1,packPrecisionFactor:4,pack:({haloFontSize:a})=>h.pt2px(a)}}};class R extends K.MeshWriter{constructor(){super(...arguments);this.vertexSpec=E;this._textMeshParamsPropsInitialized=!1}ensurePacked(a,b,c){super.ensurePacked(a,b,c);if(!this._textMeshParamsPropsInitialized||this._evaluator.hasDynamicProperties)this._textMeshTransformProps=
new L.TextMeshTransformProps(this.evaluatedMeshParams),this._textMeshParamsPropsInitialized=!0}_write(a,b,c){const e=this._getShaping();if(e){var d=b.getDisplayId();if(null!=this.evaluatedMeshParams.placement)return this._writePlacedTextMarkers(a,b,e,c);if(c?.nextPath())return c.nextPoint(),this._writeGlyphs(a,d,c.x,c.y,e,0);if("esriGeometryPolygon"===b.geometryType){b=b.readCentroidForDisplay();if(!b)return;const [f,n]=b.coords;return this._writeGlyphs(a,d,f,n,e,0)}if("esriGeometryMultipoint"===
b.geometryType)b.readGeometryForDisplay()?.forEachVertex((f,n)=>this._writeGlyphs(a,d,f,n,e,0));else return c=b.readXForDisplay(),b=b.readYForDisplay(),this._writeGlyphs(a,d,c,b,e,0)}}_writePlacedTextMarkers(a,b,c,e){if(e=e??G.GeometryCursor.fromFeatureSetReaderCIM(b))if(e=H.CIMMarkerPlacementHelper.getPlacement(e,-1,this.evaluatedMeshParams.placement,h.pt2px(1),a.id,J.getGeometryEngine())){b=b.getDisplayId();for(var d=e.next();null!=d;){const f=d.tx,n=-d.ty;d=-d.getAngle();this._writeGlyphs(a,b,
f,n,c,d);d=e.next()}}}_getShaping(a){const b=this._textMeshTransformProps,c=this.evaluatedMeshParams;if(!c.glyphs?.glyphs.length)return null;const e=Math.round(h.pt2px(b.fontSize)),d=h.pt2px(b.offsetX),f=h.pt2px(b.offsetY),n=z.clamp(h.pt2px(c.lineWidth),v.minTextLineWidth,v.maxTextLineWidth),t=v.magicLabelLineHeight*z.clamp(c.lineHeightRatio,.25,4);return I.shapeGlyphs(c.glyphs,{scale:e/v.glyphSize,angle:b.postAngle,xOffset:d,yOffset:f,horizontalAlignment:c.horizontalAlignment,verticalAlignment:a||
c.verticalAlignment,maxLineWidth:n,lineHeight:t,decoration:c.decoration,borderLineSizePx:h.pt2px(c.boxBorderLineSize),hasBackground:!!c.boxBackgroundColor,useCIMAngleBehavior:c.useCIMAngleBehavior})}_writeGlyphs(a,b,c,e,d,f,n,t){const u=this.evaluatedMeshParams;var g=this._textMeshTransformProps;const q=g.fontSize;var x=h.pt2px(g.offsetX),y=h.pt2px(g.offsetY);const [S,T]=k.getMinMaxZoom(u.scaleInfo,this.getTileInfo());0!==f&&d.setRotation(f);g=d.bounds;x=c+g.x+x;y=e+g.y-y;g=2*Math.max(g.width,g.height)*
(u.minPixelBuffer?u.minPixelBuffer/q:1);d.textBox&&(a.recordStart(this.instanceId,this.attributeLayout,d.glyphs[0].textureBinding),a.recordBounds(x,y,g,g),this._writeTextBox(a,b,c,e,d.textBox,n,t),a.recordEnd());for(const F of d.glyphs){a.recordStart(this.instanceId,this.attributeLayout,F.textureBinding);a.recordBounds(x,y,g,g);const {texcoords:U,offsets:V}=F;this._writeQuad(a,b,c,e,{texcoords:U,offsets:V,fontSize:q,color:k.processColorInput(u.color),isBackground:!1,referenceBounds:n,minZoom:S,maxZoom:T,
...t});a.recordEnd()}0!==f&&d.setRotation(-f)}_writeTextBox(a,b,c,e,d,f,n){const t=this.evaluatedMeshParams,{fontSize:u}=this._textMeshTransformProps,{boxBackgroundColor:g,boxBorderLineColor:q}=t;f={isBackground:!0,fontSize:u,referenceBounds:f,...n};g&&(this._writeQuad(a,b,c,e,{texcoords:M,offsets:d.main,color:k.processColorInput(g),...f}),q||(this._writeQuad(a,b,c,e,{texcoords:N,offsets:d.top,color:k.processColorInput(g),...f}),this._writeQuad(a,b,c,e,{texcoords:O,offsets:d.bot,color:k.processColorInput(g),
...f}),this._writeQuad(a,b,c,e,{texcoords:P,offsets:d.left,color:k.processColorInput(g),...f}),this._writeQuad(a,b,c,e,{texcoords:Q,offsets:d.right,color:k.processColorInput(g),...f})));q&&(this._writeQuad(a,b,c,e,{texcoords:C,offsets:d.top,color:k.processColorInput(q),...f}),this._writeQuad(a,b,c,e,{texcoords:C,offsets:d.bot,color:k.processColorInput(q),...f}),this._writeQuad(a,b,c,e,{texcoords:D,offsets:d.left,color:k.processColorInput(q),...f}),this._writeQuad(a,b,c,e,{texcoords:D,offsets:d.right,
color:k.processColorInput(q),...f}))}_writeQuad(a,b,c,e,d){const f=a.vertexCount();this._writeVertex(a,b,c,e,d);a.indexWrite(f+0);a.indexWrite(f+1);a.indexWrite(f+2);a.indexWrite(f+1);a.indexWrite(f+3);a.indexWrite(f+2)}}w.TextMeshWriter=R;w.TextVertexSpec=E;w.maxLabelZoom=28;Object.defineProperty(w,Symbol.toStringTag,{value:"Module"})});