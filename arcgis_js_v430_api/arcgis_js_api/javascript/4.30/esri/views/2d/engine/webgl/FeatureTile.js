// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("exports ../../../../core/has ../../../../core/Logger ../../../../core/libs/gl-matrix-2/factories/mat2df32 ./AFeatureTile ./definitions ./DisplayEntity ./enums ./FeatureDisplayList ./ReshufflePlan ./collisions/LabelMetric ./cpuMapped/MappedMesh ./mesh/meshDebugUtils ./util/Reader ./util/serializationUtils".split(" "),function(q,g,t,u,v,h,m,w,x,y,z,A,r,n,p){let B=0;class C extends v.AFeatureTile{constructor(a,b,c,d,e=!1){super(a,b,c,d);this._meshes=new Map;this._entities=[];this._nextUploadAllowed=
this._invalidated=!1;this.tileAge=B++;this._metrics=[];this._entityIds=new Set;this._entityIdsFromBuffer=new Set;this._attributeEpoch=0;this._encounteredEnd=!1;this.visible=!0;this.transforms.labelMat2d=u.create();this.enableDeferredUploads=e}destroy(){super.destroy();this.clear()}clear(){for(const a of this._meshes.values())a.destroy();this._meshes.clear();this._entities=[];this._metrics=[];this._displayList=null;this._invalidated=!0;this._entityIds.clear();this._nextUploadAllowed=!0}beforeRender(a){super.beforeRender(a);
this._needsReshuffle&&a.reshuffleManager.schedule(this)}tryReady(a){const b=this._invalidated&&!this._uploadAllowed;return!this._isReady&&!b&&this._encounteredEnd&&a>=this._attributeEpoch?(g("esri-2d-update-debug")&&console.debug(`Tile[${this.key.id}] FeatureTile.ready [epoch=${a}]`),this.ready(),this.requestRender(),!0):!1}get labelMetrics(){return this._metrics}get hasData(){return!!this._meshes.size}get needsUpload(){return this._invalidated}get _uploadAllowed(){return!this.enableDeferredUploads||
this._nextUploadAllowed}upload(){this._nextUploadAllowed=!0}getDisplayList(a,b){if(this._uploadAllowed&&this._invalidated){this._entities.sort((c,d)=>{const e=d.sortKey,f=c.sortKey;return f===e?c.id-d.id:f-e});b===w.FeatureBatchingStrategy.BATCHING&&this.reshuffle(!0);this._displayList=x.DisplayList.fromDisplayEntities(this._entities,this,a,b);for(const c of this._meshes.values())c.upload();this.debugInfo.display.length=this._displayList.length;this.debugInfo.display.minOrderedLength=this._displayList.minOrderedLength;
this.debugInfo.display.minUnorderedLength=this._displayList.minUnorderedLength;this.requestRender();this._nextUploadAllowed=this._invalidated=!1}return this._displayList}getMesh(a){if(!this._meshes.has(a))throw Error(`InternalError: Unable to find VAO for instance: ${a}`);return this._meshes.get(a)}getSortKeys(a){const b=new Map;for(const {id:c,sortKey:d}of this._entities)if(a.has(c)&&b.set(c,d),b.size===a.size)break;return b}onMessage(a){switch(a.type){case "append":this._onAppendMessage(a);break;
case "update":this._onUpdateMessage(a)}this._aggregateMemoryStats();this.requestRender();if(a.end){g("esri-2d-update-debug")&&console.debug(`Tile[${this.key.id}] FeatureTile.end [epoch=${a.attributeEpoch}]`);if(!a.attributeEpoch)throw Error("InternalError: Attribute epoch not defined.");this._attributeEpoch=a.attributeEpoch;this._encounteredEnd=!0}}_onAppendMessage(a){g("esri-2d-update-debug")&&console.debug(`Tile[${this.key.id}] FeatureTile.append`,{append:r.debugMeshDataInfo(a?.append)});a.clear&&
this.clear();if(a.append){var b=p.deserializeList(new n(a.append.entities),m);this._insert(b,a.append.data,!1)}}_onUpdateMessage(a){g("esri-2d-update-debug")&&console.debug(`Tile[${this.key.id}] FeatureTile.update`,{isPixelBuffer:a.isPixelBuffer,modify:r.debugMeshDataInfo(a.modify),remove:a.remove});const b=p.deserializeList(new n(a.modify.entities),m);var c=b.map(e=>e.id);const d=a.isPixelBuffer??!1;c=[...a.remove,...c];d?this._removeByIdsFromBuffer(c):this._removeByIds(c);this._insert(b,a.modify.data,
d)}reshuffle(a=!1){if(!this.destroyed){var b=new Map;for(const c of this._entities)for(const d of c.records){const e=this._meshes.get(d.instanceId);let f=b.get(e);f||(f=new y.ReshufflePlan(a),b.set(e,f));f.copyRecord(d)}for(const [c,d]of b)c.reshuffle(d);this._invalidated=!0;this._aggregateMemoryStats();g("esri-2d-update-debug")&&t.getLogger("esri.views.2d.engine.webgl.FeatureTile").info(`Tile ${this.key.id} was reshuffled.`)}}copyPixelBufferedEntitesFrom(a,b,c,d){c*=h.tileSize;d*=h.tileSize;for(const f of a._entities){let k=
null;for(const l of f.records)if(l.overlaps&b){var e=a.getMesh(l.instanceId);e=this._ensureMesh(l.instanceId,e.layout).copyRecordFrom(e,l,c,d);k||(k=new m(f.id,f.sortKey),this._entityIdsFromBuffer.add(f.id),this._entities.push(k));k.records.push(e)}}this._invalidated=!0}_ensureMesh(a,b){this._meshes.has(a)||this._meshes.set(a,new A.MappedMesh(this._stage.bufferPool,b));return this._meshes.get(a)}_insert(a,b,c){if(a.length){this._removeDuplicatedBufferedEntites(a);b=this._insertVertexData(b);for(const d of a){for(const e of d.records)e.updateBaseOffsets(b.get(e.instanceId));
c?this._tryInsertBufferedEntity(d):this._insertEntity(d)}this._invalidated=!0}}_insertVertexData(a){const b=new Map;for(const c of a){const {instanceId:d,layout:e}=c;a=this._ensureMesh(d,e).append(c);if(c.metrics){const f=p.deserializeList(new n(c.metrics),z.LabelMetric)??[];this._metrics.push(...f)}b.set(d,a)}return b}_insertEntity(a){g("esri-2d-update-debug")&&this._entityIds.has(a.id)&&console.error(`Tile ${this.key.id} insertEnitty: Already have entityId ${a.id}`);this._entityIds.add(a.id);this._entities.push(a)}_tryInsertBufferedEntity(a){this._entityIds.has(a.id)?
this._removeRecordsFromMesh(a.records):(this._entityIdsFromBuffer.add(a.id),this._entities.push(a))}_removeDuplicatedBufferedEntites(a){if(this._entityIdsFromBuffer.size){var b=[];for(const c of a)this._entityIdsFromBuffer.has(c.id)&&b.push(c.id);this._removeByIds(b)}}_removeByIdsFromBuffer(a){this._removeByIds(a.filter(b=>this._entityIdsFromBuffer.has(b)))}_removeByIds(a){if(0!==a.length){a=new Set(a);var b=[];for(const c of this._entities)a.has(c.id)?this._remove(c):b.push(c);this._entities=b;this._invalidated=
!0}}_remove(a){this._removeRecordsFromMesh(a.records);this._entityIds.delete(a.id);this._entityIdsFromBuffer.delete(a.id)}_removeRecordsFromMesh(a){for(const b of a){const {instanceId:c,indexStart:d,indexCount:e,vertexStart:f,vertexCount:k}=b;this._meshes.get(c)?.remove(d,e,f,k)}}_aggregateMemoryStats(){this.debugInfo.memory.bytesUsed=0;this.debugInfo.memory.bytesReserved=0;for(const [,a]of this._meshes)this.debugInfo.memory.bytesUsed+=a.memoryStats.bytesUsed,this.debugInfo.memory.bytesReserved+=
a.memoryStats.bytesReserved}get _needsReshuffle(){if(this.destroyed)return!1;const {bytesUsed:a,bytesReserved:b}=this.debugInfo.memory,{minOrderedLength:c,length:d}=this.debugInfo.display;return b>h.RESHUFFLING_EXEMPT_MEMORY_BYTES&&a/b<h.RESHUFFLING_TARGET_MEMORY_EFFICIENCY||d>h.RESHUFFLING_EXEMPT_DRAW_CALLS&&c/d<h.RESHUFFLING_TARGET_DRAW_EFFICIENCY?!0:!1}}q.FeatureTile=C;Object.defineProperty(q,Symbol.toStringTag,{value:"Module"})});