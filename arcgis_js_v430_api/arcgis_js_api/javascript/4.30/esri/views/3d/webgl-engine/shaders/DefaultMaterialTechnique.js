// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("require exports ../../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../../core/libs/gl-matrix-2/factories/vec4f64 ../../../ViewingMode ../core/shaderLibrary/ShaderOutput ../core/shaderLibrary/attributes/NormalAttribute.glsl ../core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl ../core/shaderLibrary/attributes/VertexNormal.glsl ../core/shaderLibrary/util/AlphaCutoff ../core/shaderTechnique/ReloadableShaderModule ../core/shaderTechnique/ShaderTechnique ../lib/basicInterfaces ../lib/DefaultVertexAttributeLocations ../lib/Material ../lib/OrderIndependentTransparency ../lib/Program ../lib/StencilUtils ../lib/TransparencyPassType ../materials/pbrUtils ../../../../chunks/DefaultMaterial.glsl ../../../webgl/enums ../../../webgl/renderState".split(" "),
function(v,h,d,w,x,p,y,q,r,z,A,B,e,C,D,f,E,k,t,F,G,l,g){class H extends r.VertexNormalPassParameters{constructor(){super(...arguments);this.usePBR=this.isSchematic=!1;this.mrrFactors=d.fromArray(F.defaultAdvancedMRRFactors);this.doubleSided=this.hasSymbolColors=this.hasVertexColors=!1;this.doubleSidedType="normal";this.cullFace=e.CullFaceOptions.Back;this.hasInstancedColor=this.isInstanced=!1;this.emissiveFactor=d.fromValues(0,0,0);this.instancedDoublePrecision=!1;this.normalType=y.NormalType.Attribute;
this.castShadows=this.receiveAmbientOcclusion=this.receiveShadows=!0;this.shadowMappingEnabled=!1;this.ambient=d.fromValues(.2,.2,.2);this.diffuse=d.fromValues(.8,.8,.8);this.externalColor=w.fromValues(1,1,1,1);this.colorMixMode="multiply";this.layerOpacity=this.opacity=1;this.origin=d.create();this.hasSlicePlane=!1;this.hasSliceHighlight=!0;this.offsetTransparentBackfaces=!1;this.modelTransformation=this.vvSymbolRotationMatrix=this.vvSymbolAnchor=this.vvOpacity=this.vvColor=this.vvSize=null;this.transparent=
!1;this.writeDepth=!0;this.customDepthTest=e.DepthTestFunction.Less;this.textureAlphaMode=e.AlphaDiscardMode.Blend;this.textureAlphaCutoff=z.defaultMaskAlphaCutoff;this.hasOccludees=this.textureAlphaPremultiplied=!1;this.renderOccluded=D.RenderOccludedFlag.Occlude;this.isDecoration=!1}}class I extends r.VertexNormalDrawParameters{constructor(){super(...arguments);this.slicePlaneLocalOrigin=this.origin=d.create()}}class m extends B.ShaderTechnique{initializeConfiguration(a,b){b.spherical=a.viewingMode===
x.ViewingMode.Global;b.doublePrecisionRequiresObfuscation=a.rctx.driverTest.doublePrecisionRequiresObfuscation.result;b.textureCoordinateType=b.hasColorTexture||b.hasMetallicRoughnessTexture||b.hasEmissionTexture||b.hasOcclusionTexture||b.hasNormalTexture?q.TextureCoordinateAttributeType.Default:q.TextureCoordinateAttributeType.None;b.objectAndLayerIdColorInstanced=b.instanced}initializeProgram(a){return this._initializeProgram(a,m.shader)}_initializeProgram(a,b){return new E.Program(a.rctx,b.get().build(this.configuration),
C.Default3D)}_makePipeline(a,b){const c=this.configuration,n=a===t.TransparencyPassType.NONE,u=a===t.TransparencyPassType.FrontFace;var J=g.makePipelineState,K=c.output===p.ShaderOutput.Color&&c.transparent?n?f.blendingDefault:f.oitBlending(a):null;var L=c.cullFace!==e.CullFaceOptions.None?!0:c.hasSlicePlane?!1:!c.transparent&&!c.doubleSidedMode;return J.call(g,{blending:K,culling:L?g.cullingParams(c.cullFace):null,depthTest:{func:f.oitDepthTest(a,c.customDepthTest===e.DepthTestFunction.Lequal?l.CompareFunction.LEQUAL:
l.CompareFunction.LESS)},depthWrite:n||u?c.writeDepth?g.defaultDepthWriteParams:null:null,drawBuffers:c.output===p.ShaderOutput.Depth?{buffers:[l.SpecialDrawBuffers.NONE]}:f.oitDrawBuffers(a),colorWrite:g.defaultColorWriteParams,stencilWrite:c.hasOccludees?k.stencilWriteMaskOn:null,stencilTest:c.hasOccludees?b?k.stencilToolMaskBaseParams:k.stencilBaseAllZerosParams:null,polygonOffset:n||u?null:f.getOITPolygonOffset(c.enableOffset)})}initializePipeline(){this._occludeePipelineState=this._makePipeline(this.configuration.transparencyPassType,
!0);return this._makePipeline(this.configuration.transparencyPassType,!1)}getPipeline(a){return a?this._occludeePipelineState:super.getPipeline()}}m.shader=new A.ReloadableShaderModule(G.DefaultMaterial,()=>new Promise((a,b)=>v(["./DefaultMaterial.glsl"],a,b)));h.DefaultMaterialDrawParameters=I;h.DefaultMaterialPassParameters=H;h.DefaultMaterialTechnique=m;Object.defineProperty(h,Symbol.toStringTag,{value:"Module"})});