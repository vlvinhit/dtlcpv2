// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/tslib.es6 ../../../../../core/has ../../../../../core/maybe ../../../../../core/accessorSupport/decorators/property ../../../../../core/Logger ../../../../../core/RandomLCG ../../../../../core/accessorSupport/decorators/subclass ../../../../../chunks/vec32 ../../../../../geometry/support/clipRay ../../../../../geometry/support/frustum ../../../../../geometry/support/lineSegment ../../../../../geometry/support/ray ../../../../ViewingMode ../RenderPlugin ./LaserlinePathData ./LaserlinePathTechnique ./LaserlinePathTechniqueConfiguration ./LaserlineTechnique ./LaserlineTechniqueConfiguration ../../lib/RenderSlot ../../materials/internal/MaterialUtil".split(" "),
function(b,d,B,k,g,C,D,t,e,h,u,m,v,w,n,p,x,y,q,z,r,A){b.LaserLineRenderer=class extends n.SyncPrepareRenderPlugin{constructor(a){super(a);this._technique=null;this._pathVerticalPlaneEnabled=this._intersectsLineInfinite=this._intersectsLineEnabled=this._lineVerticalPlaneEnabled=this._pointDistanceEnabled=this._heightManifoldEnabled=!1;this._pathTechnique=this._pathVerticalPlaneData=null;this._passParameters=new q.LaserlinePassParameters;this.produces=new Map([[r.RenderSlot.LASERLINES,()=>!this.contrastControlEnabled],
[r.RenderSlot.LASERLINES_CONTRAST_CONTROL,()=>this.contrastControlEnabled]])}initialize(){this._passParameters.renderCoordsHelper=this.renderCoordsHelper}consumes(){return n.ConsumesDepth}get isDecoration(){return this._isDecoration}get heightManifoldEnabled(){return this._heightManifoldEnabled}set heightManifoldEnabled(a){this._heightManifoldEnabled!==a&&(this._heightManifoldEnabled=a,this._requestRender())}get heightManifoldTarget(){return this._passParameters.heightManifoldTarget}set heightManifoldTarget(a){e.copy(this._passParameters.heightManifoldTarget,
a);this._requestRender()}get pointDistanceEnabled(){return this._pointDistanceEnabled}set pointDistanceEnabled(a){a!==this._pointDistanceEnabled&&(this._pointDistanceEnabled=a,this._requestRender())}get pointDistanceTarget(){return this._passParameters.pointDistanceTarget}set pointDistanceTarget(a){e.copy(this._passParameters.pointDistanceTarget,a);this._requestRender()}get pointDistanceOrigin(){return this._passParameters.pointDistanceOrigin}set pointDistanceOrigin(a){e.copy(this._passParameters.pointDistanceOrigin,
a);this._requestRender()}get lineVerticalPlaneEnabled(){return this._lineVerticalPlaneEnabled}set lineVerticalPlaneEnabled(a){a!==this._lineVerticalPlaneEnabled&&(this._lineVerticalPlaneEnabled=a,this._requestRender())}get lineVerticalPlaneSegment(){return this._passParameters.lineVerticalPlaneSegment}set lineVerticalPlaneSegment(a){m.copy(a,this._passParameters.lineVerticalPlaneSegment);this._requestRender()}get intersectsLineEnabled(){return this._intersectsLineEnabled}set intersectsLineEnabled(a){a!==
this._intersectsLineEnabled&&(this._intersectsLineEnabled=a,this._requestRender())}get intersectsLineSegment(){return this._passParameters.intersectsLineSegment}set intersectsLineSegment(a){m.copy(a,this._passParameters.intersectsLineSegment);this._requestRender()}get intersectsLineRadius(){return this._passParameters.intersectsLineRadius}set intersectsLineRadius(a){a!==this._passParameters.intersectsLineRadius&&(this._passParameters.intersectsLineRadius=a,this._requestRender())}get intersectsLineInfinite(){return this._intersectsLineInfinite}set intersectsLineInfinite(a){a!==
this._intersectsLineInfinite&&(this._intersectsLineInfinite=a,this._requestRender())}get pathVerticalPlaneEnabled(){return this._pathVerticalPlaneEnabled}set pathVerticalPlaneEnabled(a){a!==this._pathVerticalPlaneEnabled&&(this._pathVerticalPlaneEnabled=a,null!=this._pathVerticalPlaneData&&this._requestRender())}set pathVerticalPlaneVertices(a){null==this._pathVerticalPlaneData&&(this._pathVerticalPlaneData=new p.LaserlinePathData(this._passParameters.renderCoordsHelper));this._pathVerticalPlaneData.vertices=
a;this.pathVerticalPlaneEnabled&&this._requestRender()}set pathVerticalPlaneBuffers(a){null==this._pathVerticalPlaneData&&(this._pathVerticalPlaneData=new p.LaserlinePathData(this._passParameters.renderCoordsHelper));this._pathVerticalPlaneData.buffers=a;this.pathVerticalPlaneEnabled&&this._requestRender()}setParameters(a){A.updateParameters(this._passParameters,a)&&this._requestRender()}initializeRenderContext(a){this._context=a;this._techniques=a.techniques;this._techniqueConfig=new z.LaserlineTechniqueConfiguration;
a=new y.LaserlinePathTechniqueConfiguration;a.contrastControlEnabled=this.contrastControlEnabled;this._pathTechnique=this._techniques.acquire(x.LaserlinePathTechnique,a)}uninitializeRenderContext(){this._technique=k.releaseMaybe(this._technique);this._pathVerticalPlaneData=k.disposeMaybe(this._pathVerticalPlaneData);this._pathTechnique=k.releaseMaybe(this._pathTechnique)}prepareTechnique(){return this.heightManifoldEnabled||this.pointDistanceEnabled||this.lineVerticalPlaneSegment||this.intersectsLineEnabled?
(this._techniqueConfig.heightManifoldEnabled=this.heightManifoldEnabled,this._techniqueConfig.lineVerticalPlaneEnabled=this.lineVerticalPlaneEnabled,this._techniqueConfig.pointDistanceEnabled=this.pointDistanceEnabled,this._techniqueConfig.intersectsLineEnabled=this.intersectsLineEnabled,this._techniqueConfig.contrastControlEnabled=this.contrastControlEnabled,this._techniqueConfig.spherical=this.viewingMode===w.ViewingMode.Global,this._technique=this._techniques.releaseAndAcquire(q.LaserlineTechnique,
this._techniqueConfig,this._technique)):this._pathTechnique}renderNode(a,l,c){if(c=c?.get("normals")?.getTexture())this._passParameters.normals=c,(this.heightManifoldEnabled||this.pointDistanceEnabled||this.lineVerticalPlaneSegment||this.intersectsLineEnabled)&&this._renderUnified(a,l),this.pathVerticalPlaneEnabled&&this._renderPath(a)}_renderUnified(a,l){const c=a.rctx;this._updatePassParameters(a);c.bindTechnique(l,a.bindParameters,this._passParameters);c.screen.draw()}_renderPath(a){null!=this._pathVerticalPlaneData&&
null!=this._pathTechnique&&(a.rctx.bindTechnique(this._pathTechnique,a.bindParameters,{...this._passParameters,origin:this._pathVerticalPlaneData.origin}),this._pathVerticalPlaneData.draw(a.rctx))}_updatePassParameters(a){this._intersectsLineEnabled&&(a=a.bindParameters.camera,this._intersectsLineInfinite?(h.fromRay(v.wrap(this._passParameters.intersectsLineSegment.origin,this._passParameters.intersectsLineSegment.vector),f),f.c0=-Number.MAX_VALUE,u.intersectClipRay(a.frustum,f)&&(h.getStart(f,this._passParameters.lineStartWorld),
h.getEnd(f,this._passParameters.lineEndWorld))):(e.copy(this._passParameters.lineStartWorld,this._passParameters.intersectsLineSegment.origin),e.add(this._passParameters.lineEndWorld,this._passParameters.intersectsLineSegment.origin,this._passParameters.intersectsLineSegment.vector)))}_requestRender(){this._context&&this._context.requestRender()}get test(){}};d.__decorate([g.property({constructOnly:!0})],b.LaserLineRenderer.prototype,"viewingMode",void 0);d.__decorate([g.property({constructOnly:!0})],
b.LaserLineRenderer.prototype,"contrastControlEnabled",void 0);d.__decorate([g.property({constructOnly:!0})],b.LaserLineRenderer.prototype,"_isDecoration",void 0);d.__decorate([g.property({constructOnly:!0})],b.LaserLineRenderer.prototype,"renderCoordsHelper",void 0);b.LaserLineRenderer=d.__decorate([t.subclass("esri.views.3d.webgl-engine.effects.laserlines.LaserLineRenderer")],b.LaserLineRenderer);const f=h.create();Object.defineProperty(b,Symbol.toStringTag,{value:"Module"})});