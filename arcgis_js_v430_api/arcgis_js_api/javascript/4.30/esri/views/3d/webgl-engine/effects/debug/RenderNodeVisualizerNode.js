// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/tslib.es6 ../../../../../core/accessorSupport/decorators/property ../../../../../core/has ../../../../../core/Logger ../../../../../core/RandomLCG ../../../../../core/accessorSupport/decorators/subclass ../../../../../core/libs/gl-matrix-2/factories/vec4f64 ../../../webgl/formats ../../../webgl/RenderNode ../../lib/DefaultVertexAttributeLocations ../../../../webgl/enums".split(" "),function(g,l,p,x,y,z,r,t,u,v,w,e){g.RenderNodeVisualizerNode=class extends v{constructor(a){super(a);
this.destroyedCB=null;this.produces="composite-color";this.consumes={required:["composite-color"]};this.clearColor=t.ZEROS;this._focusedFBO=null;this._program=[]}destroy(){this._program.forEach(a=>a.dispose());this._program.length=0;this.destroyedCB()}render(a){a=a.find(({name:h})=>"composite-color"===h);if(!this._focusedFBO)return a;const b=this.renderingContext;b.bindFramebuffer(a.fbo);b.setClearColor(0,0,0,0);b.clear(e.ClearBufferBit.COLOR_BUFFER_BIT);const c=this._ensureShader(b,!1);b.useProgram(c);
b.bindTexture(this._focusedFBO.getTexture(),0);c.setUniform1i("colorTex",0);c.setUniform1i("inputType",0);b.screen.draw();return a}getReplacingFBO(a,b,c,h,f){b===g.FocusState.ON&&(h=a.width,f=a.height);const d=this.renderingContext;var k=a.depthStencilTexture;const m=this._ensureShader(d,null!=k),n=this.fboCache.acquire(h,f,"fbo visualizer"),q=!a.colorTexture?.descriptor.hasMipmap;q&&a.colorTexture?.generateMipmap();d.useProgram(m);d.unbindTexture(n.fbo?.colorTexture);d.bindFramebuffer(n.fbo);k&&
(d.bindTexture(k,1),m.setUniform1i("depthTex",1),n.acquireColor(e.ColorAttachment.COLOR_ATTACHMENT1,u.ColorFormat.RGBA),d.gl.drawBuffers([e.ColorAttachment.COLOR_ATTACHMENT0,e.ColorAttachment.COLOR_ATTACHMENT1]));k=d.getViewport();d.setViewport(0,0,h,f);d.setClearColor(0,0,0,0);d.clear(e.ClearBufferBit.COLOR_BUFFER_BIT);d.setBlendingEnabled(!0);d.setBlendFunction(e.BlendFactor.ONE,e.BlendFactor.ONE_MINUS_SRC_ALPHA);d.bindTexture(a.colorTexture,0);m.setUniform1i("colorTex",0);c="linear-depth"===c||
c.includes("shadow");h=a.colorTexture?.descriptor.internalFormat;m.setUniform1i("inputType",c?3:h===e.SizedPixelFormat.R16F||h===e.SizedPixelFormat.R32F||h===e.SizedPixelFormat.R8?1:h===e.SizedPixelFormat.RG8?2:h===e.SizedPixelFormat.RGBA16F?4:0);c&&m.setUniform2fv("nearFar",this.camera.nearFar);d.screen.draw();d.gl.drawBuffers([e.ColorAttachment.COLOR_ATTACHMENT0]);d.bindFramebuffer(null);d.setViewport(k.x,k.y,k.width,k.height);b===g.FocusState.ON&&(this._focusedFBO=n);q&&a.colorTexture?.clearMipmap();
return n}clearFocusedFBO(){this._focusedFBO=null}getPreviewContent(a,b,c,h){if(!c)return null;const f=this.renderingContext,d=this.fboCache.acquire(a,b,"fbo visualizer");f.bindFramebuffer(d?.fbo);f.setClearColor(this.clearColor[0],this.clearColor[1],this.clearColor[2],this.clearColor[3]);f.clear(e.ClearBufferBit.COLOR_BUFFER_BIT);f.setBlendingEnabled(!0);f.setBlendFunction(e.BlendFactor.ONE,e.BlendFactor.ONE_MINUS_SRC_ALPHA);f.setViewport(0,0,a,b);const k=this._ensureShader(f,!1);f.useProgram(k);
f.bindTexture(c.getColorTexture(h),0);k.setUniform1i("colorTex",0);k.setUniform1i("inputType",0);f.screen.draw();c=new ImageData(new Uint8ClampedArray(a*b*4),a,b);f.gl.readPixels(0,0,a,b,e.PixelFormat.RGBA,e.DataType.UNSIGNED_BYTE,new Uint8Array(c.data.buffer));f.bindFramebuffer(null);d?.release();return c}_ensureShader(a,b){const c=b?1:0;if(this._program[c])return this._program[c];this._program[c]=a.programCache.acquire("#version 300 es\n      in vec2 position;\n      out vec2 uv;\n\n      void main() {\n        gl_Position \x3d vec4(position, 0.0, 1.0);\n        uv \x3d position * 0.5 + vec2(0.5);\n      }",
`#version 300 es\n      precision highp float;\n\n      in vec2 uv;\n      uniform sampler2D colorTex;\n      layout(location = 0) out vec4 fragColor;\n      ${b?"\n            layout(location \x3d 1) out vec4 fragDepth;\n            uniform sampler2D depthTex;\n          ":""}\n      uniform int inputType;\n      uniform vec2 nearFar;\n\n      // Factors to convert rgba back to float\n      const vec4 RGBA_2_FLOAT_FACTORS = vec4(\n        255.0 / (256.0),\n        255.0 / (256.0 * 256.0),\n        255.0 / (256.0 * 256.0 * 256.0),\n        255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n      );\n\n\n      float rgba2float(vec4 rgba) {\n        // Convert components from 0->1 back to 0->255 and then add the components together with their corresponding\n        // fixed point factors, i.e. (256^1, 256^2, 256^3, 256^4)\n        return dot(rgba, RGBA_2_FLOAT_FACTORS);\n      }\n\n      float linearDepthFromFloat(float depth) {\n        depth = pow(depth, 0.2);\n        return -(depth * (nearFar[1] - nearFar[0]) + nearFar[0]);\n      }\n\n      float linearDepthFromRGBA(vec4 depth) {\n        return linearDepthFromFloat(rgba2float(depth));\n      }\n\n      float linearDepthFromTexture(sampler2D depthTex, vec2 uv) {\n        ivec2 iuv = ivec2(uv * vec2(textureSize(depthTex, 0)));\n        return linearDepthFromRGBA(texelFetch(depthTex, iuv, 0));\n      }\n\n      void main() {\n        vec4 color;\n        if(inputType == 1) {\n          color = vec4(vec3(texture(colorTex, uv).r), 1.0);\n        } else if(inputType == 2) {\n          color = vec4(texture(colorTex, uv).rg, 0.0, 1.0);\n        } else if(inputType == 3) {\n          float depth = 1.0 - (-linearDepthFromTexture(colorTex, uv) / (nearFar[1] - nearFar[0]));\n          color = vec4(vec3(depth), depth >= 0.999 ? 0.0 : 1.0);\n        } else if(inputType == 4) {\n          color = texture(colorTex, uv);\n          color = vec4(color.rgb / color.a, color.a);\n        } else {\n          color = texture(colorTex, uv);\n        }\n\n\n        if(color.a < 0.000001)\n          discard;\n        else {\n          fragColor = color;\n          ${b?
"\n                float depth \x3d 1.0 - pow(texture(depthTex, uv).r, 10.0);\n                fragDepth \x3d vec4(vec3(depth), depth \x3c 0.000001 ? 0.0 : 1.0);\n                ":""}\n        }\n      }`,w.Default3D);return this._program[c]}};l.__decorate([p.property()],g.RenderNodeVisualizerNode.prototype,"destroyedCB",void 0);l.__decorate([p.property()],g.RenderNodeVisualizerNode.prototype,"produces",void 0);l.__decorate([p.property()],g.RenderNodeVisualizerNode.prototype,"consumes",void 0);l.__decorate([p.property()],
g.RenderNodeVisualizerNode.prototype,"clearColor",void 0);g.RenderNodeVisualizerNode=l.__decorate([r.subclass("esri.views.3d.webgl-engine.effects.debug.RenderNodeVisualizerNode")],g.RenderNodeVisualizerNode);g.FocusState=void 0;(function(a){a[a.ON=0]="ON";a[a.OFF=1]="OFF"})(g.FocusState||(g.FocusState={}));Object.defineProperty(g,Symbol.toStringTag,{value:"Module"})});