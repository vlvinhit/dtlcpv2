// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("require exports ../../../../chunks/tslib.es6 ../core/shaderLibrary/ShaderOutput ../core/shaderTechnique/ReloadableShaderModule ../core/shaderTechnique/ShaderTechnique ../core/shaderTechnique/ShaderTechniqueConfiguration ../lib/basicInterfaces ../lib/OrderIndependentTransparency ../lib/Program ../lib/TransparencyPassType ../lib/VertexAttribute ../materials/DefaultTechniqueConfiguration ../../../../chunks/ShadedColorMaterial.glsl ../../../webgl/enums ../../../webgl/renderState".split(" "),function(v,
g,b,l,w,x,c,r,f,y,h,m,z,A,n,k){class p extends x.ShaderTechnique{initializeProgram(d){return new y.Program(d.rctx,p.shader.get().build(this.configuration),t)}_setPipelineState(d){const e=this.configuration,q=d===h.TransparencyPassType.NONE,u=d===h.TransparencyPassType.FrontFace;return k.makePipelineState({blending:e.output===l.ShaderOutput.Color&&e.transparent?q?f.blendingDefault:f.oitBlending(d):null,culling:k.cullingParams(e.cullFace),depthTest:{func:u?n.CompareFunction.LESS:e.shadingEnabled?n.CompareFunction.LEQUAL:
n.CompareFunction.LESS},depthWrite:q?e.writeDepth?k.defaultDepthWriteParams:null:f.oitDepthWrite(d),drawBuffers:f.oitDrawBuffers(d),colorWrite:k.defaultColorWriteParams,polygonOffset:q||u?null:f.OITPolygonOffset})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}p.shader=new w.ReloadableShaderModule(A.ShadedColorMaterialShader,()=>new Promise((d,e)=>v(["./ShadedColorMaterial.glsl"],d,e)));class a extends z.DefaultTechniqueConfiguration{constructor(){super(...arguments);
this.output=l.ShaderOutput.Color;this.cullFace=r.CullFaceOptions.None;this.transparencyPassType=h.TransparencyPassType.NONE;this.transparent=this.hasSlicePlane=!1;this.shadingEnabled=this.screenSizeEnabled=this.writeDepth=!0;this.cullAboveGround=this.multipassEnabled=!1}}b.__decorate([c.parameter({count:l.ShaderOutput.COUNT})],a.prototype,"output",void 0);b.__decorate([c.parameter({count:r.CullFaceOptions.COUNT})],a.prototype,"cullFace",void 0);b.__decorate([c.parameter({count:h.TransparencyPassType.COUNT})],
a.prototype,"transparencyPassType",void 0);b.__decorate([c.parameter()],a.prototype,"hasSlicePlane",void 0);b.__decorate([c.parameter()],a.prototype,"transparent",void 0);b.__decorate([c.parameter()],a.prototype,"writeDepth",void 0);b.__decorate([c.parameter()],a.prototype,"screenSizeEnabled",void 0);b.__decorate([c.parameter()],a.prototype,"shadingEnabled",void 0);b.__decorate([c.parameter()],a.prototype,"multipassEnabled",void 0);b.__decorate([c.parameter()],a.prototype,"cullAboveGround",void 0);
b.__decorate([c.parameter({constValue:!1})],a.prototype,"occlusionPass",void 0);const t=new Map([[m.VertexAttribute.POSITION,0],[m.VertexAttribute.NORMAL,1],[m.VertexAttribute.OFFSET,2]]);g.ShadedColorMaterialTechnique=p;g.ShadedColorMaterialTechniqueConfiguration=a;g.vertexAttributeLocations=t;Object.defineProperty(g,Symbol.toStringTag,{value:"Module"})});