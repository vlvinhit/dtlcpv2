// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/vec32 ../../../../../core/libs/gl-matrix-2/factories/vec3f64 ./ElevationAgnosticBVH ../../lib/RayIntersections ../../lib/triangleIntersectionUtils".split(" "),function(k,m,n,y,p,q){function r(a,b,c,f,d,e,g,h,l,t,u,v=null,w=0){0!==h?p.intersectRayTrianglesWithVerticalOffsetENUGlobal(a,b,c,f,d,e,g,h,l,t,u,v,w):p.intersectRayTriangles(a,b,c,f,d,e,g,t,u,v,w)}function x(){}class z{constructor(a,b,c,f,d,e,g,h,l){this.componentIndex=a;this.vertexData=b;this.vertexStride=
c;this.indexData=f;this.startTriangleNumber=d;this.endTriangleNumber=e;this.geometryMinZ=g;this.planetCenterZ=h;this.localMode=l;this.maxBspNodeDepth=8;this.minElementCountForBVH=20;this.minBspNodeElementCount=10;this.rayDirection=n.create();this.ray0=n.create();this.isVerticalRay=!1;this._triangleHitCallback=x;this.totalElevationOffset=0;this.normalRequired=!1;this._bvh=new y.ElevationAgnosticBVH(e-d,this)}getAabbs2D(){return this.localMode?q.generateTriangleAabbsLocal(this.startTriangleNumber,this.endTriangleNumber,
this.indexData,this.vertexData,this.vertexStride):q.generateTriangleAabbsGlobal(this.startTriangleNumber,this.endTriangleNumber,this.indexData,this.vertexData,this.vertexStride,this.geometryMinZ,this.planetCenterZ)}get numTriangles(){return this.endTriangleNumber-this.startTriangleNumber}intersectRay(a,b,c,f,d,e){m.copy(this.ray0,a);m.sub(this.rayDirection,b,a);this.isVerticalRay=c;this.totalElevationOffset=f;this.normalRequired=e;this._triangleHitCallback=d;this._bvh.intersectRay(a,b,c);this._triangleHitCallback=
x}intersectRange(a,b){r(this.ray0,this.rayDirection,a,b,this.indexData,this.vertexData,this.vertexStride,this.totalElevationOffset,this.planetCenterZ,this.normalRequired,this._triangleHitCallback,this._bvh.elementIndexMap,this.startTriangleNumber)}getTriangleElevationOffset(a){return this.totalElevationOffset}}k.ComponentObjectElevationAgnosticComponentGeometryBVH=z;k.intersectTriangleRangeForComponent=r;Object.defineProperty(k,Symbol.toStringTag,{value:"Module"})});