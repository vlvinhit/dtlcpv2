// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("exports ../../../chunks/tslib.es6 ../../../request ../../../core/Accessor ../../../core/arrayUtils ../../../core/Error ../../../core/has ../../../core/lang ../../../core/maybe ../../../core/promiseUtils ../../../core/accessorSupport/decorators/property ../../../core/Logger ../../../core/accessorSupport/decorators/subclass ./AsyncWorkerQueue ./ImageWithType ../terrain/TerrainData ../webgl-engine/lib/Util ../../support/Scheduler".split(" "),function(e,r,m,w,x,y,I,z,n,l,A,J,B,t,C,D,E,F){function G(a){if(2>
a.byteLength)return"unknown";a=new Uint8Array(a,0,a.byteLength);return 137===a[0]&&80===a[1]?"image/png":71===a[0]&&73===a[1]?"image/gif":66===a[0]&&77===a[1]?"image/bmp":255===a[0]&&216===a[1]?"image/jpeg":"unknown"}e.StreamDataLoader=class extends w{constructor(){super(...arguments);this._tasks=new Map;this._onLoadQueue=[];this._doneQueue=[];this.updating=!1}setup(a,b,f){this._loadQueue=new t.AsyncWorkerQueue((c,d)=>this._startLoading(c,d),(c,d)=>this._doneLoadingCB(c,d),a,b);f&&(this._frameTask=
f.registerTask(F.TaskPriority.STREAM_DATA_LOADER,this))}destroy(){this._frameTask=n.removeMaybe(this._frameTask);this._tasks.forEach(a=>n.abortMaybe(a.abortController));this._loadQueue=n.destroyMaybe(this._loadQueue);this._tasks=this._doneQueue=this._onLoadQueue=null}hasDownloadSlots(a){return this._loadQueue.hasQuota(a)}request(a,b,f,c={}){const d=l.createResolver();d.__signal=null!=c?c.signal:null;const h=this._createOrUpdateTask(a,b,f,c,d);l.onAbort(c,()=>this._cancelRequest(h,d));return d.promise}_createTask(a,
b,f,c,d,h){a=new H(a,b,f,c,d);this._updateTask(a,h);this._tasks.set(d,a);1===this._tasks.size&&this._set("updating",!0);this._loadQueue.push(a);return a}_cancelRequest(a,b){x.removeUnordered(a.resolvers,b);b.reject(l.createAbortError());0===a.resolvers.length&&(a.status===e.TaskStatus.DOWNLOADING&&(a.status=e.TaskStatus.CANCELLED,this._loadQueue.cancel(a),a.abortController?.abort(),a.request=null,a.abortController=null),a.status=e.TaskStatus.CANCELLED,this._tasks.delete(a.key),0===this._tasks.size&&
this._set("updating",!1))}_updateTask(a,b){a.resolvers.push(b)}_createOrUpdateTask(a,b,f,c,d){const h=`${c?.uid||a}:${b}:${f}`,k=this._tasks.get(h);return k?(this._updateTask(k,d),k):this._createTask(a,c,b,f,h,d)}_doneLoadingCB(a,b){this._loadQueue&&(E.assert(a.status===e.TaskStatus.DOWNLOADING),a.status=e.TaskStatus.DOWNLOADED,this._frameTask?this._doneQueue.push({task:a,err:b}):this._doneLoading(a,b))}get running(){return 0<this._doneQueue.length||0<this._onLoadQueue.length}runTask(a){for(;!a.done&&
0<this._onLoadQueue.length;){var b=this._onLoadQueue.shift();l.throwIfAborted(b.task.abortController);b.task.abortController=null;b.callback(b.task);a.madeProgress()}for(;!a.done&&0<this._doneQueue.length;)b=this._doneQueue.shift(),b.task.status!==e.TaskStatus.DOWNLOADED&&(b.err=b.err||l.createAbortError()),this._doneLoading(b.task,b.err),a.madeProgress()}_doneLoading(a,b){if(b&&!l.isAbortError(b)&&0<a.numRetries)--a.numRetries,this._loadQueue.push(a);else{var f=D.isImageWithType(a.result)||a.result instanceof
HTMLImageElement?0:a.resolvers.length;for(const c of a.resolvers)if(b)l.isAbortError(b)?c.reject(b):c.reject(new y("stream-data-loader:request-error",`Failed to request resource at '${a.url}'. ${b}`,{url:a.url,error:b}));else{--f;const d=0<f?z.clone(a.result):a.result;c.resolve(d)}this._tasks.delete(a.key);0===this._tasks.size&&this._set("updating",!1)}}_startLoading(a,b){if(a.status===e.TaskStatus.CANCELLED)return!1;a.startTime=performance.now();a.status=e.TaskStatus.DOWNLOADING;let f,c;switch(a.docType){case "binary":c=
"array-buffer";f=0;break;case "image":c="image";break;case "image+type":c="array-buffer";break;default:c="json"}a.abortController=new AbortController;const d=a.abortController.signal;a.request=m(a.url,{...a.options,responseType:c,timeout:f,signal:d});const h=g=>{a.duration=performance.now()-a.startTime;a.size=g instanceof ArrayBuffer?g.byteLength:a.size||0;a.result=g;this._frameTask?this._onLoadQueue.push({callback:b,task:a}):(a.abortController=null,b(a))},k=g=>{a.status===e.TaskStatus.DOWNLOADING&&
b(a,g)};if("image+type"!==a.docType)return a.request.then(g=>h(g.data),k),!0;a.request.then(g=>{g=g.data;const p=G(g);c="image";a.size=g.byteLength;if("unknown"===p)a.request=m(a.url,{responseType:c,timeout:f,signal:d}),a.request.then(q=>h(q.data),k);else{g=new Blob([g],{type:p});var u=window.URL.createObjectURL(g);a.request=m(u,{responseType:c,timeout:f,signal:d});a.request.then(q=>h(new C.ImageWithType(q.data,p)),k).finally(()=>window.URL.revokeObjectURL(u))}},k);return!0}get test(){}};r.__decorate([A.property({readOnly:!0})],
e.StreamDataLoader.prototype,"updating",void 0);e.StreamDataLoader=r.__decorate([B.subclass("esri.views.3d.support.StreamDataLoader")],e.StreamDataLoader);const v={numRetries:0};class H extends t.BaseTask{constructor(a,b,f,c,d){super(c);this.url=a;this.options=b;this.docType=f;this.key=d;this.result=null;this.status=e.TaskStatus.QUEUED;this.abortController=this.request=null;this.resolvers=[];this.startTime=0;this.numRetries=v.numRetries}}e.TaskStatus=void 0;(function(a){a[a.QUEUED=1]="QUEUED";a[a.DOWNLOADING=
2]="DOWNLOADING";a[a.DOWNLOADED=3]="DOWNLOADED";a[a.CANCELLED=4]="CANCELLED"})(e.TaskStatus||(e.TaskStatus={}));e.test=v;Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})});