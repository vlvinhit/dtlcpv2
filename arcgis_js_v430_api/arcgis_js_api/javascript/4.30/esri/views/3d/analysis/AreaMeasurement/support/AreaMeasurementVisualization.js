// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/tslib.es6 ../../../../../intl ../../../../../core/Accessor ../../../../../core/colorUtils ../../../../../core/has ../../../../../core/mathUtils ../../../../../core/maybe ../../../../../core/quantityFormatUtils ../../../../../core/quantityUtils ../../../../../core/reactiveUtils ../../../../../core/unitUtils ../../../../../core/accessorSupport/decorators/property ../../../../../core/Logger ../../../../../core/RandomLCG ../../../../../core/accessorSupport/decorators/subclass ../../../../../core/libs/gl-matrix-2/math/mat4 ../../../../../core/libs/gl-matrix-2/factories/mat4f64 ../../../../../chunks/vec32 ../../../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../interactive/visualElements/LabelVisualElement ../../../interactive/visualElements/LineVisualElement ../../../interactive/visualElements/MeasurementAreaVisualElement ../../../interactive/visualElements/support/Segment ../../../support/mathUtils ../../../webgl-engine/lib/Material ../../../webgl-engine/materials/lineStippleUtils ../../../../../intl/locale ../../../../../intl/messages".split(" "),
function(h,m,Y,K,q,Z,L,r,A,M,v,t,n,aa,ba,N,O,P,F,B,G,w,Q,H,R,x,S,T,U){function I(a,b){switch(b){case "metric":return t.adaptiveMetricAreaUnit(a.value,a.unit);case "imperial":return t.adaptiveImperialAreaUnit(a.value,a.unit);default:return b}}function V(a){switch(a){case "metric":return"metric";case "imperial":return"imperial";case "square-inches":return"inches";case "square-feet":return"feet";case "square-yards":return"yards";case "square-miles":return"miles";case "square-us-feet":return"us-feet";
case "square-millimeters":return"millimeters";case "square-centimeters":return"centimeters";case "square-decimeters":return"decimeters";case "square-meters":return"meters";case "square-kilometers":return"kilometers";case "acres":return"imperial";case "ares":case "hectares":return"metric"}throw Error("unhandled area unit");}h.AreaMeasurementVisualization=class extends K{get _parameters(){const {accentColor:a,textColor:b}=this.view.effectiveTheme,e=q.unitRGBAFromColor(a),f=q.multiplyOpacityToUnitRGBA(a,
.5),c=q.multiplyOpacityToUnitRGBA(q.getContrast(a),.5);var d=q.getContrast(b,q.BrightnessThreshold.Low);const g=q.multiplyOpacity(d,.6);d=q.multiplyOpacity(d,.5);return{accentColor:e,transparentAccentColor:f,transparentContrastColor:c,intersectingLineColor:[1,.2,0,1],textColor:b,textBackgroundColor:g,textCalloutColor:d,pathLineWidth:3,perimeterLineWidth:2,projectionLineWidth:2,projectionLineStippleSize:5,labelDistance:25}}get visible(){return this.analysisViewData.visible}get _renderUnits(){return t.lengthUnitFromSpatialReference(this.view.renderCoordsHelper.spatialReference)??
"meters"}get testData(){}constructor(a){super(a);this._perimeterLengthLabel=this._areaLabel=this._measurementArea=this._projectionLines=this._intersectedPerimeter=this._perimeter=this._intersectedPath=this._path=null;this._pathSegments=[];this._perimeterSegments=[];this._origin=B.create();this._originTransform=P.create();this.messages=null;this.viewData=W;this.perimeterLengthLabel=this.areaLabel=null;this.loadingMessages=!0}initialize(){const {analysisViewData:a,_parameters:b,view:e}=this;this._path=
new w.LineVisualElement({view:e,attached:!0,width:b.pathLineWidth,polygonOffset:!0,renderOccluded:x.RenderOccludedFlag.OccludeAndTransparent,isDecoration:!0});this._intersectedPath=new w.LineVisualElement({view:e,attached:!0,width:b.pathLineWidth,polygonOffset:!0,renderOccluded:x.RenderOccludedFlag.OccludeAndTransparent,isDecoration:!0});this._perimeter=new w.LineVisualElement({view:e,attached:!0,width:b.perimeterLineWidth,polygonOffset:!0,renderOccluded:x.RenderOccludedFlag.OccludeAndTransparent,
isDecoration:!0});this._intersectedPerimeter=new w.LineVisualElement({view:e,attached:!0,width:b.perimeterLineWidth,color:b.intersectingLineColor,polygonOffset:!0,renderOccluded:x.RenderOccludedFlag.OccludeAndTransparent,isDecoration:!0});this._projectionLines=new w.LineVisualElement({view:e,attached:!0,width:b.projectionLineWidth,stipplePattern:S.createStipplePatternSimple(b.projectionLineStippleSize),polygonOffset:!0,renderOccluded:x.RenderOccludedFlag.OccludeAndTransparent,isDecoration:!0});this._measurementArea=
new Q.MeasurementAreaVisualElement({view:e,attached:!0,isDecoration:!0});const f={attached:!0,view:e,isDecoration:!0};this._areaLabel=new G.LabelVisualElement({...f,fontSize:C.Large});this._perimeterLengthLabel=new G.LabelVisualElement({...f,fontSize:C.Small});this.addHandles([v.watch(()=>[a.mode,this.visible,a.unit,a.measurementData,a.stagedPoint],()=>this._update(),v.syncAndInitial),v.watch(()=>e.state?.camera,()=>this._updateLabels(),v.syncAndInitial),T.onLocaleChange(()=>this._updateMessageBundle()),
v.watch(()=>this._parameters,({accentColor:c,transparentAccentColor:d,transparentContrastColor:g,textColor:l,textBackgroundColor:k,textCalloutColor:p})=>{const {_path:y,_intersectedPath:z,_perimeter:u,_projectionLines:X,_measurementArea:J,_areaLabel:D,_perimeterLengthLabel:E}=this;y.color=c;z.color=c;u.color=c;X.color=c;J.color1=d;J.color2=g;D.textColor=l;D.backgroundColor=k;D.calloutColor=p;E.textColor=l;E.backgroundColor=k;E.calloutColor=p},v.initial)]);this._updateMessageBundle()}destroy(){this._measurementArea=
r.destroyMaybe(this._measurementArea);this._path=r.destroyMaybe(this._path);this._intersectedPath=r.destroyMaybe(this._intersectedPath);this._perimeter=r.destroyMaybe(this._perimeter);this._intersectedPerimeter=r.destroyMaybe(this._intersectedPerimeter);this._areaLabel=r.destroyMaybe(this._areaLabel);this._perimeterLengthLabel=r.destroyMaybe(this._perimeterLengthLabel);this._projectionLines=r.destroyMaybe(this._projectionLines);this.set("view",null)}_update(){if(!this.destroyed&&this.view.ready&&
this.view.renderCoordsHelper){var {analysisViewData:{measurementData:a},analysisViewData:b}=this;null!=a&&(this._updateViewData(a,b.path),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}}_updateViewData(a,b){const e=a.validMeasurement,f="geodesic"===a.actualMeasurementMode;var c=f?a.geodesicArea:a.area;let d=1;c&&(c=M.toUnit(c,I(c,this.analysisViewData.unit)),d=L.nextHighestPowerOfTen(Math.sqrt(c.value)/
Math.sqrt(300)),d*=Math.sqrt(t.convertUnit(1,c.unit,"square-meters")),d=t.convertUnit(d,"meters",this._renderUnits));this._set("viewData",{validMeasurement:e,numVertices:a.numVertices,hasStagedVertex:a.hasStagedVertex,path:b,mode:a.actualMeasurementMode,positionsRender:a.positionsRender,positionsFittedWorld:a.positionsFittedWorld,positionsFittedRender:a.positionsFittedRender,intersectingSegments:f?a.geodesicIntersectingSegments:a.intersectingSegments,triangleIndices:f?a.geodesicTriangleIndices:a.triangleIndices,
areaCentroid:f?a.geodesicAreaCentroidRenderCoords:a.areaCentroidRenderCoords,perimeterLengthLabelSegmentIndex:0,area:f?a.geodesicArea:a.area,pathLength:f?a.geodesicPathLength:a.pathLength,perimeterLength:a.perimeterLength,checkerSize:d})}_updateOrigin(){R.midpoint3d(this.viewData.positionsRender,this._origin);O.fromTranslation(this._originTransform,this._origin);this._measurementArea.transform=this._originTransform;this._projectionLines.transform=this._originTransform}_createSegments(a){const b=this.viewData,
e=this.view.renderCoordsHelper.spatialReference,f=b.mode,c=[],d=[],g=[],l=b.numVertices,k=b.validMeasurement?l:l-1;for(let p=0;p<k;++p){const y=b[a][p],z=b[a][(p+1)%l];let u=null;switch(f){case "euclidean":u=new H.EuclideanSegment(y,z);break;case "geodesic":u=new H.GeodesicSegment(y,z,e)}b.intersectingSegments.has(p)?g.push(u):d.push(u);c.push(u)}a=null;b.validMeasurement&&b.hasStagedVertex&&2<=k?a=c[c.length-2]:b.hasStagedVertex&&1<=k&&(a=c[c.length-1]);return{all:c,nonIntersecting:d,intersecting:g,
stagedSegment:a}}_updatePathSegments(){const {visible:a}=this,b=this._createSegments("positionsRender");this._path.setGeometryFromSegments(b.nonIntersecting,this._origin);this._path.visible=a;this._intersectedPath.setGeometryFromSegments(b.intersecting,this._origin);this._intersectedPath.visible=a;this._pathSegments=b.all}_updatePerimeterSegments(){const a=this.visible&&"euclidean"===this.viewData.mode,b=this._createSegments("positionsFittedRender");this._perimeter.setGeometryFromSegments(b.nonIntersecting,
this._origin);this._perimeter.visible=a;this._intersectedPerimeter.setGeometryFromSegments(b.intersecting,this._origin);this._intersectedPerimeter.visible=a;this._perimeterSegments=b.all}_updateArea(){const a=this.viewData;switch(a.mode){case "euclidean":this._updateAreaEuclidean(a);break;case "geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(a){const b=this.visible;a.validMeasurement&&0===a.intersectingSegments.size&&a.triangleIndices?(this._measurementArea.geometry={uv:a.positionsFittedWorld,
position:a.positionsFittedRender,triangleIndices:a.triangleIndices},this._measurementArea.size=[a.checkerSize,a.checkerSize],this._measurementArea.visible=b):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const a=this.viewData,b=this.visible;var e=a.mode;const f=a.numVertices;if(0<f&&a.validMeasurement&&"euclidean"===e){e=[];for(let c=0;c<f;++c){const d=B.create();F.subtract(d,a.positionsRender[c],this._origin);const g=B.create();F.subtract(g,
a.positionsFittedRender[c],this._origin);e.push([d,g])}this._projectionLines.geometry=e;this._projectionLines.visible=b}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(!this.destroyed){var {viewData:a}=this,{area:b,path:e}=a;if(e){var f=this.visible;var c=(c=this.messages)&&b&&A.formatDecimal(c,b,I(b,this.analysisViewData.unit));null!=c?(this._areaLabel.geometry={type:"point",point:a.areaCentroid},this._areaLabel.text=c,this._areaLabel.visible=a.validMeasurement&&
0===a.intersectingSegments.size&&f):this._areaLabel.visible=!1;this._set("areaLabel",c);if(a.validMeasurement&&0===a.intersectingSegments.size){var d=(c="geodesic"===a.mode||!a.validMeasurement)?a.pathLength:a.perimeterLength;var g=this.messages;var l;if(l=g&&d){l=A.formatDecimal;a:{var k=d;const p=V(this.analysisViewData.unit);switch(p){case "metric":k=t.adaptiveMetricLengthUnit(k.value,k.unit);break a;case "imperial":k=t.adaptiveImperialLengthUnit(k.value,k.unit);break a;default:k=p}}l=l.call(A,
g,d,k)}g=l;this._set("perimeterLengthLabel",g);this._perimeterLengthLabel.distance=this._parameters.labelDistance;this._perimeterLengthLabel.anchor="top";this._perimeterLengthLabel.text=g;d=this._perimeterLengthLabel.visible=!0;for(g=0;g<a.numVertices;++g)if(d=(a.perimeterLengthLabelSegmentIndex+g)%a.numVertices,l=c?this._pathSegments[d]:this._perimeterSegments[d],d=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:l,sampleLocation:"center"},this._perimeterLengthLabel.overlaps(this._areaLabel))d=
!1;else break;this._perimeterLengthLabel.visible=d&&f}else this._perimeterLengthLabel.visible=!1}}}_updateMessageBundle(){this.loadingMessages=!0;U.fetchMessageBundle("esri/core/t9n/Units").then(a=>{this.messages=a;this.view&&this._update()}).finally(()=>{this.loadingMessages=!1})}};m.__decorate([n.property()],h.AreaMeasurementVisualization.prototype,"_parameters",null);m.__decorate([n.property()],h.AreaMeasurementVisualization.prototype,"view",void 0);m.__decorate([n.property()],h.AreaMeasurementVisualization.prototype,
"messages",void 0);m.__decorate([n.property()],h.AreaMeasurementVisualization.prototype,"analysis",void 0);m.__decorate([n.property()],h.AreaMeasurementVisualization.prototype,"viewData",void 0);m.__decorate([n.property()],h.AreaMeasurementVisualization.prototype,"analysisViewData",void 0);m.__decorate([n.property({readOnly:!0})],h.AreaMeasurementVisualization.prototype,"areaLabel",void 0);m.__decorate([n.property({readOnly:!0})],h.AreaMeasurementVisualization.prototype,"perimeterLengthLabel",void 0);
m.__decorate([n.property()],h.AreaMeasurementVisualization.prototype,"loadingMessages",void 0);m.__decorate([n.property()],h.AreaMeasurementVisualization.prototype,"visible",null);m.__decorate([n.property()],h.AreaMeasurementVisualization.prototype,"_renderUnits",null);h.AreaMeasurementVisualization=m.__decorate([N.subclass("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],h.AreaMeasurementVisualization);var C;(function(a){a[a.Small=12]="Small";a[a.Large=16]="Large"})(C||=
{});const W={validMeasurement:!1,numVertices:0,hasStagedVertex:!1,path:null,mode:null,positionsRender:null,positionsFittedWorld:null,positionsFittedRender:null,intersectingSegments:null,triangleIndices:null,areaCentroid:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null,area:null,pathLength:null,perimeterLength:null};Object.defineProperty(h,Symbol.toStringTag,{value:"Module"})});