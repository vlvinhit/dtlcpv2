// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define(["exports","../../../../core/Evented","../../../../core/has","../../../../core/MapUtils"],function(l,m,q,n){class p extends m{constructor(a,b){super();this._updateAndCompare=a;this._notifyUpdated=b;this._nodes=new Map;this._graphics=new Map;this._duplicates=new Map}clear(){if(0<this._graphics.size){const a=this.toArray();this._graphics.clear();this.emit("change",{added:[],removed:a})}this._nodes.clear()}get length(){return this._graphics.size}get(a){return this._graphics.get(a)}getNode(a){return this._nodes.get(a)}hasNode(a){return this._nodes.has(a)}nodes(){return this._nodes.values()}addNode(a,
b){this._nodes.set(a,b);const e=b.graphics;if(0!==e.length){var f=new Set;for(let c=0;c<e.length;c++){var d=e[c];const g=d.objectId,h=this._graphics.get(g);h?(f.add(g),d!==h&&(e[c]=h),(d=this._duplicates.get(g))?d.push(a):this._duplicates.set(g,[h.nodeIndex,a])):(d.nodeIndex=a,this._graphics.set(g,d))}f.size&&this._updateForeignGraphics(b);a=0<f.size?e.filter(c=>!f.has(c.objectId)):e;0<a.length&&this.emit("change",{added:a,removed:[]})}}removeNode(a){var b=this._nodes.get(a);if(b){this._nodes.delete(a);
var e=new Set,f=[];for(const g of b.graphics){b=g.objectId;var d=this._graphics.get(b);if(!d)continue;const h=this._duplicates.get(b);if(h){var c=h.indexOf(a);if(-1!==c){h.splice(c,1);if(d.nodeIndex===a){d=this.getNode(h[0]);for(c=1;c<h.length;c++){const k=this.getNode(h[c]);if(null==d||null!=k&&k.node.level>d.node.level)d=k}null!=d&&e.add(d)}1===h.length&&this._duplicates.delete(b)}}else this._graphics.delete(b),f.push(g)}0<f.length&&this.emit("change",{added:[],removed:f});e.forEach(g=>this._updateForeignGraphics(g))}}_updateForeignGraphics(a){const b=
[],e=a.node.index,f=a.node.level;let d=0;for(;d<a.graphics.length;){var c=a.graphics[d].nodeIndex;if(c===e){d++;continue}let g=1;for(;d+g<a.graphics.length&&a.graphics[d+g].nodeIndex===c;)g++;c=this.getNode(c);if(!(null!=c&&c.node.level>f))for(c=d;c<d+g;c++){const h=a.graphics[c];h.nodeIndex=e;this._updateAndCompare(h,a,c)&&b.push(h)}d+=g}0<b.length&&this._notifyUpdated(b)}toArray(){return Array.from(this._graphics.values())}find(a){let b=void 0;n.someMap(this._graphics,e=>a(e)?(b=e,!0):!1);return b}forEach(a){this._graphics.forEach(b=>
a(b))}forEachNode(a){this._nodes.forEach((b,e)=>a(b,e))}get nodeCount(){return this._nodes.size}_checkInvariants(){const a=new Map;this._nodes.forEach((b,e)=>{b.graphics.forEach(f=>{a.set(f.objectId,1+(a.get(f.objectId)??0));this._duplicates.get(f.objectId)})});a.forEach((b,e)=>{(b=this._graphics.get(e))&&this._nodes.get(b.nodeIndex)&&(e=this._duplicates.get(e))&&e.forEach(f=>{this._nodes.get(f)})})}}l.I3SGraphicsMap=p;Object.defineProperty(l,Symbol.toStringTag,{value:"Module"})});