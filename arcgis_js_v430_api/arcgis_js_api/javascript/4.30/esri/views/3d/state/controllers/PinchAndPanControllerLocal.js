// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/tslib.es6 ../../../../core/screenUtils ../../../../core/Logger ../../../../core/has ../../../../core/RandomLCG ../../../../core/Error ../../../../core/accessorSupport/decorators/subclass ../../../../core/libs/gl-matrix-2/math/vec2 ../../../../chunks/vec32 ../../../../core/libs/gl-matrix-2/factories/vec3f64 ../../../../geometry/support/axisAngle ../../../../geometry/support/plane ../../camera/constraintUtils ../../camera/constraintUtils/ConstraintOptions ../../camera/constraintUtils/ConstraintTypes ../../camera/constraintUtils/InteractionType ../../input/util ../../layers/VoxelWasm ./InteractiveController ./momentum/PanPlanarMomentumController ./momentum/RotationMomentumController ./momentum/ZoomPlanarMomentumController ../utils/navigationUtils ../../webgl/RenderCamera ../../../navigation/PanPlanarMomentumEstimator ../../../navigation/RotationMomentumEstimator ../../../navigation/ZoomMomentumEstimator".split(" "),
function(r,z,q,O,P,Q,R,A,B,b,k,C,f,m,D,E,t,w,F,G,H,I,J,d,K,L,M,N){const x=k.fromValues(0,0,1);r.PinchAndPanControllerLocal=class extends G.InteractiveController{constructor(){super(...arguments);this._rotationValueSmooth=new w.ExponentialFalloff(.05);this._scalingValueSmooth=new w.ExponentialFalloff(.05);this._planeHorizontal=f.create();this._planeVertical=f.create();this._rotationMomentumEstimator=new M.RotationMomentumEstimator;this._panMomentumEstimator=new L.PanPlanarMomentumEstimator(300,12,
.9);this._zoomMomentumEstimator=new N.ZoomMomentumEstimator;this._beginRadius=0;this._beginCenter=k.create();this._beginAngle=0;this._tmpPoints=[];this._navMode=d.NavigationMode.Horizontal;this._beginCenterScreen=q.createScreenPointArray();this._tmpCentroid3d=k.create();this._tmpCentroid2d=q.createScreenPointArray();this._tmp2d=q.createScreenPointArray();this._pointerCount=0;this._beginCamera=new K;this._constraintOptions=new D.ConstraintOptions(E.ConstraintTypes.ALL,t.InteractionType.NONE,0,this._beginCamera)}begin(a){if(this.active){var c=
this.view.navigation.momentumEnabled;this._zoomMomentumEstimator.enabled=c;this._rotationMomentumEstimator.enabled=c;this._panMomentumEstimator.enabled=c;this._beginRadius=a.radius;this._pointerCount=a.pointers.size;this._beginAngle=a.angle;this._rotationValueSmooth.reset();this._scalingValueSmooth.reset();q.screenPointObjectToArray(a.center,this._beginCenterScreen);f.fromNormalAndOffset(x,0,this._planeHorizontal);var e=k.create();c=this._intersectionHelper.intersectScreenFreePointFallback(this._beginCenterScreen,
e,0===this.view.map.ground.opacity?d.contentIntersectorOptions:{});var g=k.create();b.negate(g,this.startCamera.viewForward);var h=k.create();b.copy(h,x);var n=b.dot(g,h);this._navMode=d.navigationMode(this.startCamera,this._beginCenterScreen,this.view.renderCoordsHelper,this.view.viewingMode);var l=Math.min(d.panDistanceModifier,1/Math.abs(b.dot(h,this.startCamera.viewForward)))*Math.max(Math.abs(this.view.camera.position.z),d.minHeightLimit);f.setOffsetFromPoint(this._planeHorizontal,this._planeHorizontal,
e);this.startCamera.aboveGround||f.negate(this._planeHorizontal,this._planeHorizontal);var p=k.create(),u=k.create(),v=k.create();b.subtract(p,e,this.currentCamera.eye);var y=b.length(p);b.normalize(p,p);this._navMode===d.NavigationMode.Vertical?(b.scale(h,h,n),b.subtract(f.getNormal(this._planeVertical),g,h),b.normalize(f.getNormal(this._planeVertical),f.getNormal(this._planeVertical)),f.setOffsetFromPoint(this._planeVertical,this._planeVertical,e),e=this.view._stage.renderView.getMinimalDepthForArea(F.getVoxelWasm(this.view),
this._beginCenterScreen[0],this._beginCenterScreen[1],this.view.state.camera,d.screenPixelArea),l=null!=e?e:l,l=c?Math.min(l,y):l,b.copy(v,b.add(u,this.currentCamera.eye,b.scale(u,p,l))),this._planeVertical[3]=-b.dot(f.getNormal(this._planeVertical),v),this._computePlanePoints(a.pointers,this._planeVertical,this.startCamera,this._tmpPoints)):(b.copy(v,b.add(u,this.currentCamera.eye,b.scale(u,p,c?y:l))),this._planeHorizontal[3]=-b.dot(f.getNormal(this._planeHorizontal),v),this._computePlanePoints(a.pointers,
this._planeHorizontal,this.startCamera,this._tmpPoints));d.centroid(this._tmpPoints,this._beginCenter);this._beginCamera.copyFrom(this.startCamera)}}update(a){if(this.active){this.currentCamera.copyFrom(this.startCamera);var c=1<a.pointers.size,e=this._navMode===d.NavigationMode.Horizontal?this._planeHorizontal:this._planeVertical,g=this._beginCenter;if(c){const h=this._beginRadius/a.radius;this._scalingValueSmooth.gain=.001875*Math.min(Math.max(a.radius,40),120);this._scalingValueSmooth.update(h);
d.applyZoomToPoint(this.currentCamera,g,this._scalingValueSmooth.value,this.view.state.constraints.minimumPoiDistance);this._zoomMomentumEstimator.add(this._scalingValueSmooth.value,.001*a.timestamp);this._constraintOptions.interactionType=t.InteractionType.ZOOM;this._constraintOptions.interactionFactor=m.pixelDistanceToInteractionFactor(Math.abs(a.radius-this._beginRadius));m.applyAll(this.view,this.currentCamera,this._constraintOptions)}this._computePlanePoints(a.pointers,e,this.currentCamera,this._tmpPoints);
d.centroid(this._tmpPoints,this._tmpCentroid3d);q.screenPointObjectToArray(a.center,this._tmpCentroid2d);d.applyPanPlanar(this.currentCamera,g,this._tmpCentroid3d);this._panMomentumEstimator.add(this._tmpCentroid2d,this._tmpCentroid3d,.001*a.timestamp);this._constraintOptions.interactionType=t.InteractionType.PAN;this._constraintOptions.interactionFactor=m.pixelDistanceToInteractionFactor(B.distance(this._beginCenterScreen,this._tmpCentroid2d));m.applyAll(this.view,this.currentCamera,this._constraintOptions);
c&&(c=this._rotationValueSmooth.value,e=d.normalizeRotationDelta(a.angle-c),this._rotationValueSmooth.gain=.00125*Math.min(Math.max(a.radius,40),120),this._rotationValueSmooth.update(c+e),c=this._rotationValueSmooth.value-this._beginAngle,this._rotationMomentumEstimator.add(c,.001*a.timestamp),e=f.getNormal(this._planeHorizontal),d.applyRotation(this.currentCamera,g,C.wrapAxisAngle(e,c)),this._constraintOptions.interactionType=t.InteractionType.TUMBLE,this._constraintOptions.interactionFactor=m.pixelDistanceToInteractionFactor(Math.abs(a.radius*
c)),m.applyAll(this.view,this.currentCamera,this._constraintOptions));this.commitCamera()}}end(a){a.pointers.size===this._pointerCount&&this.update(a);this.finishController();return(a=this._zoomMomentumEstimator.evaluateMomentum())?new J.ZoomPlanarMomentumController({view:this.view,momentum:a,zoomCenter:this._beginCenter}):(a=this._rotationMomentumEstimator.evaluateMomentum())?new I.RotationMomentumController({view:this.view,momentum:a,center:this._beginCenter,axis:f.getNormal(this._planeHorizontal)}):
(a=this._panMomentumEstimator.evaluateMomentum())?new H.PanPlanarMomentumController({view:this.view,momentum:a}):null}_computePlanePoints(a,c,e,g){g.length=a.size;const h=this._tmp2d;let n=0;a.forEach(l=>{h[0]=l.x;h[1]=l.y;void 0===g[n]&&(g[n]=k.create());d.intersectPlaneFromScreenPointAtEye(c,e,h,g[n]);n+=1});return g}get _intersectionHelper(){return this.view.sceneIntersectionHelper}};r.PinchAndPanControllerLocal=z.__decorate([A.subclass("esri.views.3d.state.controllers.PinchAndPanControllerLocal")],
r.PinchAndPanControllerLocal);Object.defineProperty(r,Symbol.toStringTag,{value:"Module"})});