// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("../../../chunks/tslib.es6 ../../../geometry ../../../Graphic ../../../core/asyncUtils ../../../core/Collection ../../../core/Error ../../../core/Evented ../../../core/Logger ../../../core/maybe ../../../core/reactiveUtils ../../../core/accessorSupport/decorators/property ../../../core/has ../../../core/RandomLCG ../../../core/accessorSupport/decorators/subclass ../../../geometry/support/coordsUtils ../../../layers/GraphicsLayer ../../../symbols/SimpleMarkerSymbol ../../ViewingMode ../../2d/interactive/SnappingVisualizer2D ./drawUtils ./GraphicMover ./HighlightHelper ./layerUtils ./reshapeTooltipUtils ./settings ../../input/InputManager ../../interactive/coordinateHelper ../../interactive/keybindings ../../interactive/editGeometry/EditGeometryOperations ../../interactive/sketch/SketchOptions ../../interactive/snapping/SnappingContext ../../interactive/tooltip/Tooltip ../../interactive/tooltip/tooltipCommonUtils ../../../geometry/Polyline ../../../geometry/Point".split(" "),
function(m,q,A,G,B,H,h,I,v,w,n,oa,pa,J,u,K,x,L,M,N,O,P,Q,y,R,S,T,U,V,D,W,X,Y,Z,z){function E(a){const b=u.geometryToCoordinates(a.clone());if("polygon"===a.type)for(const c of b)a=c[c.length-1],c[0][0]===a[0]&&c[0][1]===a[1]&&2<c.length&&c.pop();return b}function F({attributes:a}){return[a?.pathIndex||0,a?.pointIndex||0]}class aa{constructor(a,b,c){this.graphic=a;this.mover=b;this.selected=c;this.type="reshape-start"}}class ba{constructor(a,b,c){this.graphic=a;this.mover=b;this.selected=c;this.type=
"reshape"}}class ca{constructor(a,b,c){this.graphic=a;this.mover=b;this.selected=c;this.type="reshape-stop"}}class da{constructor(a,b,c){this.mover=a;this.dx=b;this.dy=c;this.type="move-start"}}class ea{constructor(a,b,c){this.mover=a;this.dx=b;this.dy=c;this.type="move"}}class fa{constructor(a,b,c){this.mover=a;this.dx=b;this.dy=c;this.type="move-stop"}}class ha{constructor(a){this.added=a;this.type="vertex-select"}}class ia{constructor(a){this.removed=a;this.type="vertex-deselect"}}class ja{constructor(a,
b,c,d){this.added=a;this.graphic=b;this.oldGraphic=c;this.vertices=d;this.type="vertex-add"}}class ka{constructor(a,b,c,d){this.removed=a;this.graphic=b;this.oldGraphic=c;this.vertices=d;this.type="vertex-remove"}}q=R.settings.reshapeGraphics;const la={vertices:{default:new x({style:"circle",size:q.vertex.size,color:q.vertex.color,outline:{color:q.vertex.outlineColor,width:1}}),hover:new x({style:"circle",size:q.vertex.hoverSize,color:q.vertex.hoverColor,outline:{color:q.vertex.hoverOutlineColor,
width:1}}),selected:new x({style:"circle",size:q.selected.size,color:q.selected.color,outline:{color:q.selected.outlineColor,width:1}})},midpoints:{default:new x({style:"circle",size:q.midpoint.size,color:q.midpoint.color,outline:{color:q.midpoint.outlineColor,width:1}}),hover:new x({style:"circle",size:q.midpoint.size,color:q.midpoint.color,outline:{color:q.midpoint.outlineColor,width:1}})}};h=class extends h.EventedAccessor{constructor(a){super(a);this._editGeometryOperations=this._activeOperationInfo=
null;this._graphicAttributes={esriSketchTool:"box"};this.activeTooltipInfo=this.tooltip=this._stagedVertex=this._snappingTask=this._hoverGraphic=this._snappingGraphicsLayer=this._snappingContext=this._mover=null;this.callbacks={onReshapeStart(){},onReshape(){},onReshapeStop(){},onMoveStart(){},onMove(){},onMoveStop(){},onGraphicClick(){}};this.enableVertices=this.enableMovement=this.enableMidpoints=!0;this.layer=this.graphic=null;this.midpointGraphics=new B;this.midpointSymbol=new x({style:"circle",
size:6,color:[200,200,200],outline:{color:[100,100,100],width:1}});this.selectedVertices=new B;this.snappingManager=null;this.symbols=la;this.sketchOptions=new D;this.type="reshape";this.vertexGraphics=new B;this.view=null}initialize(){const a=this.view;this._highlightHelper=new P({view:a});this._setup();this.tooltip=new X.Tooltip({view:this.view});this.tooltipInfos=y.createTooltipInfos(this.sketchOptions);this.addHandles([w.when(()=>a?.ready,()=>{const {layer:b,view:c}=this;Q.addUniqueLayer(c,b);
this.addHandles(c.on("key-down",d=>this._keyDownHandler(d),S.ViewEventPriorities.TOOL))},{once:!0,initial:!0}),w.watch(()=>this.graphic,()=>this.refresh()),w.watch(()=>this.layer,(b,c)=>{c&&(this._clearSelection(),this._resetGraphics(c));this.refresh()}),w.watch(()=>this.enableMidpoints,()=>this.refresh()),y.connectTooltip(this.tooltip,()=>this._tooltipsContext),w.watch(()=>this.view.effectiveTheme.accentColor,()=>this._updateSymbolsForTheme(),w.initial)]);this._updateTooltip()}destroy(){this._reset();
this._mover?.destroy();this._mover=null;this.tooltip=v.destroyMaybe(this.tooltip)}get _coordinateHelper(){return this._editGeometryOperations?.data.coordinateHelper??T.createCoordinateHelper(!!this.graphic.geometry?.hasZ,!!this.graphic.geometry?.hasM,this.view.spatialReference)}get _selectedVertex(){return 1===this.selectedVertices.length?this.selectedVertices.at(0):void 0}get _tooltipsContext(){return{sketchOptions:this.sketchOptions,activeTooltipInfo:this.activeTooltipInfo,graphic:this.graphic,
selectedVertex:this._selectedVertex,updateGeometry:(a,b,c,d,f)=>{this._setUpGeometryHelper();const e=a===this.graphic;e?this._emitMoveStartEvent(0,0):this._emitReshapeStartEvent(a);this._syncGeometryAfterVertexMove(a,b,d,f,!0);e?({view:a}=this,c=a.toScreen(c),a=a.toScreen(b),b=(a?.x??0)-(c?.x??0),c=(a?.y??0)-(c?.y??0),this._emitMoveEvent(b,c),this._emitMoveStopEvent(b,c)):(this._emitReshapeEvent(a),this._emitReshapeStopEvent(a));this._editGeometryOperations=v.destroyMaybe(this._editGeometryOperations)}}}set highlightsEnabled(a){this._highlightHelper?.removeAll();
this._set("highlightsEnabled",a);this._setUpHighlights()}get state(){const a=this.view.ready,b=!(!this.graphic||!this.layer);return a&&b?"active":a?"ready":"disabled"}isUIGraphic(a){const b=[];this.graphic&&b.push(this.graphic);b.concat(this.vertexGraphics.items,this.midpointGraphics.items);return 0<b.length&&b.includes(a)}refresh(){this._reset();this._setup()}reset(){this.graphic=null}clearSelection(){this._clearSelection()}removeSelectedVertices(){const {selectedVertices:a}=this;a.length&&this._removeVertices(a)}_setup(){const {graphic:a,
layer:b}=this;if(b&&null!=a?.geometry){var c=a.geometry;"mesh"===c.type||"extent"===c.type?this._logGeometryTypeError():("polygon"===c.type&&u.closeRingsAndFixWinding(c),this._setUpHighlights(),this._setupGraphics(),this._setupMover())}}_setUpHighlights(){this.highlightsEnabled&&this.graphic&&this._highlightHelper?.add(this.graphic)}_setUpGeometryHelper(){var a=this.graphic.geometry;null==a||"mesh"===a.type||"extent"===a.type?this._logGeometryTypeError():(a="multipoint"===a.type?new Z({paths:a.points,
spatialReference:a.spatialReference}):a,this._editGeometryOperations=V.EditGeometryOperations.fromGeometry(a,L.ViewingMode.Local))}_saveSnappingContextForHandle(a,b){this._snappingGraphicsLayer=new K({listMode:"hide",internal:!0,title:"Reshape snapping layer"});this.view.map.layers.add(this._snappingGraphicsLayer);const c=this._editGeometryOperations;v.assertIsSome(c);this._snappingContext=new W.SnappingContext({editGeometryOperations:c,elevationInfo:{mode:"on-the-ground",offset:0},pointer:b.viewEvent?.pointerType||
"mouse",excludeFeature:this.graphic,feature:this.graphic,visualizer:new M.SnappingVisualizer2D(this._snappingGraphicsLayer),vertexHandle:this._getVertexFromEditGeometry(a)})}_reset(){this._clearSelection();this._highlightHelper?.removeAll();this._updateTooltip();this._resetGraphics();this._resetSnappingStateVars();this._activeOperationInfo=null;this._mover&&this._mover.destroy();this._mover=null;this.view.cursor="default"}_resetSnappingStateVars(){null!=this.snappingManager&&this.snappingManager.doneSnapping();
null!=this._snappingGraphicsLayer&&(this.view?.map&&this.view.map.layers.remove(this._snappingGraphicsLayer),this._snappingGraphicsLayer.destroy());this._editGeometryOperations=v.destroyMaybe(this._editGeometryOperations);this._snappingTask=v.abortMaybe(this._snappingTask);this._stagedVertex=this._snappingContext=this._snappingTask=null}_resetGraphics(a){this._removeMidpointGraphics(a);this._removeVertexGraphics(a);this.selectedVertices.removeAll();this._updateTooltip()}_removeMidpointGraphics(a){(a=
a||this.layer)&&a.removeMany(this.midpointGraphics.items);this.midpointGraphics.items.forEach(b=>b.destroy());this.midpointGraphics.removeAll()}_removeVertexGraphics(a){(a=a||this.layer)&&a.removeMany(this.vertexGraphics.items);this.vertexGraphics.items.forEach(b=>b.destroy());this.vertexGraphics.removeAll()}_setupGraphics(){var a=this.graphic.geometry;null==a||"polyline"!==a.type&&"polygon"!==a.type||(a=E(a),this.enableMidpoints&&this._setUpMidpointGraphics(a),this.enableVertices&&this._setUpVertexGraphics(a))}_setUpMidpointGraphics(a){this._removeMidpointGraphics();
a=this._createMidpointGraphics(a);this.midpointGraphics.addMany(a);this.layer.addMany(a)}_setUpVertexGraphics(a){this._removeVertexGraphics();a=this._createVertexGraphics(a);this.vertexGraphics.addMany(a);this._storeRelatedVertexIndices();this.layer.addMany(a)}_createVertexGraphics(a){const {_graphicAttributes:b,symbols:c}=this,d=[];a?.forEach((f,e)=>{f.forEach((g,k)=>{d.push(new A({geometry:this._coordinateHelper.arrayToPoint(g),symbol:c?.vertices?.default,attributes:{...b,pathIndex:e,pointIndex:k}}))})});
return d}_createMidpointGraphics(a){const {_graphicAttributes:b,symbols:c}=this,d=[];for(let f=0;f<a.length;f++){const e=a[f];for(let g=0;g<e.length;g++){const k=(g+1)%e.length;if("polyline"===this.graphic.geometry?.type&&0===k)continue;const p=this._getMidpoint(e[g],e[k]);d.push(new A({geometry:p,symbol:c.midpoints.default,attributes:{...b,pathIndex:f,pointIndexStart:g,pointIndexEnd:k}}))}}return d}_updateSymbolsForTheme(){const a=this.view.effectiveTheme.accentColor;this.symbols={vertices:{...this.symbols.vertices,
default:this.symbols.vertices.default.clone().set("color",a),hover:this.symbols.vertices.hover?.clone().set("color",a)},midpoints:{...this.symbols.midpoints}};for(const b of this.vertexGraphics)this._isSelected(b)?b.symbol=this.symbols.vertices.selected:b.symbol=this._hoverGraphic===b?this.symbols.vertices.hover:this.symbols.vertices.default}_storeRelatedVertexIndices(){const a=this.vertexGraphics.items;if(a){var b=a.map(({geometry:c})=>({x:c.x,y:c.y}));for(let c=0;c<b.length;c++){const d=[];for(let f=
0;f<b.length;f++){if(c===f)continue;const e=b[c],g=b[f];e.x===g.x&&e.y===g.y&&d.push(f)}a[c].attributes.relatedGraphicIndices=d}}}_setupMover(){const {enableMovement:a,graphic:b,midpointGraphics:c,vertexGraphics:d,view:f}=this,e=d.concat(c).items;a&&e.push(b);this._mover=new O({enableMoveAllGraphics:!1,highlightsEnabled:!1,indicatorsEnabled:!1,graphics:e,view:f,callbacks:{onGraphicClick:g=>this._onGraphicClickCallback(g),onGraphicMoveStart:g=>this._onGraphicMoveStartCallback(g),onGraphicMove:g=>this._onGraphicMoveCallback(g),
onGraphicMoveStop:g=>this._onGraphicMoveStopCallback(g),onGraphicPointerOver:g=>this._onGraphicPointerOverCallback(g),onGraphicPointerOut:g=>this._onGraphicPointerOutCallback(g)}})}_onGraphicClickCallback(a){a.viewEvent.stopPropagation();const b=a.graphic;if(b===this.graphic)this.clearSelection(),this.emit("graphic-click",a),this.callbacks.onGraphicClick?.(a);else if(this._isMidpoint(b)){if(2!==a.viewEvent.button){a=this.graphic.clone();var c=this._createVertexFromMidpoint(b);this.refresh();this._emitVertexAddEvent([b],
a,c)}}else this._isVertex(b)&&(a.viewEvent.stopPropagation(),2===a.viewEvent.button?this._removeVertices(b):(a.viewEvent.native.shiftKey||this._clearSelection(),this.selectedVertices.includes(b)?this._removeFromSelection(b,!0):this._addToSelection(b)))}_setUpOperation(a){const {graphic:b,dx:c,dy:d}=a,f=b===this.graphic;this._resetSnappingStateVars();this._setUpGeometryHelper();this._saveSnappingContextForHandle(b,a);this._activeOperationInfo={target:this.graphic,mover:b,operationType:f?"move":"reshape",
totalDx:c,totalDy:d}}_onGraphicMoveStartCallback(a){const {dx:b,dy:c,graphic:d}=a;if(d===this.graphic){var {geometry:f}=d;this._setUpOperation(a);this._emitMoveStartEvent(b,c);null!=f&&"point"===f.type&&this._onHandleMove(d,b,c,a,()=>{this._updateTooltip(this.graphic,a.viewEvent);this._emitMoveEvent(b,c)})}else{if(!this.selectedVertices.includes(d)){this._clearSelection();if(this._isMidpoint(d)){f=this.graphic.clone();const e=this._createVertexFromMidpoint(d);this._emitVertexAddEvent([d],f,e)}this._addToSelection(d)}this._setUpOperation(a);
this._emitReshapeStartEvent(d);this._onHandleMove(d,b,c,a,()=>{this._updateTooltip(d,a.viewEvent);this._emitReshapeEvent(d)})}}_onGraphicMoveCallback(a){var b=this._activeOperationInfo;if(b){var {dx:c,dy:d,graphic:f}=a;b.totalDx+=c;b.totalDy+=d;({operationType:b}=b);var {geometry:e}=f;if(null!=e)if("move"===b)if("point"===e.type)this._onHandleMove(f,c,d,a,()=>{this._updateTooltip(this.graphic,a.viewEvent);this._emitMoveEvent(c,d)});else{if("polyline"===e.type||"polygon"===e.type)b=E(e),this._updateVertexGraphicLocations(b),
this._updateTooltip(this.graphic,a.viewEvent),this._emitMoveEvent(c,d)}else this._onHandleMove(f,c,d,a,()=>{this._updateTooltip(f,a.viewEvent);this._emitReshapeEvent(f)})}}_onGraphicMoveStopCallback(a){const b=this._activeOperationInfo;if(b){var {dx:c,dy:d,graphic:f}=a,{operationType:e}=b;b.totalDx+=c;b.totalDy+=d;this._onHandleMove(f,c,d,a,()=>"move"===e?this._emitMoveStopEvent():this._emitReshapeStopEvent(f));this._isMidpoint(f)?this.refresh():(this._updateTooltip(this._isVertex(f)?f:null),this._resetSnappingStateVars(),
this._activeOperationInfo=null)}}_updateVertexGraphicLocations(a){const {_coordinateHelper:b}=this;for(const c of this.vertexGraphics){const {pathIndex:d,pointIndex:f}=c.attributes;c.geometry=b.arrayToPoint(a[d][f])}this._updateMidpointGraphicLocations(a)}_updateMidpointGraphicLocations(a){for(const b of this.midpointGraphics){const {pathIndex:c,pointIndexStart:d,pointIndexEnd:f}=b.attributes,e=a[c];b.geometry=this._getMidpoint(e[d],e[f])}}_getMidpoint(a,b){const {_coordinateHelper:c}=this;a=c.arrayToVector(a);
b=c.arrayToVector(b);a=c.toXYZ(a);b=c.toXYZ(b);const [d,f,e]=u.getMidpoint(a,b);b=c.hasM()?0:void 0;return new z({x:d,y:f,z:e,m:b,spatialReference:c.spatialReference})}_getVertexFromEditGeometry(a){const [b,c]=F(a);v.assertIsSome(this._editGeometryOperations);return this._editGeometryOperations.data.components[b].vertices[c]}_onHandleMove(a,b,c,d,f){v.abortMaybe(this._snappingTask);const e=this._snappingContext;if(e){var g=a.geometry,k="graphic-move-stop"===d.type;if(null!=this.snappingManager&&2>
this.selectedVertices.length&&!k){const p=this.snappingManager;this._stagedVertex=p.update({point:g,context:e});this._syncGeometryAfterVertexMove(a,new z(this._stagedVertex),b,c,k);f();this._snappingTask=G.createTask(async l=>{l=await p.snap({point:g,context:e,signal:l});l.valid&&(this._stagedVertex=l.apply(),this._syncGeometryAfterVertexMove(a,new z(this._stagedVertex),b,c,k),f())})}else d=null!=this._stagedVertex?new z(this._stagedVertex):g,this._syncGeometryAfterVertexMove(a,d,b,c,k),f()}}_syncGeometryAfterVertexMove(a,
b,c,d,f=!1){var e=this._editGeometryOperations?.data.geometry;if(e)if("point"===e.type)a.geometry=b;else if("mesh"===e.type)a.geometry=e.centerAt(b);else{var {_coordinateHelper:g}=this;const [k,p]=F(a);let l=u.geometryToCoordinates(e);const r=l[k].length-1,t=g.pointToArray(b);l[k][p]=t;"polygon"===e.type&&(0===p?l[k][r]=t:p===r&&(l[k][0]=t));this._isVertex(a)&&(l=this._moveRelatedCoordinates(l,a,t),l=this._moveSelectedHandleCoordinates(l,a,c,d,"polygon"===e.type),this._updateMidpointGraphicLocations(l));
this.graphic.geometry=e.clone();d=g.pointToVector(b);c=this._getVertexFromEditGeometry(a);e=g.getZ(d);g=d[0]-c.pos[0];d=d[1]-c.pos[1];e=null!=e?e-c.pos[2]:0;this._editGeometryOperations?.moveVertices([c],g,d,e);f&&(this._mover?this._mover.updateGeometry(this._mover.graphics.indexOf(a),b):a.geometry=b)}}_moveRelatedCoordinates(a,b,c){var {relatedGraphicIndices:d}=b.attributes;for(const f of d){d=this.vertexGraphics.at(f);const {pathIndex:e,pointIndex:g}=d.attributes;a[e][g]=c;d.geometry=b.geometry}return a}_moveSelectedHandleCoordinates(a,
b,c,d,f){for(const g of this.selectedVertices)if(g!==b){const {pathIndex:k,pointIndex:p,relatedGraphicIndices:l}=g.attributes,r=N.cloneMove(g.geometry,c,d,this.view),t=u.geometryToCoordinates(r);var e=a[k].length-1;a[k][p]=t;g.geometry=r;f&&(0===p?a[k][e]=t:p===e&&(a[k][0]=t));for(const C of l){e=this.vertexGraphics.at(C);const {pathIndex:ma,pointIndex:na}=e.attributes;a[ma][na]=t;e.geometry=r}}return a}_onGraphicPointerOverCallback(a){this._hoverGraphic=a=a.graphic;const b=this._isVertex(a);b&&!this._isSelected(a)&&
(a.symbol=this.symbols.vertices.hover);this._updateTooltip(b?a:null);this._updateHoverCursor(a)}_onGraphicPointerOutCallback(a){a=a.graphic;this._hoverGraphic=null;this._isVertex(a)&&!this._isSelected(a)&&(a.symbol=this.symbols.vertices.default);this.view.cursor="default";this._updateTooltip()}_createVertexFromMidpoint(a){const {_graphicAttributes:b,graphic:c}=this;var d=c.geometry;if(null==d||"polygon"!==d.type&&"polyline"!==d.type)return[];d=d.clone();const f=[],{pathIndex:e,pointIndexStart:g,pointIndexEnd:k}=
a.attributes,p=u.geometryToCoordinates(a.geometry),l=0===k?g+1:k,r=u.geometryToCoordinates(d);r[e].splice(l,0,p);a.attributes={...b,pathIndex:e,pointIndex:l,relatedGraphicIndices:[]};f.push({coordinates:r[e][l],componentIndex:e,vertexIndex:l});this.graphic.geometry=d;return f}_addToSelection(a){a.symbol=this.symbols.vertices.selected;this.selectedVertices.add(a);this._emitSelectEvent([a]);this._updateTooltip(a)}_removeFromSelection(a,b){const {vertices:c}=this.symbols;b=b?c.hover:c.default;this.selectedVertices.remove(a);
a.symbol=b;this._emitDeselectEvent([a]);this._updateTooltip()}_clearSelection(){const a=this.selectedVertices.toArray();if(0<a.length){for(const b of a)b.set("symbol",this.symbols.vertices.default);this.selectedVertices.removeAll();this._emitDeselectEvent(a);this._updateTooltip()}}_keyDownHandler(a){null==this._activeOperationInfo&&Y.enterInputModeIfAvailable(a,this.tooltip)||U.sketchKeys.delete.includes(a.key)&&!a.repeat&&this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_removeVertices(a){var b=
this.graphic.geometry;if(!(null==b||"polygon"!==b.type&&"polyline"!==b.type||"polygon"===b.type&&4>this.vertexGraphics.length||3>this.vertexGraphics.length)){var c=this.graphic.clone();b=b.clone();var d=u.geometryToCoordinates(b),f=[];a=a instanceof A?[a]:[...a];for(const e of a){const {x:g,y:k}=e.geometry;for(let p=0;p<d.length;p++){const l=d[p];for(let r=0;r<l.length;r++){const [t,C]=l[r];g===t&&k===C&&(f.push({coordinates:d[p][r],componentIndex:p,vertexIndex:r}),d[p].splice(Number(r),1))}}}if("polygon"===
b.type)d=d.filter(e=>{if(2>e.length)return!1;const [g,k]=e[0],[p,l]=e[e.length-1];if(2===e.length&&g===p&&k===l)return!1;g===p&&k===l||e.push(e[0]);return!0}),b.rings=d;else{for(const e of d)1===e.length&&d.splice(d.indexOf(e),1);b.paths=d}this.graphic.geometry=b;this.refresh();this._emitVertexRemoveEvent(a,c,f)}}_isVertex(a){return this.vertexGraphics.includes(a)}_isSelected(a){return this._isVertex(a)&&this.selectedVertices.includes(a)}_isMidpoint(a){return this.midpointGraphics.includes(a)}_updateHoverCursor(a){this.view.cursor=
this._isMidpoint(a)?"copy":"move"}_updateTooltip(a,b){let c=null;const {graphic:d,view:f,tooltipInfos:e}=this,g=d?.geometry;"point"===g?.type?c=e.movePoint:this._selectedVertex?c=e.selectedVertex:a===this.graphic?(c=e.translateGraphic,y.updateTranslateTooltipInfo(c,f,b)):a&&1<this.selectedVertices.length&&(c=e.translateVertices,y.updateTranslateVertexTooltipInfo(c,f,g,b));this.activeTooltipInfo=c}_emitMoveStartEvent(a,b){a=new da(this.graphic,a,b);this.emit("move-start",a);this.callbacks.onMoveStart?.(a)}_emitMoveEvent(a,
b){a=new ea(this.graphic,a,b);this.emit("move",a);this.callbacks.onMove?.(a)}_emitMoveStopEvent(a,b){if(null==a||null==b){b=this._activeOperationInfo;if(!b)return;a=b.totalDx;b=b.totalDy}a=new fa(this.graphic,a,b);this.emit("move-stop",a);this.callbacks.onMoveStop?.(a)}_emitReshapeStartEvent(a){a=new aa(this.graphic,a,this.selectedVertices.toArray());this.emit("reshape-start",a);this.callbacks.onReshapeStart?.(a)}_emitReshapeEvent(a){a=new ba(this.graphic,a,this.selectedVertices.toArray());this.emit("reshape",
a);this.callbacks.onReshape?.(a)}_emitReshapeStopEvent(a){a=new ca(this.graphic,a,this.selectedVertices.toArray());this.emit("reshape-stop",a);this.callbacks.onReshapeStop?.(a)}_emitSelectEvent(a){a=new ha(a);this.emit("select",a);this.callbacks.onVertexSelect?.(a)}_emitDeselectEvent(a){a=new ia(a);this.emit("deselect",a);this.callbacks.onVertexDeselect?.(a)}_emitVertexAddEvent(a,b,c){a=new ja(a,this.graphic,b,c);this.emit("vertex-add",a);this.callbacks.onVertexAdd?.(a)}_emitVertexRemoveEvent(a,b,
c){a=new ka(a,this.graphic,b,c);this.emit("vertex-remove",a);this.callbacks.onVertexRemove?.(a)}_logGeometryTypeError(){I.getLogger(this).error(new H("reshape:invalid-geometry","Reshape operation not supported for the provided graphic. The geometry type is not supported."))}};m.__decorate([n.property()],h.prototype,"_activeOperationInfo",void 0);m.__decorate([n.property()],h.prototype,"_coordinateHelper",null);m.__decorate([n.property()],h.prototype,"_editGeometryOperations",void 0);m.__decorate([n.property()],
h.prototype,"tooltip",void 0);m.__decorate([n.property()],h.prototype,"tooltipInfos",void 0);m.__decorate([n.property()],h.prototype,"activeTooltipInfo",void 0);m.__decorate([n.property()],h.prototype,"_selectedVertex",null);m.__decorate([n.property()],h.prototype,"_tooltipsContext",null);m.__decorate([n.property()],h.prototype,"callbacks",void 0);m.__decorate([n.property()],h.prototype,"enableMidpoints",void 0);m.__decorate([n.property()],h.prototype,"enableMovement",void 0);m.__decorate([n.property()],
h.prototype,"enableVertices",void 0);m.__decorate([n.property()],h.prototype,"graphic",void 0);m.__decorate([n.property({value:!0})],h.prototype,"highlightsEnabled",null);m.__decorate([n.property()],h.prototype,"layer",void 0);m.__decorate([n.property({readOnly:!0})],h.prototype,"midpointGraphics",void 0);m.__decorate([n.property()],h.prototype,"midpointSymbol",void 0);m.__decorate([n.property({readOnly:!0})],h.prototype,"selectedVertices",void 0);m.__decorate([n.property()],h.prototype,"snappingManager",
void 0);m.__decorate([n.property({readOnly:!0})],h.prototype,"state",null);m.__decorate([n.property()],h.prototype,"symbols",void 0);m.__decorate([n.property({type:D})],h.prototype,"sketchOptions",void 0);m.__decorate([n.property({readOnly:!0})],h.prototype,"type",void 0);m.__decorate([n.property({readOnly:!0})],h.prototype,"vertexGraphics",void 0);m.__decorate([n.property()],h.prototype,"view",void 0);return h=m.__decorate([J.subclass("esri.views.draw.support.Reshape")],h)});