// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.30/esri/copyright.txt for details.
//>>built
define("exports ../../renderers/PointCloudClassBreaksRenderer ../../renderers/PointCloudRenderer ../../renderers/PointCloudRGBRenderer ../../renderers/PointCloudStretchRenderer ../../renderers/PointCloudUniqueValueRenderer ../../renderers/ClassBreaksRenderer ../../renderers/DictionaryRenderer ../../renderers/DotDensityRenderer ../../renderers/HeatmapRenderer ../../renderers/PieChartRenderer ../../renderers/Renderer ../../renderers/SimpleRenderer ../../renderers/UniqueValueRenderer ../../renderers/support/jsonUtils ../../core/Logger ../../core/Error ../../core/accessorSupport/ensureType ../../intl/messages ../../intl/substitute ../../renderers/support/AuthoringInfo ../../renderers/support/AuthoringInfoVisualVariable ../../renderers/support/utils ../../renderers/visualVariables/ColorVariable ../../renderers/visualVariables/support/ColorStop ../../renderers/visualVariables/support/VisualVariableLegendOptions ../heuristics/ageUnit ../heuristics/outline ../heuristics/sizeRange ./support/utils ../statistics/support/ageUtils ../support/binningUtils ../support/utils ../support/adapters/support/layerUtils ../symbology/color".split(" "),
function(w,la,ma,P,Q,na,G,oa,pa,qa,ra,sa,ta,ua,va,wa,g,R,C,S,H,T,I,U,V,W,X,J,K,d,A,D,z,l,v){async function Y(a){if(!(a&&a.layer&&(a.field||a.valueExpression||a.sqlExpression)))throw new g("color-visual-variable:missing-parameters","'layer' and 'field', 'valueExpression' or 'sqlExpression' parameters are required");if(a.valueExpression&&!a.sqlExpression&&!a.view)throw new g("color-visual-variable:missing-parameters","View is required when 'valueExpression' is specified");a.forBinning&&D.verifyBinningParams(a,
"color-visual-variable");const b={...a};var c=a.forBinning?l.binningCapableLayerTypes:l.featureCapableLayerTypes;a=l.createLayerAdapter(b.layer,c,a.forBinning);if(!a)throw new g("color-visual-variable:invalid-parameters","'layer' must be one of these types: "+l.getLayerTypeLabels(c).join(", "));b.layer=a;await a.load(null!=b.signal?{signal:b.signal}:null);if("mesh"!==a.geometryType&&b.worldScale&&(!b.view||"3d"!==b.view.type))throw new g("color-visual-variable:invalid-parameters","'view' parameter should be an instance of SceneView when 'worldScale' parameter is true");
c=await z.getFieldsList({field:b.field,normalizationField:b.normalizationField,valueExpression:b.valueExpression});if(c=d.verifyBasicFieldValidity(a,c,"color-visual-variable:invalid-parameters"))throw c;return b}async function Z(a){if(!(a&&a.layer&&(a.field||a.valueExpression||a.sqlExpression)))throw new g("color-continuous-renderer:missing-parameters","'layer' and 'field', 'valueExpression' or 'sqlExpression' parameters are required");if(a.valueExpression&&!a.sqlExpression&&!a.view)throw new g("color-continuous-renderer:missing-parameters",
"View is required when 'valueExpression' is specified");a.forBinning&&D.verifyBinningParams(a,"color-continuous-renderer");const b={...a};b.symbolType=b.symbolType||"2d";b.defaultSymbolEnabled??(b.defaultSymbolEnabled=!0);var c=a.forBinning?l.binningCapableLayerTypes:l.featureCapableLayerTypes;a=l.createLayerAdapter(b.layer,c,a.forBinning);if(!a)throw new g("color-continuous-renderer:invalid-parameters","'layer' must be one of these types: "+l.getLayerTypeLabels(c).join(", "));b.layer=a;await a.load(null!=
b.signal?{signal:b.signal}:null);c=a.geometryType;b.outlineOptimizationEnabled="polygon"===c?b.outlineOptimizationEnabled:!1;b.sizeOptimizationEnabled="point"===c||"multipoint"===c||"polyline"===c?b.sizeOptimizationEnabled:!1;if("mesh"===c)b.symbolType="3d-volumetric",b.colorMixMode=b.colorMixMode||"replace",b.edgesType=b.edgesType||"none";else{if("3d-volumetric-uniform"===b.symbolType&&"point"!==c)throw new g("color-continuous-renderer:not-supported","3d-volumetric-uniform symbols are supported for point layers only");
if(b.symbolType.includes("3d-volumetric")&&(!b.view||"3d"!==b.view.type))throw new g("color-continuous-renderer:invalid-parameters","'view' parameter should be an instance of SceneView when 'symbolType' parameter is '3d-volumetric' or '3d-volumetric-uniform'");}c=await z.getFieldsList({field:b.field,normalizationField:b.normalizationField,valueExpression:b.valueExpression});if(a=d.verifyBasicFieldValidity(a,c,"color-continuous-renderer:invalid-parameters"))throw a;return b}async function aa(a){if(!a||
!a.layer||!a.field&&!a.valueExpression)throw new g("color-class-breaks-renderer:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");if(a.valueExpression&&!a.view)throw new g("color-class-breaks-renderer:missing-parameters","View is required when 'valueExpression' is specified");a.forBinning&&D.verifyBinningParams(a,"color-class-breaks-renderer");const b={...a};b.symbolType=b.symbolType||"2d";b.defaultSymbolEnabled??(b.defaultSymbolEnabled=!0);b.classificationMethod??
(b.classificationMethod="equal-interval");b.normalizationType=z.getNormalizationType(b);var c=a.forBinning?l.binningCapableLayerTypes:l.featureCapableLayerTypes;a=l.createLayerAdapter(b.layer,c,a.forBinning);if(!a)throw new g("color-class-breaks-renderer:invalid-parameters","'layer' must be one of these types: "+l.getLayerTypeLabels(c).join(", "));b.layer=a;if(!(null!=b.minValue&&null!=b.maxValue||null==b.minValue&&null==b.maxValue))throw new g("color-class-breaks-renderer:missing-parameters","Both 'minValue' and 'maxValue' are required when specifying custom data range");
await a.load(null!=b.signal?{signal:b.signal}:null);c=a.geometryType;b.outlineOptimizationEnabled="polygon"===c?b.outlineOptimizationEnabled:!1;if("mesh"===c)b.symbolType="3d-volumetric",b.colorMixMode=b.colorMixMode||"replace",b.edgesType=b.edgesType||"none";else{if("3d-volumetric-uniform"===b.symbolType&&"point"!==c)throw new g("color-continuous-renderer:not-supported","3d-volumetric-uniform symbols are supported for point layers only");if(b.symbolType.includes("3d-volumetric")&&(!b.view||"3d"!==
b.view.type))throw new g("color-class-breaks-renderer:invalid-parameters","'view' parameter should be an instance of SceneView when 'symbolType' parameter is '3d-volumetric' or '3d-volumetric-uniform'");}c=await z.getFieldsList({field:b.field,normalizationField:b.normalizationField});if(a=d.verifyBasicFieldValidity(a,c,"color-class-breaks-renderer:invalid-parameters"))throw a;return b}async function ba(a){if(!a?.layer)throw new g("color-point-cloud-true-color-renderer:missing-parameters","'layer' parameter is required");
a={...a,layer:a.layer};const b=[l.LayerType.PointCloudLayer],c=l.createLayerAdapter(a.layer,b);if(!c)throw new g("color-point-cloud-true-color-renderer:invalid-parameters","'layer' must be one of these types: "+l.getLayerTypeLabels(b).join(", "));a.layer=c;a.density=a.density||25;a.size=a.size||"100%";if(!d.isValidPointSize(a.size))throw new g("color-point-cloud-true-color-renderer:invalid-parameters","Invalid 'size' parameter. It should be a string of the form '100%'");await c.load(null!=a.signal?
{signal:a.signal}:null);return a}async function ca(a){if(!a?.layer||!a.field)throw new g("color-point-cloud-continuous-renderer:missing-parameters","'layer' and 'field' parameters are required");var b=a.field.toLowerCase();if("intensity"!==b&&"elevation"!==b)throw new g("color-point-cloud-continuous-renderer:invalid-parameters","'field' should be either 'intensity' or 'elevation'");a={...a,layer:a.layer,field:a.field};b=[l.LayerType.PointCloudLayer];const c=l.createLayerAdapter(a.layer,b);if(!c)throw new g("color-point-cloud-continuous-renderer:invalid-parameters",
"'layer' must be one of these types: "+l.getLayerTypeLabels(b).join(", "));a.layer=c;a.density=a.density||25;a.size=a.size||"100%";if(!d.isValidPointSize(a.size))throw new g("color-point-cloud-continuous-renderer:invalid-parameters","Invalid 'size' parameter. It should be a string of the form '100%'");await c.load(null!=a.signal?{signal:a.signal}:null);return a}function L(a){a={...a};const b=!!a.symbolType?.includes("3d-volumetric");delete a.symbolType;delete a.defaultSymbolEnabled;delete a.colorMixMode;
delete a.edgesType;a.worldScale=b;return a}async function da(a){if(!(a&&a.layer&&a.view&&a.startTime&&a.endTime))throw new g("color-age-renderer:missing-parameters","'layer', 'view', startTime', 'endTime' parameters are required");a={...a};a.symbolType=a.symbolType||"2d";a.defaultSymbolEnabled??(a.defaultSymbolEnabled=!0);var b=l.createLayerAdapter(a.layer,l.featureCapableLayerTypes);if(!b)throw new g("color-age-renderer:invalid-parameters","'layer' must be one of these types: "+l.getLayerTypeLabels(l.featureCapableLayerTypes).join(", "));
a.layer=b;await b.load(null!=a.signal?{signal:a.signal}:null);const c=b.geometryType;a.outlineOptimizationEnabled="polygon"===c?a.outlineOptimizationEnabled:!1;a.sizeOptimizationEnabled="point"===c||"multipoint"===c||"polyline"===c?a.sizeOptimizationEnabled:!1;if("mesh"===c)a.symbolType="3d-volumetric",a.colorMixMode=a.colorMixMode||"replace",a.edgesType=a.edgesType||"none";else if("3d-volumetric-uniform"===a.symbolType&&"point"!==c)throw new g("color-continuous-renderer:not-supported","3d-volumetric-uniform symbols are supported for point layers only");
if(a.symbolType.includes("3d-volumetric")&&(!a.view||"3d"!==a.view.type))throw new g("color-age-renderer:invalid-parameters","'view' parameter should be an instance of SceneView when 'symbolType' parameter is '3d-volumetric' or '3d-volumetric-uniform'");if(b=A.verifyDates(b,a.startTime,a.endTime,"color-age-renderer:invalid-parameters"))throw b;if(a.unit&&!A.supportedAgeUnits.includes(a.unit))throw new g("color-age-renderer:invalid-unit",`Supported units are: ${A.supportedAgeUnits.join(", ")}`);return a}
async function E(a,b){b=a.colorScheme;let c=null;var f=null,{view:e}=a;f=await d.getBasemapInfo(a.basemap,e);c=null!=f.basemapId?f.basemapId:null;f=null!=f.basemapTheme?f.basemapTheme:null;if(b)return{scheme:v.cloneScheme(b),basemapId:c,basemapTheme:f};const k=a.theme||"high-to-low";if(e=v.getSchemes({theme:k,basemapTheme:f,geometryType:a.geometryType,worldScale:a.worldScale,view:e}))c=e.basemapId,f=e.basemapTheme,b=a.schemeId?v.getSchemeById({id:k+"/"+c+"/"+a.schemeId,geometryType:a.geometryType}):
e.primaryScheme;return{scheme:b,basemapId:c,basemapTheme:f}}async function ea(a,b){b=await E({basemap:b.basemap,colorScheme:b.colorScheme,geometryType:b.layer.geometryType,schemeId:"elevation"===b.field.toLowerCase()?"point-cloud-elevation-scheme":"point-cloud-intensity-scheme"});const c=b.scheme;if(!c)throw new g("color-point-cloud-continuous-renderer:insufficient-info","Unable to find color scheme");const f=d.createColors(c.colors,5);if(5>f.length)throw new g("color-point-cloud-continuous-renderer:insufficient-info",
"Color scheme does not have enough colors");const e=d.getDefaultDataRange(a,!1,!0),k=e?d.createDefaultStopValues(e[0],e[1],5):d.createStopValues(a);return{stops:I.createColorStops({values:k,isDate:!1,colors:f,labelIndexes:[0,2,4]}),basemapId:b.basemapId,basemapTheme:b.basemapTheme,statistics:a,defaultValuesUsed:!!e,colorScheme:v.cloneScheme(c)}}async function fa(a,b,c,f){const {field:e,theme:k}=a;c=await E({basemap:a.basemap,theme:a.theme,geometryType:c,colorScheme:a.colorScheme,worldScale:a.worldScale,
view:a.view});const h=c.scheme;if(!h)throw new g("color-visual-variable:insufficient-info","Unable to find color scheme");var m=d.createColors(h.colors,5);if(5>m.length)throw new g("color-visual-variable:insufficient-info","Color scheme does not have enough colors");var n=h.id.includes("seq-");f=d.getDataRange(b,k,f,!0);n=d.createDataValues(f,b,k,n);const q=d.createColors(m,5);m=new U({field:e??void 0,valueExpression:a.valueExpression,valueExpressionTitle:a.valueExpressionTitle,normalizationField:a.normalizationField,
stops:n.map((p,r)=>new V({value:p,color:q[r]})),legendOptions:R.ensureClass(W,a.legendOptions)});a=new T({type:"color",minSliderValue:null!=a.minValue?a.minValue:b.min,maxSliderValue:null!=a.maxValue?a.maxValue:b.max,theme:h.theme});a=new H({visualVariables:[a]});return{basemapId:c.basemapId,basemapTheme:c.basemapTheme,visualVariable:m,statistics:b,defaultValuesUsed:f.defaultValuesUsed,colorScheme:v.cloneScheme(h),authoringInfo:a}}async function M(a,b,c,f,e,k,h){const m=await C.fetchMessageBundle("esri/smartMapping/t9n/smartMapping"),
{field:n,defaultSymbolEnabled:q}=h,p=v.cloneScheme(a.colorScheme),r=b?.opacity,t=[a.visualVariable.clone()];b?.visualVariables?.length&&t.push(...b.visualVariables.map(x=>x.clone()));c?.minSize&&t.push(c.minSize);return{renderer:new G({classBreakInfos:[{minValue:-N,maxValue:N,symbol:d.createSymbol(k,{type:h.symbolType,color:p.noDataColor,size:d.getSymbolSizeFromScheme(p,k),outline:d.getSymbolOutlineFromScheme(p,k,r),meshInfo:{colorMixMode:h.colorMixMode,edgesType:h.edgesType}})}],defaultLabel:q?m.other:
null,defaultSymbol:q?d.createSymbol(k,{type:h.symbolType,color:p.noDataColor,size:d.getSymbolSizeFromScheme(p,k),outline:d.getSymbolOutlineFromScheme(p,k,r),meshInfo:{colorMixMode:h.colorMixMode,edgesType:h.edgesType}}):null,field:n,normalizationType:f,normalizationField:e,valueExpression:h.valueExpression,valueExpressionTitle:h.valueExpressionTitle,visualVariables:t,authoringInfo:a.authoringInfo&&a.authoringInfo.clone()}),visualVariable:a.visualVariable.clone(),statistics:a.statistics,defaultValuesUsed:a.defaultValuesUsed,
colorScheme:v.cloneScheme(a.colorScheme),basemapId:a.basemapId,basemapTheme:a.basemapTheme}}async function F(a){a=await Y(a);const {view:b,field:c,valueExpression:f,minValue:e,maxValue:k,layer:h,normalizationField:m,signal:n,statistics:q}=a,[p]=await Promise.all([q??d.getSummaryStatistics({layer:h,field:c,valueExpression:f,sqlExpression:a.sqlExpression,sqlWhere:a.sqlWhere,normalizationType:m?"field":void 0,normalizationField:m,minValue:e,maxValue:k,view:b,signal:n})]),r=c&&"function"!==typeof c?h.getField(c):
null;return fa(a,p,h.geometryType,z.isAnyDateField(r))}function ha(a,b){a=a.colorsForClassBreaks;let c;if(a&&0<a.length&&(a.some(e=>{e.numClasses===b&&(c=e.colors);return!!c}),!c)){var f=a[a.length-1];a=b-f.numClasses;if(0<a){const e=f.colors[f.numClasses-1];c=f.colors.splice(0);for(f=1;f<=a;f++)c.push(e)}}c&&=d.createColors(c,c.length);return c}async function ia(a,b){var c=await C.fetchMessageBundle("esri/smartMapping/t9n/smartMapping");const f=a.defaultSymbolEnabled,e=a.layer.geometryType,k=a.classificationMethod,
h="standard-deviation"===k,m=await E({basemap:a.basemap,geometryType:e,theme:h?"above-and-below":null,colorScheme:a.colorScheme,worldScale:!!a.symbolType?.includes("3d-volumetric"),view:a.view}),n=m.scheme,{result:q,outlineResult:p}=b,r=q.classBreakInfos,t=a.normalizationType;if(!n)throw new g("color-class-breaks-renderer:insufficient-info","Unable to find color scheme");const x=ha(n,r.length);if(!x||x.length!==r.length)throw new g("color-class-breaks-renderer:insufficient-info","Color scheme does not have enough colors");
const B=p?.opacity;c=new G({classBreakInfos:r.map((y,u)=>({minValue:y.minValue,maxValue:y.maxValue,symbol:d.createSymbol(e,{type:a.symbolType,color:x[u],size:d.getSymbolSizeFromScheme(n,e),outline:d.getSymbolOutlineFromScheme(n,e,B),meshInfo:{colorMixMode:a.colorMixMode,edgesType:a.edgesType}}),label:y.label})),defaultLabel:f?c.other:null,defaultSymbol:f?d.createSymbol(e,{type:a.symbolType,color:n.noDataColor,size:d.getSymbolSizeFromScheme(n,e),outline:d.getSymbolOutlineFromScheme(n,e,B),meshInfo:{colorMixMode:a.colorMixMode,
edgesType:a.edgesType}}):null,field:a.field,valueExpression:a.valueExpression,valueExpressionTitle:a.valueExpressionTitle,normalizationType:t,normalizationField:a.normalizationField,normalizationTotal:"percent-of-total"===t?q.normalizationTotal:void 0,legendOptions:a.legendOptions,authoringInfo:new H({type:"class-breaks-color",classificationMethod:k,standardDeviationInterval:a.standardDeviationInterval})});h||I.setLabelsForClassBreaks({classBreakInfos:c.classBreakInfos,classificationMethod:k,normalizationType:t,
round:!0});p?.visualVariables?.length&&(c.visualVariables=p.visualVariables.map(y=>y.clone()));return{renderer:c,colorScheme:v.cloneScheme(n),classBreaksResult:q,defaultValuesUsed:b.defaultValuesUsed,basemapId:m.basemapId,basemapTheme:m.basemapTheme}}const N=2**53-1;w.createAgeRenderer=async function(a){var b=await C.fetchMessageBundle("esri/smartMapping/t9n/smartMapping");const c=await da(a),{defaultSymbolEnabled:f,view:e,startTime:k,endTime:h,symbolType:m,colorMixMode:n,edgesType:q,minValue:p,maxValue:r,
signal:t}=c;a=c.layer;const [x,B,y]=await Promise.all([c.unit?{unit:c.unit,statistics:null}:X({view:e,layer:a,startTime:k,endTime:h,minValue:p,maxValue:r,signal:t}),c.outlineOptimizationEnabled?J({layer:a,view:e,signal:t}).catch(d.errorCallback):null,c.sizeOptimizationEnabled?K({layer:a,view:e,signal:t}).catch(d.errorCallback):null]),{unit:u,statistics:ja}=x,O=A.getAgeExpressions({layer:a,startTime:k,endTime:h,unit:u}).valueExpression;b=S.substitute(b[`ageInfo_${u}`],{unit:u,startTime:d.formatDate(k,
u,a,e),endTime:d.formatDate(h,u,a,e)});b=await F(L({layer:a,basemap:c.basemap,valueExpression:O,symbolType:m,statistics:ja,legendOptions:{title:b},colorScheme:c.colorScheme,theme:c.theme,view:e,minValue:c.minValue,maxValue:c.maxValue,signal:t}));a=await M(b,B,y,null,null,a.geometryType,{layer:a,valueExpression:O,defaultSymbolEnabled:f,symbolType:m,colorMixMode:n,edgesType:q});a.renderer.authoringInfo?.visualVariables?.forEach(ka=>d.updateAgeRendererAuthoringInfoVV(ka,k,h,u));return{...a,unit:u}};
w.createClassBreaksRenderer=async function(a){a=await aa(a);var b=d.getClassBreaks;const c={...a};delete c.basemap;delete c.colorScheme;delete c.legendOptions;delete c.symbolType;delete c.defaultSymbolEnabled;delete c.colorMixMode;delete c.edgesType;c.analyzeData=!(null!=c.minValue&&null!=c.maxValue);b=await b.call(d,c,a.outlineOptimizationEnabled);return ia(a,b)};w.createContinuousRenderer=async function(a){a=await Z(a);const {layer:b,view:c,signal:f}=a,[e,k,h]=await Promise.all([F(L(a)),a.outlineOptimizationEnabled?
J({layer:b,view:c,signal:f}).catch(d.errorCallback):null,a.sizeOptimizationEnabled?K({layer:b,view:c,signal:f}).catch(d.errorCallback):null]),m=a.normalizationField;return M(e,k,h,m?"field":void 0,m,b.geometryType,a)};w.createPCContinuousRenderer=async function(a){a=await ca(a);var b=a.statistics??await d.getSummaryStatistics({layer:a.layer,field:a.field,signal:a.signal});b=await ea(b,a);return{renderer:new Q({field:a.field,pointsPerInch:a.density??void 0,pointSizeAlgorithm:d.getPointSizeAlgorithm(a.size),
stops:b.stops}),basemapId:b.basemapId,basemapTheme:b.basemapTheme,statistics:b.statistics,defaultValuesUsed:b.defaultValuesUsed,colorScheme:b.colorScheme}};w.createPCTrueColorRenderer=function(a){return ba(a).then(b=>({renderer:new P({field:"RGB",pointsPerInch:b.density??void 0,pointSizeAlgorithm:d.getPointSizeAlgorithm(b.size)})}))};w.createVisualVariable=F;Object.defineProperty(w,Symbol.toStringTag,{value:"Module"})});